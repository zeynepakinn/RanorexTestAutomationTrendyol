<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ranorex.Core</name>
    </assembly>
    <members>
        <member name="T:Ranorex.Core.IActionArgumentsControl">
            <summary>
            A custom representation of the <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/>'s.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IActionArgumentsControl.ArgumentsValid">
            <summary>
            Returns true if all arguments are valid.
            </summary>
        </member>
        <member name="E:Ranorex.Core.IActionArgumentsControl.ArgumentsValidChanged">
            <summary>
            This event is triggered whenever the <see cref="T:Ranorex.Core.IActionArgumentsControl"/> changes an <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/>
            </summary>
        </member>
        <member name="M:Ranorex.Core.IActionArgumentsControl.GetArgValue(Ranorex.Core.ActionDescriptor.Argument)">
            <summary>
            Returns the value of an <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/>.
            </summary>
            <param name="argDescriptor">The <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/>.</param>
            <returns>The value of the <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/>.
            If <paramref name="argDescriptor"/> is not found, <c>null</c> is returned.</returns>
        </member>
        <member name="T:Ranorex.Core.DefaultActionAttribute">
            <summary>
            Specifies the default action of an adapter.
            </summary>
            <remarks>By applying this attribute to a method in an adapter you can
            specify the default action of that adapter. This attribute must only be applied
            to a single method in an adapter!</remarks>
        </member>
        <member name="T:Ranorex.Core.ActionDescriptor">
            <summary>
            A descriptor for actions which are essentially methods.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ActionDescriptor.#ctor(System.String,System.String,Ranorex.Core.ActionDescriptor.Argument,System.Collections.Generic.IList{Ranorex.Core.ActionDescriptor.Argument})">
            <summary>
            Creates a new action descriptor.
            </summary>
            <param name="name">The name of the action. Should be CamelCased.</param>
            <param name="description">A short description of the action, its parameters and what is supposed to do.</param>
            <param name="returns">The return value of the action. If nothing is returned, pass <c>null</c> here.</param>
            <param name="arguments">A list of key-value pairs describing the arguments for the action.</param>
        </member>
        <member name="P:Ranorex.Core.ActionDescriptor.Returns">
            <summary>
            Gets the return value of this action. If this action does not return a value, the value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ActionDescriptor.Arguments">
            <summary>
            Gets a list of key-value pairs describing the arguments of the action.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ActionDescriptor.ProvideErrorMessage">
            <summary>
             Provides a custom representation of an error.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ActionDescriptor.CompareTo(Ranorex.Core.Descriptor)">
            <summary>
            Compares the current descriptor with another descriptor.
            </summary>
            <param name="other">A descriptor to compare with this descriptor.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            <list type="table">
                    <listheader><term>Value</term><term>Meaning</term></listheader>
                    <item><term>Less than zero</term><term>This object is less than the <paramref name="other"/> parameter.</term></item>
                    <item><term>Zero</term><term>This object is equal to <paramref name="other"/>.</term></item>
                    <item><term>Greater than zero</term><term>This object is greater than <paramref name="other"/>.</term></item>
                </list>
            </returns>
        </member>
        <member name="P:Ranorex.Core.ActionDescriptor.CreateCustomArgumentsControl">
            <summary>
             Provides a custom representation of the <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/>'s.
            </summary>
        </member>
        <member name="T:Ranorex.Core.ActionDescriptor.Argument">
            <summary>
            Represents an argument of an action, consisting of a name, type, and description.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ActionDescriptor.Argument.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/> class.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="type">The type of the argument.</param>
            <param name="description">The description of the argument.</param>
        </member>
        <member name="M:Ranorex.Core.ActionDescriptor.Argument.#ctor(System.String,System.Type,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.ActionDescriptor.Argument"/> class.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="type">The type of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value for this argument.</param>
        </member>
        <member name="P:Ranorex.Core.ActionDescriptor.Argument.Type">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>The argument type.</value>
        </member>
        <member name="P:Ranorex.Core.ActionDescriptor.Argument.DefaultValue">
            <summary>
            Gets the default value of the argument.
            </summary>
            <value>The default value or <c>null</c> if no default value is defined.</value>
        </member>
        <member name="P:Ranorex.Core.CmdLine.OptionAttribute.MapValue">
            <summary>
            Defines if the value should be set to a command line value with the same
            name using ReflectionUtil. Set to false if describing inner options.
            See AndroidOptions.InstrumentationOptions as example.
            Default: true
            </summary>
        </member>
        <member name="M:Ranorex.Core.CmdLine.OptionsBase.OptionsCreated">
            <summary>
            Override this method to perform post processing of the options after they were created by the OptionsFactory. This is primarily used
            to process the AdditionalOptions property.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Config.Config">
            <summary>
            Base class so that plugins can easily create hardly typed configs
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration">
            <summary>
            Contains Ranorex configuration settings.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.ConfigurationParam">
            <summary>
            Represents a single configuration parameter with a name, type and default and current value.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Configuration.ConfigurationParam.#ctor(Ranorex.Core.CaseInsensitiveString,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Configuration.ConfigurationParam"/> class.
            </summary>
            <param name="name">The name of the parameter. Must not contain spaces or other characters
            that are not allowed in XML tags.</param>
            <param name="defaultValue">The default value of the parameter.</param>
            <param name="local">Defines if the parameter should be exported or imported. False means it will be in the solution settings.</param>
        </member>
        <member name="M:Ranorex.Core.Configuration.ConfigurationParam.#ctor(Ranorex.Core.CaseInsensitiveString,System.Object,Ranorex.Core.Configuration.ConfigurationParam.CheckValueHandler,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Configuration.ConfigurationParam"/> class.
            </summary>
            <param name="name">The name of the parameter. Must not contain spaces or other characters
            that are not allowed in XML tags.</param>
            <param name="defaultValue">The default value of the parameter.</param>
            <param name="checkValueHandler">A delegate that checks whether a value is valid
            for this parameter.</param>
            <param name="local">Defines if the parameter should be exported or not. False means it will be in the solution settings.</param>
        </member>
        <member name="T:Ranorex.Core.Configuration.ConfigurationParam.CheckValueHandler">
            <summary>
            Checks whether the value is valid for this parameter and converts the value to a valid
            format if possible.
            </summary>
            <param name="value">The value to set to the <see cref="P:Ranorex.Core.Configuration.ConfigurationParam.Value"/> property.</param>
            <returns>The checked value, possibly converted to a valid format if possible.</returns>
            <remarks>Throw an <see cref="T:System.ArgumentException"/> inside the handler if the
            value is not a valid value and cannot be made valid for this parameter.</remarks>
        </member>
        <member name="P:Ranorex.Core.Configuration.ConfigurationParam.DefaultValue">
            <summary>
            Gets the parameter's default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.ConfigurationParam.Dirty">
            <summary>
            Gets a value specifying if the <see cref="P:Ranorex.Core.Configuration.ConfigurationParam.Value"/> has been changed since last
            loading/saving the parameter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ConfigurationParam.DirtyIfEqualValue">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Ranorex.Core.Configuration.ConfigurationParam.Dirty"/> flag is set
            when setting the <see cref="P:Ranorex.Core.Configuration.ConfigurationParam.Value"/> even if the old and the new values are equal.
            </summary>
            <value>
                <c>true</c> if the <see cref="P:Ranorex.Core.Configuration.ConfigurationParam.Dirty"/> flag is set
            when setting the <see cref="P:Ranorex.Core.Configuration.ConfigurationParam.Value"/> even if the old and the new values are equal;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Configuration.ConfigurationParam.Local">
            <summary>
            Defines if the parameter should be exported or imported.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ConfigurationParam.Name">
            <summary>
            Gets the parameter name.
            </summary>
            <value>The name.</value>
            <remarks>The name must not contain spaces or other characters that are not allowed
            in XML tags.</remarks>
        </member>
        <member name="P:Ranorex.Core.Configuration.ConfigurationParam.Type">
            <summary>
            Gets the parameter's type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.ConfigurationParam.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Ranorex.Core.Configuration.ConfigurationParam.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A clone of the parameter instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.ConfigurationParam.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.ConfigurationParam.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <b>true</b>if the specified object is equal to the current object; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.ConfigurationParam.GetHashCode">
            <summary>
            Serves as the hash function
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.ConfigurationParam.ClearDirty">
            <summary>
            Clears the <see cref="P:Ranorex.Core.Configuration.ConfigurationParam.Dirty"/> flag.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.CustomConfigurationParam">
            <summary>
            Represents a custom configuration parameter that can be registered at runtime
            (see <see cref="M:Ranorex.Core.Configuration.Register(Ranorex.Core.Configuration.CustomConfigurationParam)"/> method).
            </summary>
        </member>
        <member name="M:Ranorex.Core.Configuration.CustomConfigurationParam.#ctor(Ranorex.Core.CaseInsensitiveString,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Configuration.CustomConfigurationParam"/> class.
            </summary>
            <param name="name">The name of the parameter. Must not contain spaces or other characters
            that are not allowed in XML tags.</param>
            <param name="displayName">The display name of the parameter.</param>
            <param name="category">The category for the parameter.</param>
            <param name="description">The description of the parameter.</param>
            <param name="defaultValue">The default value of the parameter.</param>
        </member>
        <member name="M:Ranorex.Core.Configuration.CustomConfigurationParam.#ctor(Ranorex.Core.CaseInsensitiveString,System.String,System.String,System.String,System.Object,Ranorex.Core.Configuration.ConfigurationParam.CheckValueHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Configuration.CustomConfigurationParam"/> class.
            </summary>
            <param name="name">The name of the parameter. Must not contain spaces or other characters
            that are not allowed in XML tags.</param>
            <param name="displayName">The display name of the parameter.</param>
            <param name="category">The category for the parameter.</param>
            <param name="description">The description of the parameter.</param>
            <param name="defaultValue">The default value of the parameter.</param>
            <param name="checkValueHandler">A delegate that checks whether a value is valid
            for this parameter.</param>
        </member>
        <member name="P:Ranorex.Core.Configuration.CustomConfigurationParam.Category">
            <summary>
            Gets the category for this parameter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.CustomConfigurationParam.Description">
            <summary>
            Gets the description of this parameter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.CustomConfigurationParam.DisplayName">
            <summary>
            Gets the display name of this parameter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.CustomConfigurationParam.Visible">
            <summary>
            Defines if the parameter is displayed on the user interface or not.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Configuration.CustomConfigurationParam.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A clone of the parameter instance.
            </returns>
        </member>
        <member name="P:Ranorex.Core.Configuration.Adapter">
            <summary>
            Gets the collection of configuration parameters for the <see cref="T:Ranorex.Adapter"/> class.
            </summary>
            <value>The adapter configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.EffectiveDataSetDialog">
            <summary>
            Gets the collection of configuration parameters for the EffectiveDataSetDialog.
            </summary>
            <value>The EffectiveDataSetDialog configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Imaging">
            <summary>
            Gets the collection of configuration parameters for <see cref="T:Ranorex.Imaging"/> operations.
            </summary>
            <value>The imaging operations configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Validation">
            <summary>
            Gets the collection of configuration parameters for <see cref="T:Ranorex.Validate"/> operations.
            </summary>
            <value>The validation action configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Input">
            <summary>
            Gets the collection of configuration parameters for keyboard/mouse input.
            </summary>
            <value>The input configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Keyboard">
            <summary>
            Gets the collection of configuration parameters for the <see cref="T:Ranorex.Keyboard"/> class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.KeyValueStore">
            <summary>
            Gets the collection of configuration parameters for the TestCasePropertyDialog.
            </summary>
            <value>The TestCasePropertyDialog configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.ManageMobileDevicesForm">
            <summary>
            Gets the collection of configuration parameters for the ManageMobileDevicesForm.
            </summary>
            <value>The ManageMobileDevicesForm configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Plugins">
            <summary>
            Gets the collection of configuration parameters that are specific to Ranorex plugins.
            </summary>
            <value>The Plugins configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Pointer">
            <summary>
            Gets the collection of configuration parameters for the <see cref="T:Ranorex.Mouse"/>
            and <see cref="N:Ranorex.Core.Touch"/> classes.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.Recorder">
            <summary>
            Gets the collection of recorder configuration parameters.
            </summary>
            <value>The recorder configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Repository">
            <summary>
            Gets the collection of repository configuration parameters.
            </summary>
            <value>The repository configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RxPath">
            <summary>
            Gets the collection of configuration parameters for the <see cref="T:Ranorex.Core.RxPath"/> class.
            </summary>
            <value>The RxPath configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Spy">
            <summary>
            Gets the collection of configuration parameters for the Spy application.
            </summary>
            <value>The Spy configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.SqlConnector">
            <summary>
            Gets the configuration parameters for the SqlConnector Configuration.
            </summary>
            <value>The Plugins configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.TestCasePropertyDialog">
            <summary>
            Gets the collection of configuration parameters for the TestCasePropertyDialog.
            </summary>
            <value>The TestCasePropertyDialog configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Tools">
            <summary>
            Gets the collection of configuration parameters that apply to all Ranorex tools.
            </summary>
            <value>The Tools configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.VariableStoreEditorForm">
            <summary>
            Gets the collection of configuration parameters for the VariableStoreEditorForm.
            </summary>
            <value>The VariableStoreEditorForm configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Report">
            <summary>
            Gets the collection of configuration parameters that apply to all Ranorex tools.
            </summary>
            <value>The Tools configuration.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.AbstractConfig">
            <summary>
            Base class for configuration wrapper classes that make configuration parameter
            easily accessible.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Configuration.AbstractConfig.conf">
            <summary>
            The <see cref="T:Ranorex.Core.Configuration"/> the wrapper class should provide access to.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Configuration.AbstractConfig.#ctor(Ranorex.Core.Configuration)">
            <summary>
            Constructs a new wrapper class that provides access to configuration parameters
            in the <paramref name="source"/> <see cref="T:Ranorex.Core.Configuration"/>.
            </summary>
            <param name="source">The <see cref="T:Ranorex.Core.Configuration"/> to provide access to.</param>
        </member>
        <member name="T:Ranorex.Core.Configuration.AdapterConfig">
            <summary>
            A collection of configuration parameters for the <see cref="T:Ranorex.Adapter"/> class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.AdapterConfig.DefaultSearchTimeout">
            <summary>
            Gets or sets the value of the <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> property.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.AdapterConfig.DefaultUseEnsureVisible">
            <summary>
            Gets or sets the value of the <see cref="P:Ranorex.Adapter.DefaultUseEnsureVisible"/> property.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.AdapterConfig.TimeoutFactor">
            <summary>
            Gets or sets a value that all timeouts of find operations are multiplied with.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.DebuggerConfiguration">
            <summary>
            A collection of configuration parameters regarding debugging in Studio.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.DebuggerConfiguration.WithDebugger">
            <summary>
            Gets or sets a value indicating whether the debugger when running a test suite/recording.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.EffectiveDataSetDialogConfig">
            <summary>
            A collection of configuration parameters for the EffectiveDataSetDialog.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.EffectiveDataSetDialogConfig.DialogSize">
            <summary>
            Gets or sets the size of the EffectiveDataSetDialog at startup.
            </summary>
            <value>The form size.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.EffectiveDataSetDialogConfig.DialogState">
            <summary>
            Gets or sets the FormWindowState of the EffectiveDataSetDialog at startup.
            </summary>
            <value>The FormWindowState.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.ImagingConfig">
            <summary>
            A collection of configuration parameters for <see cref="T:Ranorex.Imaging"/> operations.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ImagingConfig.DefaultFindOptions">
            <summary>
            Gets or sets the default <see cref="T:Ranorex.Imaging.FindOptions"/> for image operations.
            </summary>
            <value>The default <see cref="T:Ranorex.Imaging.FindOptions"/> for image operations.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.ImagingConfig.UseHiddenImageCapture">
            <summary>
            Gets or sets a value indicating whether <see cref="M:Ranorex.Imaging.CaptureImageHidden(Ranorex.Core.Element)"/> should
            be used by <see cref="M:Ranorex.Imaging.CaptureImageAuto(Ranorex.Core.Element)"/> (if possible).
            </summary>
            <value>A value indicating if hidden screenshot capturing should be used.</value>
            <remarks>Hidden image capturing tries to capture screenshots without making the element
            visible before. This might not work for every control, try disabling this option if you
            have problems capturing screenshots.</remarks>
        </member>
        <member name="T:Ranorex.Core.Configuration.ValidationConfig">
            <summary>
            A collection of configuration parameters for <see cref="T:Ranorex.Validate"/> operations.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ValidationConfig.DefaultOptions">
            <summary>
            Gets or sets the default <see cref="T:Ranorex.Validate.Options"/> for validation operations.
            </summary>
            <value>The default <see cref="T:Ranorex.Validate.Options"/> for validation operations.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.InputConfig">
            <summary>
            A collection of configuration parameters for keyboard/mouse input.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.InputConfig.AsynchronousDispatching">
            <summary>
            Gets or sets a value indicating whether the inputs from keyboard and mouse are
            dispatched asynchronously, i.e. without blocking the low level Windows hooks.
            </summary>
            <value>A value indicating whether inputs are dispatched asynchronously.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.InputConfig.EnableImeHook">
            <summary>
            Enable/Disable IME hook
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.KeyboardConfig">
            <summary>
            A collection of configuration parameters for the <see cref="T:Ranorex.Keyboard"/> class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.KeyboardConfig.PressSequencePreDelay">
            <summary>
            Gets or sets the time to wait before starting to press a key sequence in the
            <see cref="M:Ranorex.Keyboard.Press(System.String)"/> method.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.KeyboardConfig.SequenceFocusMaxRetries">
            <summary>
            Gets or sets the number of retries made when trying to focus the target element of a key sequence.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.KeyboardConfig.SequenceFocusBackoffInterval">
            <summary>
            Gets or sets the cumulative time interval (ms) between focus attempts.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.KeyValueStoreData">
            <summary>
            A collection of configuration parameters for the NewRecordingDialog.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.KeyValueStoreData.Data">
            <summary>
            Gets or sets the data of the KeyValueStore at startup.
            </summary>
            <value>Serialized store data</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.ManageMobileDevicesFormConfig">
            <summary>
            A collection of configuration parameters for the ManageMobileDevicesForm.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ManageMobileDevicesFormConfig.DialogSize">
            <summary>
            Gets or sets the size of the ManageMobileDevicesForm at startup.
            </summary>
            <value>The form size.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.ManageMobileDevicesFormConfig.DialogState">
            <summary>
            Gets or sets the FormWindowState of the ManageMobileDevicesForm at startup.
            </summary>
            <value>The FormWindowState.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.PluginsConfig">
            <summary>
            A collection of configuration parameters that are specific to Ranorex plugins.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.PluginsConfig.Win32">
            <summary>
            Gets the collection of configuration parameters for the Win32 plugin.
            </summary>
            <value>The Win32 plugin configuration.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.PluginsConfig.Win32Config">
            <summary>
            A collection of configuration parameters for the Win32 plugin.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.PluginsConfig.Win32Config.EnableBitBridge">
            <summary>
            Gets or sets a value indicating whether to enable the 32/64 bit bridge.
            </summary>
            <value><c>true</c> if the 32/64 bit bridge should be enabled; otherwise, <c>false</c>.</value>
            <remarks>
            Some functionality of the Win32 plugin is limited if a 32 bit process automates a 64 bit
            application (and vice versa). If the 32/64 bit bridge is enabled, the communication will
            transparently use a proxy process that has the same bit width as the automated application
            to provide the full functionality of the Win32 plugin.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Configuration.PluginsConfig.Win32Config.WhitelistedProcesses">
            <summary>
            Gets or sets list of names of White-listed Processes.
            </summary>
            <value>List of names of processes to be white-listed.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.PluginsConfig.Win32Config.BlacklistedProcesses">
            <summary>
            Gets or sets list of names of Black-listed Processes.
            </summary>
            /// <value>List of names of processes to be black-listed.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.PointerConfig">
            <summary>
            A collection of configuration parameters for the <see cref="T:Ranorex.Mouse"/>
            and <see cref="T:Ranorex.Touch"/> classes.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.PointerConfig.CheckIsValidLocation">
            <summary>
            Gets or sets a value specifying whether an exception should be thrown if the
            mouse/pointer is moved to a location outside of the visible desktop.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.RecorderConfig">
            <summary>
            A collection of recording configuration parameters.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.CoordinateMode">
            <summary>
            Gets or sets a value indicating whether to record pixel-based or proportional (to element size) relative coordinates for each clicked element.
            </summary>
            <value><c>Pixel</c> if recording relative coordinates based on pixels should be enabled; otherwise, <c>Proportional</c> mode is used.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.EnableCoordinates">
            <summary>
            Gets or sets a value indicating whether to record relative coordinates for each clicked element.
            </summary>
            <value><c>true</c> if recording relative coordinates should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.EnableHighlight">
            <summary>
            Gets or sets a value indicating whether elements should be highlighted during recording.
            </summary>
            <value><c>true</c> if elements should be highlighted during recording.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.EnableScreenshots">
            <summary>
            Gets or sets a value indicating whether screenshots should be made during recording.
            </summary>
            <value><c>true</c> if screenshots should be made during recording.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.EnableValidationWarnings">
            <summary>
            Gets or sets a value indicating whether record table validation warnings should be ignored/shown.
            </summary>
            <value><c>true</c> if validation warnings should be shown.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.FormBounds">
            <summary>
            Gets or sets the bounds of the recorder form at startup.
            </summary>
            <value>The form bounds.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.FormState">
            <summary>
            Gets or sets the windows state of the recorder form at startup.
            </summary>
            <value>The form window state.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.GeneratedCodeClassName">
            <summary>
            Gets or sets the name of the class to use for generated recorder code.
            </summary>
            <value>The name of the generated code class.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.GeneratedCodeLanguage">
            <summary>
            Gets or sets the default language for generated code.
            </summary>
            <value>The default language for generated code.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.GeneratedCodeNamespace">
            <summary>
            Gets or sets the namespace to use for generated recorder code.
            </summary>
            <value>The generated code namespace.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.KeyActionTime">
            <summary>
            Gets or sets the default total action time for new keyboard-related recording items.
            </summary>
            <value>The key action time.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.KeySequenceSplitTime">
            <summary>
            Gets or sets the split time for key sequence generation. Key sequences are split up if
            pauses between key presses exceed this value.
            </summary>
            <value>The key sequence split time.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.MouseActionTime">
            <summary>
            Gets or sets the default total action time (delay + movetime) for new mouse-related recording items.
            </summary>
            <value>The mouse action time.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.MouseMoveTime">
            <summary>
            Gets or sets the default mouse move time for new mouse-related recording items.
            </summary>
            <value>The mouse move time.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.ReplayGenerateReport">
            <summary>
            Gets or sets a value indicating whether a report should be generated when replaying.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.ScreenshotPanelVisible">
            <summary>
            Gets or sets a value whether the screenshot (and properties) panel is
            visible when a recorder window is opened.
            </summary>
            <value>The form window state.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.UseConfiguredTimingsOnRecord">
            <summary>
            Gets or sets a value indicating whether to use the configured timings
            or the actual time between actions when recording.
            </summary>
            <value><c>true</c> to use the configured timings for all newly recorded actions; <c>false</c> to
            use the actual time between recorded actions.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RecorderConfig.UseDefaultLogging">
            <summary>
            Gets or sets a value indicating whether to use default messages for the recorder items that have a default logging message.
            </summary>
            <value><c>true</c> if default logging should be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.ReportConfig">
            <summary>
            A collection of configuration parameters that apply to all Ranorex reports.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ReportConfig.ShowInvisibleCharacters">
            <summary>
            Gets or sets a value indicating whether invisible characters should be shown in reports.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.RepositoryConfig">
            <summary>
            A collection of repository configuration parameters.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.AppFolderTimeout">
            <summary>
            Gets or sets the default search timeout for application folders in a repository.
            </summary>
            <value>The application folder timeout.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.AutoGenerateFolders">
            <summary>
            Gets or sets a value indicating whether repository folders should be auto-generated when adding new items.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.FolderTimeout">
            <summary>
            Gets or sets the default search timeout for non-application folders in a repository.
            </summary>
            <value>The folder timeout.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.GeneratedCodeClassName">
            <summary>
            Gets or sets the name of the class to use for generated repository code.
            </summary>
            <value>The name of the generated code class.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.GeneratedCodeLanguage">
            <summary>
            Gets or sets the default language for generated repository code.
            </summary>
            <value>The default language for generated repository code.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.GeneratedCodeNamespace">
            <summary>
            Gets or sets the namespace to use for generated repository code.
            </summary>
            <value>The generated code namespace.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.ItemTimeout">
            <summary>
            Gets or sets the default search timeout for items in a repository.
            </summary>
            <value>The item search timeout.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.RepositoryVariableStoredAction">
            <summary>
            Gets or sets the default action to perform on repository variable when changing the recording variable default value.
            </summary>
            <value><c>Always</c> when the repository variable default value should always be updated, <c>Never</c> if
            the repository variable default value should never be changed.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.RepositoryConfig.UseAppFolderCache">
            <summary>
            Gets or sets a value indicating whether to cache the element corresponding to a repository app folder or not.
            </summary>
            <value><c>true</c> if the app folder elements in a repository should be cached ; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.RepositoryVariableDefaultAction">
            <summary>
            Denotes available actions to perform on repository variable when changing default value of recording variable.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Configuration.RepositoryVariableDefaultAction.None">
            <summary>No action is stored.</summary>
        </member>
        <member name="F:Ranorex.Core.Configuration.RepositoryVariableDefaultAction.Always">
            <summary>Repository variable default value is always updated.</summary>
        </member>
        <member name="F:Ranorex.Core.Configuration.RepositoryVariableDefaultAction.Never">
            <summary>Repository variable default value is never updated.</summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.RxPathConfig">
            <summary>
            A collection of configuration parameters for the <see cref="T:Ranorex.Core.RxPath"/> class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.RxPathConfig.BuildMode">
            <summary>
            Gets or sets the default mode when building RxPaths.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.RxPathConfig.EnableUidSearch">
            <summary>
            Gets or sets a value indicating whether UID search acceleration should be used.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.RxPathConfig.MaxMatchTextLen">
            <summary>
            Gets or sets the value set to the <see cref="P:Ranorex.Core.RxPath.MaxMatchTextLen"/> property.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.SpyConfig">
            <summary>
            A collection of configuration parameters for the Spy application.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.SpyConfig.AlwaysOnTop">
            <summary>
            Gets or sets a value indicating whether the Spy form should always be on
            top of other windows, i.e. be the topmost application form.
            </summary>
            <value>A value indicating whether Spy should always be the topmost
            application form.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.SpyConfig.CompleteAncestorSnapshot">
            <summary>
            Gets or sets a value indicating whether snapshots include the complete subtree of all
            ancestors of the selected element.
            </summary>
            <value>
            <c>True</c> if snapshots should also include the complete subtree of all ancestors of
            the selected element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Configuration.SpyConfig.EnableHighlight">
            <summary>
            Gets or sets a value indicating whether the element highlighting functionality
            in the Spy should be enabled on startup.
            </summary>
            <value>A value indicating whether the element highlighting functionality
            in the Spy should be enabled on startup.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.SpyConfig.FormBounds">
            <summary>
            Gets or sets the bounds of the Spy form at startup.
            </summary>
            <value>The form bounds.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.SpyConfig.FormState">
            <summary>
            Gets or sets the windows state of the Spy form at startup.
            </summary>
            <value>The form window state.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.SpyConfig.SelectedTabIndex">
            <summary>
            Gets or sets the index of the selected tab in the Spy at startup.
            </summary>
            <value>
            The index of the selected tab.
            </value>
        </member>
        <member name="T:Ranorex.Core.Configuration.SqlConnectorConfig">
            <summary>
            The configuration parameters for the <see cref="T:Ranorex.Core.Data.SqlDataConnector"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.SqlConnectorConfig.DialogDataSource">
            <summary>
            Gets or sets the type of database used.
            </summary>
            <value>The type of database used.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.SqlConnectorConfig.Provider">
            <summary>
            Gets or sets the name of the underlying data provider provider used
            for the SQL connection.
            </summary>
            <value>The name of the underlying data provider provider used
            for the SQL connection.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.TestCasePropertyDialogConfig">
            <summary>
            A collection of configuration parameters for the TestCasePropertyDialog.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.TestCasePropertyDialogConfig.DialogSize">
            <summary>
            Gets or sets the size of the TestCasePropertyDialogConfig at startup.
            </summary>
            <value>The form size.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.TestCasePropertyDialogConfig.DialogState">
            <summary>
            Gets or sets the FormWindowState of the TestCasePropertyDialogConfig at startup.
            </summary>
            <value>The FormWindowState.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.ModuleGroupBindingDialogConfig">
            <summary>
            A collection of configuration parameters for the ModuleGroupBindingDialog.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ModuleGroupBindingDialogConfig.DialogSize">
            <summary>
            Gets or sets the size of the ModuleGroupBindingDialog at startup.
            </summary>
            <value>The form size.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.ModuleGroupBindingDialogConfig.DialogState">
            <summary>
            Gets or sets the FormWindowState of the ModuleGroupBindingDialog at startup.
            </summary>
            <value>The FormWindowState.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.ToolsConfig">
            <summary>
            A collection of configuration parameters that apply to all Ranorex tools.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ToolsConfig.DisableAllExpensiveFlavorAttributes">
            <summary>
            Gets or sets a value indicating whether expensive flavor attributes should be
            disabled in the Ranorex tools.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ToolsConfig.IgnoredDialogs">
            <summary>
            Gets or sets the names of dialogs that should not be shown again by Ranorex tools.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ToolsConfig.IgnoredTechnologyLimitations">
            <summary>
            Gets or sets the names of ignored flavor limitations, i.e. limitations which
            are not displayed by Ranorex applications.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ToolsConfig.InvalidFileNames">
            <summary>
            Gets an Array of strings which are invalid filenames. These are checked when you create a new file
            or rename an existing file inside Ranorex Studio.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ToolsConfig.SyncRepoSelectionWithSpy">
            <summary>
            Get or sets a value indicating whether the selected repository element in Studio should be synchronized
            with the selected element in spy.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.ToolsConfig.UseUiaLauncher">
            <summary>
            Gets or sets a value indicating whether the Ranorex tools should use the UiaLauncher
            component on Windows 8 (and higher) to enable access to Windows apps for processes
            started by the tools, e.g. when replaying recordings.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.VariableStoreEditorFormConfig">
            <summary>
            A collection of configuration parameters for the VariableStoreEditorForm.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.VariableStoreEditorFormConfig.DialogSize">
            <summary>
            Gets or sets the size of the VariableStoreEditorForm at startup.
            </summary>
            <value>The form size.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.VariableStoreEditorFormConfig.DialogState">
            <summary>
            Gets or sets the FormWindowState of the VariableStoreEditorForm at startup.
            </summary>
            <value>The FormWindowState.</value>
        </member>
        <member name="T:Ranorex.Core.Configuration.AutoBindStoredActionType">
            <summary>
            Denotes available actions to perform for auto-binding variables.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Configuration.AutoBindStoredActionType.AskUser">
            <summary>Ask user.</summary>
        </member>
        <member name="F:Ranorex.Core.Configuration.AutoBindStoredActionType.Always">
            <summary>Perform auto-binding whenever possible without asking user.</summary>
        </member>
        <member name="F:Ranorex.Core.Configuration.AutoBindStoredActionType.Never">
            <summary>Don't perform auto-binding, and don't ask user.</summary>
        </member>
        <member name="T:Ranorex.Core.Configuration.VbCodeGenConfiguration">
            <summary>
            A collection of configuration parameters regarding code generation.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Configuration.#ctor(Ranorex.Core.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Configuration"/> class.
            </summary>
            <param name="parent">The parent configuration to inherit parameters from.</param>
        </member>
        <member name="P:Ranorex.Core.Configuration.Current">
            <summary>
            Gets or sets the current configuration instance.
            </summary>
            <value>The current configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.CustomConfigurationParameters">
            <summary>
            Gets a list of all registered custom configuration parameters (see <see cref="M:Ranorex.Core.Configuration.Register(Ranorex.Core.Configuration.CustomConfigurationParam)"/>).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.GlobalDefaults">
            <summary>
            Gets the global defaults that are hard-coded default values set by Ranorex.
            </summary>
            <value>The global defaults.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.UserSettingsFilename">
            <summary>
            The name of the file where the current user configuration settings are stored.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.Dirty">
            <summary>
            Gets a value indicating whether any of the configuration parameter values have
            changed since the last load/save.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Configuration.Parent">
            <summary>
            Gets the parent configuration.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Ranorex.Core.Configuration.Item(System.String)">
            <summary>
            Gets or sets a parameter by name.
            </summary>
            <value>The configuration parameter value.</value>
        </member>
        <member name="M:Ranorex.Core.Configuration.CreateFromFile(System.String,Ranorex.Core.Configuration,System.Boolean)">
            <summary>
            Creates a configuration instance from an XML file.
            </summary>
            <param name="settingsFile">The name of the file.</param>
            <param name="parent">The designated parent configuration.</param>
            <param name="importMode">If set to true, merge imported nonlocal parameters with current local parameters.</param>
            <returns>The loaded configuration instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.CreateFromXml(Ranorex.Libs.Xml.XmlNode,Ranorex.Core.Configuration,System.Boolean,Ranorex.Core.Configuration)">
            <summary>
            Creates a configuration instance from an XML representation.
            </summary>
            <param name="node">The node.</param>
            <param name="parent">The parent.</param>
            <param name="currentLocal">The current local config to merge with if only non-local parameters are loaded.</param>
            <param name="mergeNonLocal">If true, the loaded non-local parameters are merged with the local parameters from the specified local config.</param>
            <returns>The created configuration instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.Export(System.String)">
            <summary>
            Exports the <see cref="P:Ranorex.Core.Configuration.Current"/> configuration to the specified file.
            </summary>
            <param name="configurationFileName">The name of the file to export the configuration to.</param>
        </member>
        <member name="M:Ranorex.Core.Configuration.HandleCommandLineArguments">
            <summary>
            Handles the command line arguments passed when the process was started.
            </summary>
            <returns><c>true</c> if an action was taken according to the passed command line
            arguments and execution should not be continued (e.g. when the help text should be
            shown or when the configuration parameters should be listed); otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.Import(System.String)">
            <summary>
            Imports the configuration from the specified file name and sets it to the <see cref="P:Ranorex.Core.Configuration.Current"/> configuration.
            </summary>
            <param name="configurationFileName">The name of the file to import the configuration from.</param>
        </member>
        <member name="M:Ranorex.Core.Configuration.LoadFromUserSettings(Ranorex.Core.Configuration)">
            <summary>
            Creates a configuration instance from user settings (current user / application data).
            </summary>
            <param name="parent">The parent configuration.</param>
            <returns>The loaded configuration instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.LoadFromUserSettings(Ranorex.Core.Configuration,System.Boolean)">
            <summary>
            Creates a configuration instance from user settings (current user / application data).
            </summary>
            <param name="parent">The parent configuration.</param>
            <param name="createIfNotFound">If set to <c>true</c> and no configuration file is found
            in the user settings, then a configuration file is created.</param>
            <returns>The loaded configuration instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.Register(Ranorex.Core.Configuration.CustomConfigurationParam)">
            <summary>
            Registers a new custom configuration parameter.
            </summary>
            <param name="newParam">The new parameter.</param>
            <remarks>You can retrieve a list of all registered custom configuration parameters
            using the <see cref="P:Ranorex.Core.Configuration.CustomConfigurationParameters"/> property.</remarks>
        </member>
        <member name="M:Ranorex.Core.Configuration.Get``1(System.String)">
            <summary>
            Gets a configuration parameter by specifying a name and a target type.
            </summary>
            <typeparam name="T">The desired target type for the configuration parameter.</typeparam>
            <param name="name">The name of the configuration parameter.</param>
            <returns>The current parameter value.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.SaveToUserSettings">
            <summary>
            Stores the configuration to the user settings file. (current user / application data)
            </summary>
            <remarks>Only overwrites configuration parameters that were actually changed since the
            last load/save.</remarks>
        </member>
        <member name="M:Ranorex.Core.Configuration.ToXmlNode(Ranorex.Libs.Xml.XmlNode,System.Boolean)">
            <summary>
            Creates a XML node representing the parameters in the configuration instance.
            </summary>
            <param name="parent">The desired parent XML node.</param>
            <param name="forExport">If set to true, only non-local parameters are stored.</param>
            <returns>The created XML node.</returns>
        </member>
        <member name="M:Ranorex.Core.Configuration.TrySaveToUserSettings">
            <summary>
            Tries to save the configuration by calling <see cref="M:Ranorex.Core.Configuration.SaveToUserSettings"/> and
            catching and returning any exception thrown.
            </summary>
            <returns>Any exception thrown by <see cref="M:Ranorex.Core.Configuration.SaveToUserSettings"/> or <c>null</c>
            if no exception is thrown.</returns>
        </member>
        <member name="T:Ranorex.Core.Controls.CoreEventTelemetryMonitor">
            <summary>
            Interaction logic for CoreEventTelemetryMonitor.xaml
            </summary>
        </member>
        <member name="M:Ranorex.Core.Controls.CoreEventTelemetryMonitor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ranorex.Core.Controls.UiTask`1">
            <summary>
            Represents a task which is executed after a specified amount of time on the UI thread
            </summary>
            <typeparam name="T">The type of the state object to be passed to the task.</typeparam>
        </member>
        <member name="M:Ranorex.Core.Controls.UiTask`1.Queue(Ranorex.Core.Controls.UiTask{`0}.UiTaskWorker{`0},`0,System.Int32)">
            <summary>
            Queues a new task to be executed after a defined timeout (on the UI thread).
            </summary>
            <param name="callback">The callback which is called after the timeout has elapsed.</param>
            <param name="state">The state to be passed to the callback.</param>
            <param name="timeout">The timeout after the callback should be called.</param>
            <returns>The created task.</returns>
        </member>
        <member name="T:Ranorex.Core.CoreResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.About">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.AutoGenerateDataSourceErr">
            <summary>
              Looks up a localized string similar to Error in auto-generating data source.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Button">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Cell">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.CheckBox">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ChromeInstrumentationSuccessText">
            <summary>
              Looks up a localized string similar to The Ranorex Chrome extension has been installed..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ChromeInstrumentationUninstallSuccessText">
            <summary>
              Looks up a localized string similar to The Ranorex Chrome extension has been uninstalled..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Column">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ComboBox">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.CommandLineExeHelpText">
             <summary>
               Looks up a localized string similar to 
            &lt;ExecutableFileName&gt; [-/]&lt;argument&gt;
            
            .
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.CommonArgumentsHelpText">
            <summary>
              Looks up a localized string similar to Allowed arguments:
               help|?
                   Prints this help text.
               listconfigparams|lcp
                   Lists all settable configuration parameters and their values.
               config|cfg:&lt;config parameter name&gt;=&lt;value&gt;
                   Set values for configuration parameters.
               agent|a:&lt;agent name&gt;
                   Redirect execution to specified agent.
                   /a:&lt;agent&gt;   Use agent name, machine name or url (http://&lt;ip&gt;:8081/api).
                   /a:[&lt;tags&gt;]  Use comma separated tags. Quote tag if it contains spaces.
                   /a:?     [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ConditionsAllMet">
            <summary>
              Looks up a localized string similar to Condition fulfilled. All rules were matched..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ConditionsAllNotMet">
            <summary>
              Looks up a localized string similar to Condition not fulfilled. At least one rule wasn’t matched..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ConditionsAnyMet">
            <summary>
              Looks up a localized string similar to Condition fulfilled. At least one rule was matched..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ConditionsAnyNotMet">
            <summary>
              Looks up a localized string similar to Condition not fulfilled. No rules were matched..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Container">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ContextMenu">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.csharplogo4">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.CSVDataConnectorFailedToRead1A">
            <summary>
              Looks up a localized string similar to Failed to read CSV data file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DataBindingType_DataConnector">
            <summary>
              Looks up a localized string similar to Data source.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DataBindingType_Parameter">
            <summary>
              Looks up a localized string similar to Parameter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DataConnectorConfigEmptyName">
            <summary>
              Looks up a localized string similar to Empty name..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DataConnectorConfigNoColAvailable">
            <summary>
              Looks up a localized string similar to (No columns available).
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DataConnectorConfigNoColSelected">
            <summary>
              Looks up a localized string similar to (No column selected).
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DataConnectorConfigUpdateMask">
            <summary>
              Looks up a localized string similar to Click apply to update mask..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DateTime">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DefaultMessageRunMobileApp2A">
            <summary>
              Looks up a localized string similar to Run mobile app {0} on device {1}..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Desktop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.DisableTemporarilyText">
            <summary>
              Looks up a localized string similar to Disable temporarily.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineChangeLicensingConfig">
            <summary>
              Looks up a localized string similar to Do you want to change the licensing configuration now?.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseDefaultText">
            <summary>
              Looks up a localized string similar to No valid node-locked license was found..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseError">
            <summary>
              Looks up a localized string similar to License Error.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseFailedFloatingLicense">
            <summary>
              Looks up a localized string similar to The installed license is a Ranorex floating license, not a machine license. Floating licenses can only be installed on a Ranorex License Manager..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseKeyExpired">
            <summary>
              Looks up a localized string similar to The current license key is a trial key and has expired. Please contact sales@ranorex.com to acquire a new license..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseKeyInUse">
            <summary>
              Looks up a localized string similar to The current license key is already in use in another user session on this machine. Please wait for the license to become available again..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseKeyNotValid">
            <summary>
              Looks up a localized string similar to The current license key is not valid for this version of Ranorex. Please contact sales@ranorex.com to acquire a new license..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseUnknownProduct1A">
             <summary>
               Looks up a localized string similar to The installed license was issued for an unknown product type.
            Please contact support at {0} and provide them the used license key..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEngineLicenseVm1A">
             <summary>
               Looks up a localized string similar to You are using a node-locked license inside a virtual machine which is not allowed. Please either use this node-locked license on a physical machine or use a floating license.
            
            Please contact support at {0} for further questions..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ElementEnginePremiumLicenseRequired">
            <summary>
              Looks up a localized string similar to A valid &apos;Premium&apos; license is required for running this Ranorex application..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.EmptyVarName">
            <summary>
              Looks up a localized string similar to Empty variable tag $() without a name is not allowed..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.EnableText">
            <summary>
              Looks up a localized string similar to Enable.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.EndpointNotFound3A">
            <summary>
              Looks up a localized string similar to Failed to set endpoint as element tree root. No endpoint with the name &apos;{0}&apos; was found. There are {1} endpoints available: {2}..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorAmbiguousTestContainerSelection1A">
            <summary>
              Looks up a localized string similar to There are multiple test containers with the name &apos;{0}&apos;. Please specify a unique name or the ID of the test case you want to run..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorAmbiguousTestsuiteSeletion">
            <summary>
              Looks up a localized string similar to There are multiple test suite files in the assembly directory. Please specify the test suite by using command line parameters or rename the test suite file to the current assembly name..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorAppArgumentInvalid">
            <summary>
              Looks up a localized string similar to The specified application argument is invalid..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorBehaviorContinueWithIteration">
            <summary>
              Looks up a localized string similar to Continue with iteration.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorBehaviorContinueWithParent">
            <summary>
              Looks up a localized string similar to Continue with parent.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorBehaviorContinueWithSibling">
            <summary>
              Looks up a localized string similar to Continue with sibling.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorBehaviorStop">
            <summary>
              Looks up a localized string similar to Stop.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorCannotGenerateChildForNode">
            <summary>
              Looks up a localized string similar to Can not generate child for {0}..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorChildHierarchyContainsEntryNotPresentInFlatListOfChildren">
            <summary>
              Looks up a localized string similar to childhierarchy contains entry with id &apos;{0}&apos; which is not present in flatlistofchildren..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorConnectionLost">
            <summary>
              Looks up a localized string similar to The connection to the app was interrupted. This happens when leaving the app during recording. Without an active connection, the recording cannot be continued and has to be stopped.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorDeviceNameInvalid">
            <summary>
              Looks up a localized string similar to The specified device name is invalid..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorEndpointWithKeyAlreadyRegistered1A">
            <summary>
              Looks up a localized string similar to There is already an endpoint registered for platform &apos;{0}&apos;. The endpoint has to be unique per platform..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorFlatListOfChildrenContainsMoreThanOneElementWithSameId">
            <summary>
              Looks up a localized string similar to flatlistofchildren contains more than one item with id &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorInvalidTestSequenceArgs1A">
            <summary>
              Looks up a localized string similar to The test sequence contains more than one enabled test suite and some arguments in &apos;{0}&apos; require a specific test suite. Specify the arguments in the test sequence file rather than on the command line..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorMissingReportingService1A">
            <summary>
              Looks up a localized string similar to Unable to resolve any instance of &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorModuleNotFound1A">
            <summary>
              Looks up a localized string similar to Could not find a module &apos;{0}&apos; in the current test suite..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorNoTestsuiteFilesFoundInDir1A">
            <summary>
              Looks up a localized string similar to Could not find any test suite file in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorParameterHasInvlidType3A">
            <summary>
              Looks up a localized string similar to The parameter contract defines parameter &apos;{0}&apos; as &apos;{1}&apos;. But the passed parameter was of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorParameterRequired2A">
            <summary>
              Looks up a localized string similar to The parameter contract defines parameter &apos;{0}&apos; as &apos;{1}&apos;. But the passed parameter was null..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorParamsContractRequired1A">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; has set required to true. This is not allowed because required for a preceding parameter was set to false. After one parameter requirement was set to false all succeeding parameters have to be non required..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorParamsNotEnough2A">
            <summary>
              Looks up a localized string similar to The parameter contract requires &apos;{0}&apos; provided parameters but only &apos;{1}&apos; were passed..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorParentAlreadySet">
            <summary>
              Looks up a localized string similar to You are assigning a child (id &apos;{0}&apos;) which already has a parent. Call RemoveChild on the old parent before inserting it to a new parent..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorReportFileCreationFailed">
            <summary>
              Looks up a localized string similar to The report file or directory could not be created..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorSavingSettings">
            <summary>
              Looks up a localized string similar to Failed to save the settings.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorTestContainerNotFound1A">
            <summary>
              Looks up a localized string similar to Could not find a &apos;test case&apos; or &apos;smart folder&apos; with name or ID &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorTestSuiteFileNotFound1A">
            <summary>
              Looks up a localized string similar to Could not find test suite file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorTestSuiteFileNotFound2A">
            <summary>
              Looks up a localized string similar to Could not find matching test suite file for &apos;{0}&apos;. Please specify one of the following: &apos;{1}&apos; using the &apos;testsuite&apos; command line parameter..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ErrorText">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ExcAttachedCapabilityAlreadyRegistered1A">
            <summary>
              Looks up a localized string similar to The attached capability &apos;{0}&apos; is already registered..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ExecutingAsmLocationNotAvailable">
            <summary>
              Looks up a localized string similar to $(ExecutingAsmLocation) not available. See log for details..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FailedToLoadRxseq">
            <summary>
              Looks up a localized string similar to Failed to load Ranorex sequence file..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FailedToMaximizeProcWindow">
            <summary>
              Looks up a localized string similar to Failed to maximize non elevated process window, as no window handle was available..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FailedToValidateCondition">
            <summary>
              Looks up a localized string similar to Failed to validate condition. At least one rule was incomplete..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FileCompatibilityHigherVersionText">
            <summary>
              Looks up a localized string similar to The file is from a higher Ranorex version ({0}) than the installed one ({1}). Saving this file may delete information and corrupt the file..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FileCompatibilityOlderMajorVersionText">
            <summary>
              Looks up a localized string similar to The file is from an older major Ranorex version ({0}) than the installed one ({1}). Saving this file will upgrade it (file will no longer open in the old Ranorex version)..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FileCompatibilityUnknownVersionText">
            <summary>
              Looks up a localized string similar to The file contains no version information and may differ from installed Ranorex version {1}. Saving this file may corrupt it..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FinishText">
            <summary>
              Looks up a localized string similar to Finish.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FirefoxInstrumentationSuccessText">
            <summary>
              Looks up a localized string similar to The Ranorex Firefox extension has been installed..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FirefoxInstrumentationUninstallSuccessText">
            <summary>
              Looks up a localized string similar to The Ranorex Firefox extension has been uninstalled..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexInstallErrorBrowserClosedMessage">
             <summary>
               Looks up a localized string similar to 
            Please make sure that all your browser instances are closed..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexInstallErrorCodeMessage">
            <summary>
              Looks up a localized string similar to An error occured while installing. Error code {0}..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexInstallErrorMessage">
            <summary>
              Looks up a localized string similar to An error occured while installing. {0}..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexInstallErrorTitle">
            <summary>
              Looks up a localized string similar to Install error.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexPreloaderActivatedText">
             <summary>
               Looks up a localized string similar to The Ranorex preloader located at
            &apos;{0}&apos;
            has been activated..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexPreloaderDectivatedText">
             <summary>
               Looks up a localized string similar to The Ranorex preloader located at
            &apos;{0}&apos;
            has been deactivated..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexTracingDisabledText">
             <summary>
               Looks up a localized string similar to Tracing has been disabled.
            .
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.FlexTracingEnabledText">
             <summary>
               Looks up a localized string similar to Tracing has been enabled.
            .
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Form">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Grip">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Host">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ImageOperationCategory">
            <summary>
              Looks up a localized string similar to Image operation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ImageOperationProgressDialogMessage">
            <summary>
              Looks up a localized string similar to Image operation in progress..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Indicator">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.InvalidDataSourceNameMessage">
            <summary>
              Looks up a localized string similar to Select a data source.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.InvalidDataValueSourceMessage">
            <summary>
              Looks up a localized string similar to Select a column.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.InvalidParamSourceNameMessage">
            <summary>
              Looks up a localized string similar to Select a parameter source.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.InvalidParamValueSourceMessage">
            <summary>
              Looks up a localized string similar to Select a parameter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Link">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.List">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ListItem">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.LogicalComparisonOperatorAnd">
            <summary>
              Looks up a localized string similar to all.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.LogicalComparisonOperatorOr">
            <summary>
              Looks up a localized string similar to any.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.MediumILProcessHandleInvalid">
            <summary>
              Looks up a localized string similar to Process handle of non elevated process is invalid..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.MenuBar">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.MenuItem">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.NoAbortKeySetText">
            <summary>
              Looks up a localized string similar to No abort key set..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.NoColumnsAvailableText">
            <summary>
              Looks up a localized string similar to (No columns available).
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.NoColumnSelectedText">
            <summary>
              Looks up a localized string similar to (No column selected).
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.NoLabelColumnSelectedText">
            <summary>
              Looks up a localized string similar to (No column selected, iteration count will be used).
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.OnlineDokuLanguageRouteWithLeadingSlash">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.OpenBrowserSettingNotSupported1A">
            <summary>
              Looks up a localized string similar to Open browser setting &apos;{0}&apos; not supported for this host..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ParameterDataBindingInfoGlobalText">
            <summary>
              Looks up a localized string similar to global.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ParameterDataBindingInfoLocalText">
            <summary>
              Looks up a localized string similar to local.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.PathBuildOptionsKeyNotFound">
            <summary>
              Looks up a localized string similar to The required attribute &apos;{0}.{1}&apos; of the path building options configuration was not found..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Picture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.PressToAbortText">
            <summary>
              Looks up a localized string similar to Press &apos;{0}&apos; to abort..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.PressToSkipText">
            <summary>
              Looks up a localized string similar to Press &apos;Shift-{0}&apos; to skip delays and timeouts..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ProgressBar">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RadioButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ranorex_icon_activate_trial_80x80_dark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ranorex_icon_use_license_80x80_dark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RanorexIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RanorexReportCss">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RanorexReportDataSample">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RanorexReportPng">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RanorexReportView">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RanorexReportXsl">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Recorder_Telemetry_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RemoteMoveToWarning">
            <summary>
              Looks up a localized string similar to The MoveTo action is not supported when using Selenium WebDriver. Use Focus and EnsureVisible actions, if you want to automate hover effects..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepoEleNonUniqueId3A">
            <summary>
              Looks up a localized string similar to Item &apos;{0}&apos; of type &apos;{1}&apos; has non unique ID &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ReportArgumentsHelpText">
            <summary>
              Looks up a localized string similar to     reportfile|rf:&lt;report file path&gt;
                   Sets the name (and path) of the report file.
                   If no path is provided, the current directory is used.
                   By default, the filename specified in the rxtst file is used.
                   (for example: %S_%Y%M%D_%T.rxlog).
               zipreport|zr
                   Compresses the report (including associated files) to a single archive (&quot;.rxzlog&quot; extension).
               junit|ju
                   Creates the report in JUnit format as well. The report will be placed in the same location as the  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ReportTimeOptionRelativeToTestModuleStartTime">
            <summary>
              Looks up a localized string similar to Relative to test module start time.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ReportTimeOptionRelativeToTestSuiteStartTime">
            <summary>
              Looks up a localized string similar to Relative to test suite start time.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ReportTimeOptionWallClock">
            <summary>
              Looks up a localized string similar to Wall clock (machine time).
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryEntryCouldNotGetReferenceScreenshot">
            <summary>
              Looks up a localized string similar to Could not get reference screenshot: {0}.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryEntryFailedToReadImageFromStore">
            <summary>
              Looks up a localized string similar to Failed to read image &apos;{0}&apos; from store. {1}.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryEntryImageNameNotExist">
            <summary>
              Looks up a localized string similar to The image with name &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryEntryInvalidName">
            <summary>
              Looks up a localized string similar to The name is invalid..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryEntryNameIsUsed">
            <summary>
              Looks up a localized string similar to The name &apos;{0}&apos; is already used..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryEntryNameNotNull">
            <summary>
              Looks up a localized string similar to Name must not be null..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryEntryNameTooLong">
            <summary>
              Looks up a localized string similar to The name is too long (&gt;{0} chars)..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderKeywordConflict">
            <summary>
              Looks up a localized string similar to The name &apos;{0}&apos; is not allowed, since it conflicts with a keyword..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedBecause">
            <summary>
              Looks up a localized string similar to Move not allowed because {0}..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedDifferentOwnerAppFolders">
            <summary>
              Looks up a localized string similar to Move not allowed because owner appfolders are different..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedDownHierarchy">
            <summary>
              Looks up a localized string similar to Move not allowed because appfolder cannot be moved down in the hierarchy..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedFolderInAppFolder">
            <summary>
              Looks up a localized string similar to Move not allowed because contained folder is appfolder..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedNotMatchBasePath">
            <summary>
              Looks up a localized string similar to Move not allowed because contained item paths do not match target base path..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedNotMatchBasePathPrefixNotMatch">
            <summary>
              Looks up a localized string similar to Move not allowed because folder basepath prefix does not match..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedParentIntoChild">
            <summary>
              Looks up a localized string similar to Move not allowed because cannot move a parent into a child folder..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderMoveNotAllowedPrefixNotMatch">
            <summary>
              Looks up a localized string similar to Move not allowed because the prefix does not match..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderNameIsUsed">
            <summary>
              Looks up a localized string similar to The name &apos;{0}&apos; is already used..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderSuffixConflict">
            <summary>
              Looks up a localized string similar to The name &apos;{0}&apos; conflicts with item name &apos;{0}{1}&apos; because of the &apos;{1}&apos; suffix..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.RepositoryFolderWithoutInfoSuffix">
            <summary>
              Looks up a localized string similar to The name &apos;{0}&apos; must not end with &apos;{1}&apos;, since it conflicts with item name &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Row">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.rxlog">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;!-- edited with XMLSpy v2017 sp2 (http://www.altova.com) by Ron Keele (Ranorex) --&gt;
            &lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; elementFormDefault=&quot;qualified&quot;&gt;
                &lt;xs:element name=&quot;report&quot;&gt;
                    &lt;xs:annotation&gt;
                        &lt;xs:documentation&gt;
                            Root node for any report file.
                        &lt;/xs:documentation&gt;
                    &lt;/xs:annotation&gt;
                    &lt;xs:complexType&gt;
                        &lt;xs:sequence&gt;
                            &lt;xs:element ref=&quot;activity&quot;/&gt;
                [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ScrollBar">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.SearchingItem1A">
            <summary>
              Looks up a localized string similar to Searching item &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.SearchingItem2A">
            <summary>
              Looks up a localized string similar to Searching item &apos;{0}&apos; in &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Separator">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.SimpleValueSourceValidationErrorMessage">
            <summary>
              Looks up a localized string similar to Enter or select a value.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Slider">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.StatusBar">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.SupportQueryLinkUrl">
            <summary>
              Looks up a localized string similar to https://www.ranorex.com/support-query/.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Table">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TabPage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TabPageList">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TestReportUserAbortMessage">
            <summary>
              Looks up a localized string similar to The test run has been aborted by the user..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TestSuiteArgumentsHelpText">
            <summary>
              Looks up a localized string similar to     listglobalparams|lp
                   Lists all global parameters and their values.
               listtestcaseparams|listtestcontainerparams|ltcpa:&lt;name or guid of &apos;test case&apos; or &apos;smart folder&apos;&gt;
                   Lists all testcase parameters and their values.
               testcase|testcontainer|tc:&lt;name or guid of &apos;test case&apos; or &apos;smart folder&apos;&gt;
                   Runs this &apos;test case&apos; or &apos;smart folder&apos; only.
               testsuite|ts:&lt;path to test suite file&gt;
                   Runs the test cases defined by the test suite (rxtst) file.
                   By default
                  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TestSuiteEntryEmptyNameErrorText">
            <summary>
              Looks up a localized string similar to Empty or null strings not allowed..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TestSuiteEntryUsedNameErrorText1A">
            <summary>
              Looks up a localized string similar to The name &apos;{0}&apos; is already used..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Text">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TitleBar">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ToggleButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ToolBar">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ToolTip">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Tree">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.TreeItem">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Unknown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.UserGuideFileName">
            <summary>
              Looks up a localized string similar to RanorexUserGuide.chm.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ValueComparisonOperatorIsEqual">
            <summary>
              Looks up a localized string similar to is equal.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.ValueComparisonOperatorIsNotEqual">
            <summary>
              Looks up a localized string similar to is not equal.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.Version6OrHigherLoadMessage">
            <summary>
              Looks up a localized string similar to The {0} you are trying to load was created using a Ranorex version 6.0 or upwards. Due to large changes of the file format they are not compatible with versions before 6.0. You are using version {1}..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VersionCheckNoSln2A">
            <summary>
              Looks up a localized string similar to No &apos;{0}&apos; to perform a version check was found for base directory &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VersionCheckSolutionTooNew3A">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; was last saved with a newer file version ({1}) than this version of Ranorex Studio uses ({2}). We can&apos;t guarantee everything will work as it should. For correct functionality, use Ranorex Studio {1} or later instead..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VersionCheckSolutionTooOld2A">
            <summary>
              Looks up a localized string similar to Ranorex solution with version &apos;{0}&apos; is not supported anymore. Please use Ranorex version &apos;{1}&apos; to upgrade the solution to that version first. Alternatively contact Ranorex support for assistance..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VersionCheckTagNotFound2A">
            <summary>
              Looks up a localized string similar to No Ranorex version tag was found in file &apos;{0}&apos;. Please ensure you open the &apos;{1}&apos; file..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VersionCheckUpdated2A">
            <summary>
              Looks up a localized string similar to Solution version was updated from &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VersionCheckUpToDate">
            <summary>
              Looks up a localized string similar to Solution version is up to date..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingModeKeepAllTests">
            <summary>
              Looks up a localized string similar to All test cases.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingModeKeepFailedTests">
            <summary>
              Looks up a localized string similar to Failed test cases only.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingModeOff">
            <summary>
              Looks up a localized string similar to Off.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingSourceAuto">
            <summary>
              Looks up a localized string similar to Auto.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingSourceScreen1">
            <summary>
              Looks up a localized string similar to Screen 1.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingSourceScreen2">
            <summary>
              Looks up a localized string similar to Screen 2.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingSourceScreen3">
            <summary>
              Looks up a localized string similar to Screen 3.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.VideoRecordingSourceScreen4">
            <summary>
              Looks up a localized string similar to Screen 4.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResources.WrongPauseKeyAssigned">
            <summary>
              Looks up a localized string similar to Pause key cannot be the same as abort key. Please use a different key combination..
            </summary>
        </member>
        <member name="T:Ranorex.Core.CoreResourcesLimitationWarnings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.BitBridgeDisabledLimitation">
            <summary>
              Looks up a localized string similar to Ranorex and the automated process don’t have the same bit width and the 32/64 bit bridge is disabled. This limits object recognition. For full functionality, enable the 32/64 bit bridge in Ranorex Studio under Settings &gt; Advanced &gt; Enable 32/64 Bit Bridge..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.BitBridgeLimitation">
            <summary>
              Looks up a localized string similar to Ranorex and the automated process don’t have the same bit width and the 32/64 bit bridge couldn’t be started. Object recognition is limited..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.BrowserLimitation">
             <summary>
               Looks up a localized string similar to Something is limiting object recognition for &apos;{0}&apos;. This is usually caused by &apos;{0}&apos; not being instrumented correctly.
            Please run the Instrumentation Wizard to ensure the Ranorex extension is installed and enabled in &apos;{0}&apos;, and then restart the browser..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.CEFBlockedPortLimitation">
            <summary>
              Looks up a localized string similar to UI elements in your AUT can’t be identified because another application is blocking the remote debugging port (e.g. Chrome DevTools). Close the blocking program and restart the AUT..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.CEFLimitation">
            <summary>
              Looks up a localized string similar to Your CEF AUT couldn’t be instrumented correctly. Object recognition is limited..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.CEFMultipleTabsWithSameUrlLimitation">
            <summary>
              Looks up a localized string similar to Multiple tabs has the same URL in your AUT. Ensure every tab has unique URL and restart the AUT..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.CEFPortLimitation">
            <summary>
              Looks up a localized string similar to UI elements in your CEF AUT can’t be identified because the remote debugging port isn’t enabled in your AUT or can’t be found. Make sure you’ve enabled it and set it to 8081..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.DelphiLimitation">
             <summary>
               Looks up a localized string similar to Ranorex couldn’t get the remote object pointer for the &apos;{0}&apos;. This is usually caused by an outdated Delphi version.
            Follow the link below to check if your version is supported..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.DPILimitation">
            <summary>
              Looks up a localized string similar to Your DPI settings are limiting object recognition. Set the scaling of all connected monitors to 100 %..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.DWMLimitation">
            <summary>
              Looks up a localized string similar to An EnsureVisible action couldn&apos;t be executed because Windows did not allow bringing the window containing the targeted UI element into the foreground. This is likely caused by insufficient privileges. Restart Ranorex Studio as administrator or use the Ranorex.UiaLauncher to start the test executable..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.FlashFlexChromeLimitation">
            <summary>
              Looks up a localized string similar to Ranorex can’t identify UI elements in your Flash/Flex AUT because it isn’t instrumented correctly. For Chrome, you need to manually load the Ranorex Flash library or the Ranorex Flash module into your application to instrument it..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.FlashFlexLimitation">
            <summary>
              Looks up a localized string similar to Ranorex can’t identify UI elements in your &apos;{0}&apos; AUT because it isn’t instrumented correctly..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.IELimitation">
            <summary>
              Looks up a localized string similar to It seems the Ranorex addon for Internet Explorer isn’t installed. This makes object recognition significantly slower. Install the addon by running the Ranorex Studio setup again, only select the addon and restart Internet Explorer. In Internet Explorer, also disable Enhanced Protected Mode and, on Windows Server, Internet Explorer Enhanced Security Configuration..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.ImageBasedLimitation">
            <summary>
              Looks up a localized string similar to The setting ‘Asynchronous dispatching of mouse and keyboard events’ is disabled. In most cases, this will cause errors in image-based automation. Enable the setting in Ranorex Studio under Settings &gt; Advanced..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.InstrumentationLimitation">
            <summary>
              Looks up a localized string similar to UI elements in your &apos;{0}&apos; AUT can’t be identified because it couldn’t be instrumented automatically. Restart all Ranorex tools and the AUT with the same privileges, preferably as an administrator..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.InstrumentationLimitationFlashFlex">
            <summary>
              Looks up a localized string similar to UI elements in your &apos;{0}&apos; AUT can’t be identified because it isn’t instrumented correctly. Please run the Instrumentation Wizard and then restart the AUT. For more information, follow the link below..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.MobileAndroidEmulatorLimitation">
            <summary>
              Looks up a localized string similar to You are using an emulator and trying to record a mobile test in it. Object recognition is limited in this case and Ranorex Studio reverts to image-based recording. For full functionality, add the emulator as an endpoint and build a mobile test as explained in the link below..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.MobileDeviceVersionLimitation">
            <summary>
              Looks up a localized string similar to The Ranorex Service App isn’t running on the mobile device. This limits automation functionality, e.g. starting or stopping apps won’t be possible. Make sure the Service App is installed and running..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.MobileIOSLimitation">
            <summary>
              Looks up a localized string similar to iTunes couldn’t be detected. It’s required to connect to iOS devices via USB. Make sure iTunes is installed and started and then restart all Ranorex tools..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.ProcessPermissionLimitation">
            <summary>
              Looks up a localized string similar to Ranorex can’t identify UI elements in the automated process because of insufficient privileges. Start both with the same privileges, preferably as an administrator..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.QTAccessibilityLimitation">
             <summary>
               Looks up a localized string similar to You are using the Qt legacy automation mode, but your Qt application doesn’t include the Qt accessibility plugin or hasn’t been compiled with accessibility support. This limits object recognition.
            For instructions on how to solve this, follow the link below..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.QTLibsLimitation">
            <summary>
              Looks up a localized string similar to Ranorex can’t identify UI elements in your Qt AUT because it couldn’t instrument it automatically. Could not find support libraries at: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.QTLimitation">
            <summary>
              Looks up a localized string similar to Ranorex can’t identify UI elements in your Qt AUT because it couldn’t instrument it automatically. Start Ranorex Studio and the AUT with the same privileges, preferably as an administrator, and ensure your Qt version is supported..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.RecorderNoElementFoundBlacklistTechLimitMessage">
            <summary>
              Looks up a localized string similar to You’re trying to record actions in the process &apos;{0}&apos;, but it is blacklisted. To record in it, remove it from the blacklist in Ranorex Studio under Settings &gt; Plugins &gt; Win32 &gt; Black-listed process names..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.RecorderNoElementFoundWhitelistTechLimitMessage">
            <summary>
              Looks up a localized string similar to You’re trying to record actions in the process &apos;{0}&apos;, but you have an active whitelist and the process isn’t in it. To record in the process, add it to your whitelist in Ranorex Studio..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.SAPGUILimitation">
            <summary>
              Looks up a localized string similar to UI elements in your SAP AUT can’t be identified because scripting isn’t enabled. Enable scripting for both server and client in SAP..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.SAPLimitation">
             <summary>
               Looks up a localized string similar to Something is limiting object recognition for SAP. Make sure you:
            - Deselected the Ranorex EXE manifest files during installation of Ranorex Studio.
            - Started all Ranorex tools and SAP with the same privileges, preferably as an administrator..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.SilverlightLimitation">
            <summary>
              Looks up a localized string similar to The ‘Windowless’ property of your Silverlight AUT is set to ‘True’. This limits object recognition. Set the property to ‘False’ and restart the AUT..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.TrackerNoElementFoundBlacklistTechLimitMessage">
            <summary>
              Looks up a localized string similar to You’re trying to track elements in the process &apos;{0}&apos;, but it is blacklisted. To track in it, remove it from the blacklist in Ranorex Studio under Settings &gt; Plugins &gt; Win32 &gt; Black-listed process names..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.TrackerNoElementFoundWhitelistTechLimitMessage">
            <summary>
              Looks up a localized string similar to You’re trying to track elements in the process &apos;{0}&apos;, but you have an active whitelist and the process isn’t in it. To track in the process, add it to your whitelist in Ranorex Studio..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.UnsopportedOSLimitation">
            <summary>
              Looks up a localized string similar to Ranorex Studio does not support &apos;{0}&apos; anymore. Please upgrade to one of the supported operating systems listed in the link below..
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.WinFormsLimitation">
            <summary>
              Looks up a localized string similar to Something is limiting object recognition for WinForms. Missing privileges are a common cause of this. Try starting all Ranorex tools and the AUT with the same privileges, preferably as an administrator. .
            </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.WinFormsNetLimitation">
             <summary>
               Looks up a localized string similar to The control was recognized as a WinForms .NET 1.1 control. If this application targets the .NET Framework v1.1, then please ignore this message. Otherwise, the object recognition is not correct, most probably due to an installation issue.
            Please, uninstall and reinstall Ranorex and try again..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.WinFormsResolvingLimitation">
             <summary>
               Looks up a localized string similar to Something is limiting object recognition for WinForms. This is caused by one of the following:
            - Your AUT uses obfuscated controls or is a mixed-mode executable.
            - Your AUT and the test executable target different platforms/processors. This causes issues on 64-bit OS..
             </summary>
        </member>
        <member name="P:Ranorex.Core.CoreResourcesLimitationWarnings.WPFLegacyLimitation">
            <summary>
              Looks up a localized string similar to You are using the legacy UIA plug-in to identify WPF elements. This limits object recognition. If you experience problems, switch to the native WPF plugin in Ranorex Studio under Settings &gt; Plugins &gt; WPF &gt; WPF Legacy/UIA interaction &gt; WpfImprovedOnly..
            </summary>
        </member>
        <member name="T:Ranorex.Core.Data.IDataContext">
            <summary>
            Provides an interface for a context to enumerate through data from cascaded sources.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.Source">
            <summary>
            Gets or sets the data source associated with this context.
            </summary>
            <value>The data source of this context or <c>null</c> if no data source
            is associated with this context.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.Parent">
            <summary>
            Gets or sets the parent data context.
            </summary>
            <value>The parent data context of this context or <c>null</c> if this
            context does not have a parent.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.CurrentRow">
            <summary>
            Gets the row the data context is currently positioned at.
            </summary>
            <value>The current row.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.CurrentRowIndex">
            <summary>
            Gets the index of the current row.
            </summary>
            <value>The index of the current row.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.Parameters">
            <summary>
            Gets the parameters set for this context.
            </summary>
            <value>The parameters of this context.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.AvailableDataColumnNames">
            <summary>
            Gets a list of available data column names.
            </summary>
            <value>The available data column names.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.EffectiveRow">
            <summary>
            Gets the effective row the context is currently positioned at, that is
            the <see cref="P:Ranorex.Core.Data.IDataContext.CurrentRow"/> of this context concatenated with the
            current rows of all ancestor contexts.
            </summary>
            <value>The current effective row.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IDataContext.Item(System.String)">
            <summary>
            Gets the value from the specified variable name.
            </summary>
            <value></value>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.Reset">
            <summary>
            Resets the data context, i.e. sets the context to its initial position which is before
            the first data row, and also its ancestors.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.Reset(System.Boolean)">
            <summary>
            Resets the data context, i.e. sets the context to its initial position which is before
            the first data row, and optionally also its ancestors.
            </summary>
            <param name="withAncestors">A value specifying if the ancestors of this context should
            also be reset.</param>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.ReloadData">
            <summary>
            Reloads the data from the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> associated with this context
            and reloads data in ancestor contexts, too.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.ReloadData(System.Boolean)">
            <summary>
            Reloads the data from the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> associated with this context
            and optionally reloads data in ancestor contexts, too.
            </summary>
            <param name="withAncestors">A value specifying if the data in ancestor contexts should
            also be reloaded.</param>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.ClearData">
            <summary>
            Clears the data from the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> associated with this context.
            </summary>
            <remarks>Should be called only form the TEARDOWN of the associated 'TestCase'.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.SetRange(System.Int32,System.Int32)">
            <summary>
            Sets the range of rows in the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> that should be enumerated.
            </summary>
            <param name="min">The minimum row index.</param>
            <param name="max">The maximum row index.</param>
            <exception cref="T:System.ArgumentException">If the specified range is not valid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.SetRange(Ranorex.Core.Testing.DataRange)">
            <summary>
            Sets the range of rows in the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> that should be enumerated.
            </summary>
            <param name="dataRange">The range thas should be enumerated.</param>
            <exception cref="T:System.ArgumentNullException">If the given <see cref="T:Ranorex.Core.Testing.DataRange"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If the given <see cref="T:Ranorex.Core.Testing.DataRange"/> is not valid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.GetDataRangeInvalidString(System.Int32,System.Int32)">
            <summary>
            Checks if the data range is valid and returns an error message (using one-based indexing) if it is not.
            </summary>
            <param name="min">The minimum row index.</param>
            <param name="max">The maximum row index.</param>
            <returns>An error message if the data range is not valid; otherwise, <c>null</c>.</returns>
            <remarks>One-based indexing is used for the error message (not for the <paramref name="min"/>
            or <paramref name="max"/> values).</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.GetDataRangeInvalidString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Checks if the data range is valid and returns an error message if it is not.
            </summary>
            <param name="min">The minimum row index.</param>
            <param name="max">The maximum row index.</param>
            <param name="oneBasedErrorMessage">If <c>true</c>, one-based indexing is used in
            the error message (not for the <paramref name="min"/>
            or <paramref name="max"/> values); otherwise zero-based indexing is used.</param>
            <returns>An error message if the data range is not valid; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.SetFullRange">
            <summary>
            Instructs the data context to enumerate all rows in the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.Next">
            <summary>
            Advances the context and its ancestors to the next data row.
            </summary>
            <returns><c>true</c> if the context was successfully advances to the next row;
            <c>false</c> if the last row has been passed.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.Next(System.Boolean)">
            <summary>
            Advances the context to the next data row.
            </summary>
            <param name="withAncestors">If set to <c>true</c>, ancestors of this context are also advanced
            to the next row if this context passed its last local row.</param>
            <returns><c>true</c> if the context was successfully advances to the next row;
            <c>false</c> if the last row has been passed.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.Get(Ranorex.Core.Data.IDataBindingInfo)">
            <summary>
            Gets the data value for the specified data binding info
            </summary>
            <param name="dataBindingInfo">The data binding info object to retrieve data for.</param>
            <returns>The data for the specified data binding info.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="dataBindingInfo"/> is invalid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.Get(System.String)">
            <summary>
            Gets the data value for the specified variable name.
            </summary>
            <param name="variableName">The name of the variable to retrieve data for.</param>
            <returns>The data for the specified variable.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="variableName"/> is invalid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.SetParameter(System.String,System.String)">
            <summary>
            Sets a parameter value for this context.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Ranorex.Core.Data.IDataContext.RemoveParameter(System.String)">
            <summary>
            Removes the parameter with the specified name from this context.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns><c>true</c> if the parameter was successfully removed from the context;
            otherwise, <c>false</c>. This method also returns <c>false</c> if the parameter is not
            found.</returns>
        </member>
        <member name="T:Ranorex.Core.Data.Column">
            <summary>
            Represents a column in a data table.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.Column.#ctor(System.String,Ranorex.Core.Data.ColumnCollection)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="name">The <see cref="P:Ranorex.Core.Data.Column.Name"/> of the column.</param>
            <param name="owner">The <see cref="T:Ranorex.Core.Data.ColumnCollection"/> this column belongs to or <c>null</c>
            if the column is not yet bound to a collection.</param>
        </member>
        <member name="M:Ranorex.Core.Data.Column.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="name">The <see cref="P:Ranorex.Core.Data.Column.Name"/> of the column.</param>
            <remarks>This constructor overload sets <see cref="P:Ranorex.Core.Data.Column.Owner"/> to <c>null</c>.</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.Column.Index">
            <summary>
            Gets the index of the column inside its <see cref="P:Ranorex.Core.Data.Column.Owner"/> <see cref="T:Ranorex.Core.Data.ColumnCollection"/>.
            </summary>
            <value>The index of the column or <c>-1</c> of the <see cref="P:Ranorex.Core.Data.Column.Owner"/> column collection
            is not set.</value>
        </member>
        <member name="P:Ranorex.Core.Data.Column.Name">
            <summary>
            Gets the name of this column.
            </summary>
            <value>The name of the column.</value>
            <exception cref="T:System.ArgumentException">If the specified value is <c>null</c> or empty.</exception>
        </member>
        <member name="P:Ranorex.Core.Data.Column.Owner">
            <summary>
            Gets or sets the <see cref="T:Ranorex.Core.Data.ColumnCollection"/> this column belongs to.
            </summary>
            <value>The column collection this column belongs to or <c>null</c>
            if the column does not belong to a collection.</value>
        </member>
        <member name="T:Ranorex.Core.Data.ColumnCollection">
            <summary>
            Represents a collection of <see cref="T:Ranorex.Core.Data.Column"/> instances.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>Create a new empty collection that is not readonly.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.#ctor(System.Collections.Generic.IList{Ranorex.Core.Data.Column})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="columns">A list of columns that is used as internal backing store for this collection.</param>
            <remarks><see cref="M:Ranorex.Core.Data.ColumnCollection.OnInsert(Ranorex.Core.Data.Column,System.Int32)"/> is called for every ColumnHeader in <see cref="F:Ranorex.Core.Data.ColumnCollection.columns"/>.</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.ColumnCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>
            The number of elements contained in the collection.
            </returns>
        </member>
        <member name="P:Ranorex.Core.Data.ColumnCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns><c>true</c> if the collection is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Ranorex.Core.Data.ColumnCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.Core.Data.Column"/> with the specified ColumnHeader name.
            </summary>
            <param name="columnName">The name of the ColumnHeader to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If this collection does not contain a
            ColumnHeader with the specified name.</exception>
        </member>
        <member name="P:Ranorex.Core.Data.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Ranorex.Core.Data.Column"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the ColumnHeader to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the collection is read-only.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Ranorex.Column"/> with
            the specified <paramref name="columnName"/>.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>
                <c>true</c> if this collection contains a <see cref="T:Ranorex.Column"/> with
            the specified <paramref name="columnName"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.IndexOf(System.String)">
            <summary>
            Determines the index of the ColumnHeader with the specified <paramref name="columnName"/>
            within this collection.
            </summary>
            <param name="columnName">The name of the ColumnHeader to get the index of.</param>
            <returns>
            The index of the ColumnHeader with the specified <paramref name="columnName"/> if found
            in this collection; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.MakeReadOnly">
            <summary>
            Makes this collection read only.
            </summary>
            <remarks>This operation is irreversible.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.CreateCopy">
            <summary>
            Creates a deep copy of this collection.
            </summary>
            <returns>A new ColumnHeader collection containing columns with the same name
            as the columns in this collection.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.Add(Ranorex.Core.Data.Column)">
            <summary>
            Adds the specified ColumnHeader to this collection.
            </summary>
            <param name="column">The ColumnHeader to add.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.Contains(Ranorex.Core.Data.Column)">
            <summary>
            Determines whether the collection contains the specified ColumnHeader.
            </summary>
            <param name="item">The ColumnHeader to locate in the collection.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.IndexOf(Ranorex.Core.Data.Column)">
            <summary>
            Determines the index of a specific ColumnHeader in the collection.
            </summary>
            <param name="item">The ColumnHeader to locate in the collection.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.Insert(System.Int32,Ranorex.Core.Data.Column)">
            <summary>
            Inserts a column at the specified index.
            </summary>
            <param name="index">The zero-based index at which the column should be inserted.</param>
            <param name="column">The column to insert into the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.Remove(Ranorex.Core.Data.Column)">
            <summary>
            Removes the first occurrence of the specified column.
            </summary>
            <param name="column">The ColumnHeader to remove from the collection.</param>
            <returns><c>true</c> if the ColumnHeader was successfully removed from the collection;
            otherwise, <c>false</c>. This method also returns <c>false</c> if the ColumnHeader is not
            found in the original collection.</returns>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ColumnHeader at the specified index.
            </summary>
            <param name="index">The zero-based index of the ColumnHeader to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is not a valid index in the collection.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.CopyTo(Ranorex.Core.Data.Column[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the collection. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source collection is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.ColumnCollection.OnInsert(Ranorex.Core.Data.Column,System.Int32)">
            <summary>
            Called when a ColumnHeader is inserted into the collection.
            </summary>
            <param name="column">The ColumnHeader to insert.</param>
            <param name="index">The index at which the ColumnHeader should be inserted.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.ArgumentException">If another ColumnHeader with the same name as <paramref name="column"/>
            already exists in the collection.</exception>
        </member>
        <member name="T:Ranorex.Core.Data.CsvDataConnector">
            <summary>
            Provides access to data in a CSV (Character Separated Values) file.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.CsvDataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="fileName">The name of the CSV file.</param>
            <param name="withHeaders">Sets the initial value of the <see cref="P:Ranorex.Core.Data.CsvDataConnector.WithHeaders"/> property.</param>
            <remarks>This constructor overload sets the <see cref="P:Ranorex.Core.Data.CsvDataConnector.IncludeFile"/> property to
            <see cref="F:System.Windows.Forms.CheckState.Indeterminate"/></remarks>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.#ctor(System.String,System.String,System.Boolean,System.Windows.Forms.CheckState)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.CsvDataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="fileName">The name of the CSV file.</param>
            <param name="withHeaders">Sets the initial value of the <see cref="P:Ranorex.Core.Data.CsvDataConnector.WithHeaders"/> property.</param>
            <param name="includeFile">Sets the initial value of the <see cref="P:Ranorex.Core.Data.CsvDataConnector.IncludeFile"/> property.</param>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.#ctor(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.CsvDataConnector"/> class.
            </summary>
            <param name="node">An XML node containing the definition of the source.</param>
        </member>
        <member name="P:Ranorex.Core.Data.CsvDataConnector.XmlIdentifier">
            <summary>
            Gets the unique identifier for serialization and deserialization purposes as well as factory creation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Data.CsvDataConnector.WithHeaders">
            <summary>
            Gets or sets a value indicating whether the CSV file contains a header specifying column names.
            </summary>
            <value><c>true</c> if the CSV file contains a header specifying column names;
            otherwise, <c>false</c>.</value>
            <remarks>This property influences the way data is parsed from and written to the CSV file.
            If setting this property to <c>true</c>, the first line in the file is regarded as the
            header containing the names of the data columns</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.CsvDataConnector.SeparatorChar">
            <summary>
            Gets or sets the separator character.
            </summary>
            <value>The separator character.</value>
            <remarks>If the value of this property is set to <c>null</c>, the source will try
            to automatically detect the separator character when parsing the data from the CSV file.</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.CsvDataConnector.LastParseSeparatorChar">
            <summary>
            Gets the separator character used when last parsing the data from the CSV file.
            </summary>
            <value>The separator character used for the last parsing operation or the default separator
            character ',' if this source has not yet loaded data from the CSV file.</value>
        </member>
        <member name="P:Ranorex.Core.Data.CsvDataConnector.IncludeFile">
            <summary>
            Gets or sets a value specifying whether the file should be included
            into the associated project.
            </summary>
            <value>
            A value specifying whether to include the file into the associated project.
            </value>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.StoreData(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection,System.String)">
            <summary>
            Stores the data to the CSV file.
            </summary>
            <param name="columns">The columns to store.</param>
            <param name="rows">The rows to store.</param>
            <param name="fileName">The name of the file to write to.</param>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.GetXMLNodeDerived(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Add DataSource specific information from derived classes to the node
            </summary>
            <param name="node">The node to which information should be added.</param>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)">
            <summary>
            Loads the data from the CSV file.
            </summary>
            <param name="columns">The loaded columns.</param>
            <param name="rows">The loaded rows.</param>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.LoadColumnsImpl(Ranorex.Core.Data.ColumnCollection@)">
            <summary>
            Loads the data columns from the CSV file.
            </summary>
            <param name="columns">The loaded columns.</param>
        </member>
        <member name="M:Ranorex.Core.Data.CsvDataConnector.StoreDataImpl(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)">
            <summary>
            Stores the data to the CSV file.
            </summary>
            <param name="columns">The columns to store.</param>
            <param name="rows">The rows to store.</param>
        </member>
        <member name="T:Ranorex.Core.Data.DataConnector">
            <summary>
            Provides the ability to load and save data from a data source.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.DataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="readOnly">Sets the value of the <see cref="P:Ranorex.Core.Data.DataConnector.IsReadOnly"/> property.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.#ctor(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.DataConnector"/> class.
            </summary>
            <param name="node">An XML node containing the definition of the source.</param>
        </member>
        <member name="P:Ranorex.Core.Data.DataConnector.XmlIdentifier">
            <summary>
            Gets the unique identifier for serialization and deserialization purposes as well as factory creation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Data.DataConnector.Id">
            <summary>
            Gets or sets the unique ID of the source.
            </summary>
            <value>The unique ID of the source.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataConnector.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read-only.
            </summary>
            <value>
                <c>true</c> if this instance is read-only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Data.DataConnector.Name">
            <summary>
            Gets or sets the name of the source.
            </summary>
            <value>The name of the source.</value>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is <c>null</c> or empty
            or contains a '.' character.</exception>
        </member>
        <member name="P:Ranorex.Core.Data.DataConnector.MaskedColumnNames">
            <summary>
            The column names to mask at runtime.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.GetXMLNode(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Gets an XML node containing the definition of this source.
            </summary>
            <param name="parent">The parent XML node.</param>
            <returns>An XML node containing the definition of this source.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.LoadData(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)">
            <summary>
            Loads the data from the source.
            </summary>
            <param name="columns">The loaded columns.</param>
            <param name="rows">The loaded rows.</param>
            <remarks>Calls <see cref="M:Ranorex.Core.Data.DataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)"/> to perform the actual operation.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.LoadColumns(Ranorex.Core.Data.ColumnCollection@)">
            <summary>
            Loads the data columns from the source.
            </summary>
            <param name="columns">When this method returns, contains the loaded columns.
            If loading the columns fails, the data source will return the last loaded columns.</param>
            <remarks>Calls <see cref="M:Ranorex.Core.Data.DataConnector.LoadColumnsImpl(Ranorex.Core.Data.ColumnCollection@)"/> to perform the actual operation.
            <para>The default implementation of this method calls <see cref="M:Ranorex.Core.Data.DataConnector.LoadData(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)"/>
            and just returns the loaded columns. Inheriting classes should override this method
            if the can provide a more efficient way to just load the data columns.</para>
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.StoreData(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)">
            <summary>
            Stores the data to the data source.
            </summary>
            <param name="columns">The columns to store.</param>
            <param name="rows">The rows to store.</param>
            <remarks>Calls <see cref="M:Ranorex.Core.Data.DataConnector.StoreDataImpl(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)"/> to perform the actual operation.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.GetLastKnownColumnsAndRowCount(Ranorex.Core.Data.ColumnCollection@,System.Int32@)">
            <summary>
            Gets the last know loaded colums and row count.
            </summary>
            <param name="columns">Value is <c>null</c> if the columns have never set by a load or save call.</param>
            <param name="rowCount">Value is <c>-1</c> if the row count is never set by a load or save call.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.GetXMLNodeDerived(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Add DataSource specific information from derived classes to the node
            </summary>
            <param name="node">The node to which to add information of derived DataSources.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)">
            <summary>
            If implemented by an inheriting class, loads the data from the source.
            </summary>
            <param name="columns">The loaded columns.</param>
            <param name="rows">The loaded rows.</param>
            <remarks>If implemented by an inheriting class, this method anew loads all data
            from the data source.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.LoadColumnsImpl(Ranorex.Core.Data.ColumnCollection@)">
            <summary>
            If implemented by an inheriting class, loads the data columns from the source.
            </summary>
            <param name="columns">The loaded columns.</param>
            <remarks>The default implementation of this method calls <see cref="M:Ranorex.Core.Data.DataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)"/>
            and just returns the loaded columns. Inheriting classes should override this method
            if the can provide a more efficient way to just load the data columns.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.LoadColumnsImpl(Ranorex.Core.Data.ColumnCollection@,System.Int32@)">
            <summary>
            If implemented by an inheriting class, loads the data columns from the source
            and the number of rows in the data source.
            </summary>
            <param name="columns">The loaded columns.</param>
            <param name="rowCount">The number of rows.</param>
            <remarks>The default implementation of this method calls <see cref="M:Ranorex.Core.Data.DataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)"/>
            and just returns the loaded columns and number of loaded rows. Inheriting classes should
            override this method if the can provide a more efficient way to just load the data columns.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.StoreDataImpl(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)">
            <summary>
            If implemented by an inheriting class, stores the data to the data source.
            </summary>
            <param name="columns">The columns to store.</param>
            <param name="rows">The rows to store.</param>
            <remarks>If implemented by an inheriting class, this method anew stores all data
            to the data source.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="T:Ranorex.Core.Data.DataConnectorFactory">
            <summary>
            Provides a generic way to create <see cref="T:Ranorex.Core.Data.DataConnector"/>s.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Data.DataConnectorFactory.CreateDataSource">
            <summary>
            A method creating a data source from an XML structure.
            </summary>
            <param name="node">The root node of the XML structure.</param>
            <returns>The created data source.</returns>
        </member>
        <member name="P:Ranorex.Core.Data.DataConnectorFactory.RegisteredDataSourceNames">
            <summary>
            Gets the registered data source names.
            </summary>
            <value>The registered data source names.</value>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnectorFactory.CreateDataConnectorFromXmlNode(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Creates a data source from the specified XML node.
            </summary>
            <param name="node">An XML node containing the definition of the source.</param>
            <returns>The created data source.</returns>
            <exception cref="T:Ranorex.Core.Data.DataException">If the type of source is unknown.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnectorFactory.RegisterDataConnectorType(System.String,Ranorex.Core.Data.DataConnectorFactory.CreateDataSource)">
            <summary>
            Registers the specified data source type with a delegate
            </summary>
            <param name="name">The name</param>
            <param name="del">The delegate for the name</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataConnectorFactory.UnregisterDataConnectorType(System.String)">
            <summary>
            Unregisters the delegate which was registered under the specified name.
            </summary>
            <param name="name">The name which was registered.</param>
            <exception cref="T:System.ArgumentException">If the <paramref name="name"/> hasn't been registered before</exception>
        </member>
        <member name="T:Ranorex.Core.Data.DataContext">
            <summary>
            Provides a context to enumerate through data from cascaded sources.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.#ctor(Ranorex.Core.Data.DataCache,Ranorex.Core.Data.DataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.DataContext"/> class.
            </summary>
            <param name="source">The data source associated with this context.</param>
            <param name="parent">A parent data context.</param>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.Source">
            <summary>
            Gets or sets the data source associated with this context.
            </summary>
            <value>The data source of this context or <c>null</c> if no data source
            is associated with this context.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.Parent">
            <summary>
            Gets or sets the parent data context.
            </summary>
            <value>The parent data context of this context or <c>null</c> if this
            context does not have a parent.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.CurrentRow">
            <summary>
            Gets the row the data context is currently positioned at.
            </summary>
            <value>The current row.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.CurrentRowIndex">
            <summary>
            Gets the index of the current row.
            </summary>
            <value>The index of the current row.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.Parameters">
            <summary>
            Gets the parameters set for this context.
            </summary>
            <value>The parameters of this context.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.AvailableDataColumnNames">
            <summary>
            Gets a list of available data column names.
            </summary>
            <value>The available data column names.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.EffectiveRow">
            <summary>
            Gets the effective row the context is currently positioned at, that is
            the <see cref="P:Ranorex.Core.Data.DataContext.CurrentRow"/> of this context concatenated with the
            current rows of all ancestor contexts.
            </summary>
            <value>The current effective row.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataContext.Item(System.String)">
            <summary>
            Gets the value from the specified variable name.
            </summary>
            <value></value>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.Reset">
            <summary>
            Resets the data context, i.e. sets the context to its initial position which is before
            the first data row, and also its ancestors.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.Reset(System.Boolean)">
            <summary>
            Resets the data context, i.e. sets the context to its initial position which is before
            the first data row, and optionally also its ancestors.
            </summary>
            <param name="withAncestors">A value specifying if the ancestors of this context should
            also be reset.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.ReloadData">
            <summary>
            Reloads the data from the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> associated with this context
            and reloads data in ancestor contexts, too.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.ReloadData(System.Boolean)">
            <summary>
            Reloads the data from the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> associated with this context
            and optionally reloads data in ancestor contexts, too.
            </summary>
            <param name="withAncestors">A value specifying if the data in ancestor contexts should
            also be reloaded.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.ClearData">
            <summary>
            Clears the data from the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> associated with this context.
            </summary>
            <remarks>Should be called only form the TEARDOWN of the associated 'TestCase'.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.SetRange(System.Int32,System.Int32)">
            <summary>
            Sets the range of rows in the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> that should be enumerated.
            </summary>
            <param name="min">The minimum row index.</param>
            <param name="max">The maximum row index.</param>
            <exception cref="T:System.ArgumentException">If the specified range is not valid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.SetRange(Ranorex.Core.Testing.DataRange)">
            <summary>
            Sets the range of rows in the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/> that should be enumerated.
            </summary>
            <param name="dataRange">The range thas should be enumerated.</param>
            <exception cref="T:System.ArgumentNullException">If the given <see cref="T:Ranorex.Core.Testing.DataRange"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If the given <see cref="T:Ranorex.Core.Testing.DataRange"/> is not valid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.GetDataRangeInvalidString(System.Int32,System.Int32)">
            <summary>
            Checks if the data range is valid and returns an error message (using one-based indexing) if it is not.
            </summary>
            <param name="min">The minimum row index.</param>
            <param name="max">The maximum row index.</param>
            <returns>An error message if the data range is not valid; otherwise, <c>null</c>.</returns>
            <remarks>One-based indexing is used for the error message (not for the <paramref name="min"/>
            or <paramref name="max"/> values).</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.GetDataRangeInvalidString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Checks if the data range is valid and returns an error message if it is not.
            </summary>
            <param name="min">The minimum row index.</param>
            <param name="max">The maximum row index.</param>
            <param name="oneBasedErrorMessage">If <c>true</c>, one-based indexing is used in
            the error message (not for the <paramref name="min"/>
            or <paramref name="max"/> values); otherwise zero-based indexing is used.</param>
            <returns>An error message if the data range is not valid; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.SetFullRange">
            <summary>
            Instructs the data context to enumerate all rows in the data <see cref="P:Ranorex.Core.Data.DataContext.Source"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.Next">
            <summary>
            Advances the context and its ancestors to the next data row.
            </summary>
            <returns><c>true</c> if the context was successfully advances to the next row;
            <c>false</c> if the last row has been passed.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.Next(System.Boolean)">
            <summary>
            Advances the context to the next data row.
            </summary>
            <param name="withAncestors">If set to <c>true</c>, ancestors of this context are also advanced
            to the next row if this context passed its last local row.</param>
            <returns><c>true</c> if the context was successfully advances to the next row;
            <c>false</c> if the last row has been passed.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.Get(Ranorex.Core.Data.IDataBindingInfo)">
            <summary>
            Gets the data value for the specified data binding info
            </summary>
            <param name="dataBindingInfo">The data binding info object to retrieve data for.</param>
            <returns>The data for the specified data binding info.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="dataBindingInfo"/> is invalid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.Get(System.String)">
            <summary>
            Gets the data value for the specified variable name.
            </summary>
            <param name="variableName">The name of the variable to retrieve data for.</param>
            <returns>The data for the specified variable.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="variableName"/> is invalid.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.SetParameter(System.String,System.String)">
            <summary>
            Sets a parameter value for this context.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataContext.RemoveParameter(System.String)">
            <summary>
            Removes the parameter with the specified name from this context.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns><c>true</c> if the parameter was successfully removed from the context;
            otherwise, <c>false</c>. This method also returns <c>false</c> if the parameter is not
            found.</returns>
        </member>
        <member name="T:Ranorex.Core.Data.DataException">
            <summary>
            Exception that is thrown if data cannot be retrieved from a data source or
            cannot be converted to the required type.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataException.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="T:Ranorex.Core.Data.DataProviderContext">
            <summary>
            Provides a thread-safe context associated with a specific <see cref="T:Ranorex.Core.Data.IDataProvider"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataProviderContext.#ctor(Ranorex.Core.Data.IDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.DataProviderContext"/> class.
            </summary>
            <param name="dataProvider">The data provider associated with this context.</param>
        </member>
        <member name="P:Ranorex.Core.Data.DataProviderContext.Current">
            <summary>
            Gets the data provider for the current thread.
            </summary>
            <value>The current data provider.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataProviderContext.Providers">
            <summary>
            Gets the data provider stack for the current thread.
            </summary>
            <value>The data providers for the current thread.</value>
        </member>
        <member name="M:Ranorex.Core.Data.DataProviderContext.Push(Ranorex.Core.Data.IDataProvider)">
            <summary>
            Pushes the specified provider on the data provider stack making it
            the <see cref="P:Ranorex.Core.Data.DataProviderContext.Current"/> data provider.
            </summary>
            <param name="provider">The provider to push on the stack.</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataProviderContext.Pop">
            <summary>
            Removes the <see cref="P:Ranorex.Core.Data.DataProviderContext.Current"/> data provider instance from the stack.
            </summary>
            <returns>The data provider that was on top of the stack.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.DataProviderContext.Dispose">
            <summary>
            Disposes the context by popping the <see cref="P:Ranorex.Core.Data.DataProviderContext.Current"/> data provider
            from the stack.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Data.DataProviderContext.DummyDataProvider">
            <summary>
            A dummy <see cref="T:Ranorex.Core.Data.IDataProvider"/> implementation that does provide any data.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Data.DataProviderContext.DummyDataProvider.VariableNames">
            <summary>
            Gets the variable names.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataProviderContext.DummyDataProvider.GetValue(Ranorex.Core.CaseInsensitiveString)">
            <summary>
            Always returns <c>null</c>.
            </summary>
            <param name="variableName">Not used.</param>
            <returns>
            Always returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.DataProviderContext.DummyDataProvider.SetValue(Ranorex.Core.CaseInsensitiveString,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="variableName">Not used.</param>
            <param name="value">Not used.</param>
        </member>
        <member name="T:Ranorex.Core.Data.SimpleDataProvider">
            <summary>
            A simple <see cref="T:Ranorex.Core.Data.IDataProvider"/> implementation using a dictionary.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="values">A dictionary holding variable names and their values.</param>
        </member>
        <member name="P:Ranorex.Core.Data.SimpleDataProvider.VariableNames">
            <summary>
            Gets a collection of all available variable names.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataProvider.GetValue(Ranorex.Core.CaseInsensitiveString)">
            <summary>
            Gets the value of the specified variable.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <returns>
            The value of the variable, or <c>null</c> if the variable does not exist.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataProvider.SetValue(Ranorex.Core.CaseInsensitiveString,System.String)">
            <summary>
            Currently not supported.
            </summary>
            <param name="variableName">Not used.</param>
            <param name="value">Not used.</param>
            <exception cref="T:System.NotSupportedException">Always.</exception>
            <remarks>Always throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.IDataBindingInfo.MaskedUIValue">
            <summary>
            Gets the value as a masked <c>string</c> if the value should be masked in the UI (i.e. in the report).
            </summary>
            <value>Returns <c>null</c> if value is not to be masked in the UI.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DevicesDataSource.XmlIdentifier">
            <summary>
            Gets the unique identifier for serialization and deserialization purposes as well as factory creation.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DevicesDataSource.GetXMLNodeDerived(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Add DataSource specific information from derived classes to the node
            </summary>
            <param name="node">The node to which information should be added.</param>
        </member>
        <member name="T:Ranorex.Core.Data.FileDataConnector">
            <summary>
            A base class for file based data connectors.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.FileDataConnector.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.FileDataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="readOnly">Sets the value of the <see cref="P:Ranorex.Core.Data.DataConnector.IsReadOnly"/> property.</param>
        </member>
        <member name="M:Ranorex.Core.Data.FileDataConnector.#ctor(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.FileDataConnector"/> class.
            </summary>
            <param name="xmlNode">An XML node containing the definition of the source.</param>
        </member>
        <member name="P:Ranorex.Core.Data.FileDataConnector.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
            <remarks>The file name may be relative.</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.FileDataConnector.ResolvedFileName">
            <summary>
            Gets the name of the resolved file that takes relative paths into account.
            </summary>
            <value>The name of the resolved file.</value>
        </member>
        <member name="P:Ranorex.Core.Data.FileDataConnector.IncludeFile">
            <summary>
            Gets or sets a value specifying whether the file should be included
            into the associated project.
            </summary>
            <value>
            A value specifying whether to include the file into the associated project.
            </value>
        </member>
        <member name="M:Ranorex.Core.Data.FileDataConnector.ResolveFilename(System.String)">
            <summary>
            Resolves the specified file name taking relative paths into account.
            </summary>
            <param name="fileName">The (relative) name of a file.</param>
            <returns>The resolved file name.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.FileDataConnector.ResolveFilename(System.String,System.Boolean)">
            <summary>
            Resolves the specified file name taking relative paths into account.
            </summary>
            <param name="fileName">The (relative) name of a file.</param>
            <param name="useNameFallback">if set to <c>true</c> [use name fallback].</param>
            <returns>The resolved file name.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.FileDataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)">
            <summary>
            Sets up a file watcher on the data file and creates instances for the
            <paramref name="columns"/> and <paramref name="rows"/> arguments.
            </summary>
            <param name="columns">When this method returns, contains a new
            <see cref="T:Ranorex.Core.Data.ColumnCollection"/> instance.</param>
            <param name="rows">When this method returns, contains a new
            <see cref="T:Ranorex.Core.Data.RowCollection"/> instance that is bound to <paramref name="columns"/>.</param>
        </member>
        <member name="M:Ranorex.Core.Data.FileDataConnector.OnFileNameChanged(System.String)">
            <summary>
            Called when the filename changes
            </summary>
            <param name="oldFileName">The filename before the filename was changed.</param>
        </member>
        <member name="T:Ranorex.Core.Data.IFileDataConnector">
            <summary>
            Provides information on the file a <see cref="T:Ranorex.Core.Data.DataConnector"/> is bound to.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Data.IFileDataConnector.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
            <remarks>The file name may be relative.</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.IFileDataConnector.ResolvedFileName">
            <summary>
            Gets the name of the resolved file that takes relative paths into account.
            </summary>
            <value>The name of the resolved file.</value>
        </member>
        <member name="P:Ranorex.Core.Data.IFileDataConnector.IncludeFile">
            <summary>
            Gets or sets a value specifying whether the file should be included
            into the associated project.
            </summary>
            <value>A value specifying whether to include the file into the associated project.</value>
        </member>
        <member name="T:Ranorex.Core.Data.DataCache">
            <summary>
            Provides a in-memory, write-through cache for data loaded from a <see cref="T:Ranorex.Core.Data.DataConnector"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.#ctor(Ranorex.Core.Data.DataConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.DataCache"/> class.
            </summary>
            <param name="connector">The source this cache is associated with.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="connector"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Ranorex.Core.Data.DataCache.Connector">
            <summary>
            Gets the source this cache is associated with.
            </summary>
            <value>The source this cache is associated with.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataCache.Loaded">
            <summary>
            Gets a value indicating whether that data from the source
            is loaded.
            </summary>
            <value><c>true</c> if the data is loaded; otherwise, <c>false</c>. If the cache is cleared <see cref="P:Ranorex.Core.Data.DataCache.Loaded"/> will also be <c>false</c></value>
        </member>
        <member name="P:Ranorex.Core.Data.DataCache.Rows">
            <summary>
            Gets the cached data rows.
            </summary>
            <value>The cached rows.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataCache.Columns">
            <summary>
            Gets the cached data columns.
            </summary>
            <value>The cached columns.</value>
        </member>
        <member name="P:Ranorex.Core.Data.DataCache.HasAnyCachedColumns">
            <summary>
            Gets a value to indicate if any columns are available from loaded cache or from the last known loaded column cache.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.Load">
            <summary>
            Loads the data from the associated <see cref="P:Ranorex.Core.Data.DataCache.Connector"/> (see <see cref="M:Ranorex.Core.Data.DataConnector.LoadData(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)"/>).
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.Store">
            <summary>
            Stores the data to the associated <see cref="P:Ranorex.Core.Data.DataCache.Connector"/> (see <see cref="M:Ranorex.Core.Data.DataConnector.StoreData(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)"/>).
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.CreateCopy">
            <summary>
            Creates a deep copy of this data cache.
            </summary>
            <returns>A new data cache that is a copy of this data cache.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.ClearCache">
            <summary>
            Clears the cached <see cref="P:Ranorex.Core.Data.DataCache.Rows"/> and <see cref="P:Ranorex.Core.Data.DataCache.Columns"/>.
            </summary>
            <remarks><see cref="P:Ranorex.Core.Data.DataCache.Loaded"/>Will return <c>false</c> until the cache is reloaded.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.GetLastKnownColumnsAndRowCount(Ranorex.Core.Data.ColumnCollection@,System.Int32@)">
            <summary>
            Gets the cached ColumnCollection and row count.
            </summary>
            <param name="lastKnownColumns">The cached columns, or the last known from source if not cached. Null in never loaded</param>
            <param name="lastKnownRowCount">The cached row count, or the last known from source if not cached. -1 in never loaded</param>
        </member>
        <member name="M:Ranorex.Core.Data.DataCache.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="T:Ranorex.Core.Data.IDataProvider">
            <summary>
            An abstract data provider for variable binding.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Data.IDataProvider.VariableNames">
            <summary>
            Gets a collection of all available variable names.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.IDataProvider.GetValue(Ranorex.Core.CaseInsensitiveString)">
            <summary>
            Gets the value of the specified variable.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <returns>The value of the variable, or <c>null</c> if the variable does not exist.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.IDataProvider.SetValue(Ranorex.Core.CaseInsensitiveString,System.String)">
            <summary>
            Sets the value of the specified variable.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <param name="value">The value to set the variable to.</param>
            <exception cref="T:System.NotSupportedException">If setting variable values is not supported by the
            data provider.</exception>
            <exception cref="T:Ranorex.Core.Data.DataException">If setting the variable value fails for any other reason,
            e.g. if the variable does not exist.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.ModuleVarItemList.GetSortedCopy">
            <summary>
            Returns a sorted <see cref="T:System.Collections.IList"/> copy of <see cref="T:Ranorex.Core.Data.ModuleVarItem"/> objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ranorex.Core.Data.Row">
            <summary>
            Represents a row in a data table.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.Row.#ctor(System.Object[],Ranorex.Core.Data.RowCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.Row"/> class.
            </summary>
            <param name="values">The <see cref="T:System.Object"/> values of the row to create.
            The values will be converted using <code>Convert.ToString(value, CultureInfo.InvariantCulture)</code>.
            </param>
            <param name="owner">The <see cref="T:Ranorex.Core.Data.RowCollection"/> this row belongs to or <c>null</c>
            if the row is not yet bound to a collection.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.Row.#ctor(System.String[],Ranorex.Core.Data.RowCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.Row"/> class.
            </summary>
            <param name="values">The <see cref="T:System.String"/> values of the row to create.</param>
            <param name="owner">The <see cref="T:Ranorex.Core.Data.RowCollection"/> this row belongs to or <c>null</c>
            if the row is not yet bound to a collection.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.Row.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.Row"/> class.
            </summary>
            <param name="values">The <see cref="T:System.Object"/> values of the row to create.
            The values will be converted using <code>Convert.ToString(value, CultureInfo.InvariantCulture)</code>.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <c>null</c>.</exception>
            <remarks>This constructor overload sets <see cref="P:Ranorex.Core.Data.Row.Owner"/> to <c>null</c>.</remarks>
        </member>
        <member name="M:Ranorex.Core.Data.Row.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.Row"/> class.
            </summary>
            <param name="values">The <see cref="T:System.String"/> values of the row to create.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <c>null</c>.</exception>
            <remarks>This constructor overload sets <see cref="P:Ranorex.Core.Data.Row.Owner"/> to <c>null</c>.</remarks>
        </member>
        <member name="P:Ranorex.Core.Data.Row.Values">
            <summary>
            Gets the values of this row.
            </summary>
            <value>The values contained in this row.</value>
        </member>
        <member name="P:Ranorex.Core.Data.Row.Owner">
            <summary>
            Gets or sets the <see cref="T:Ranorex.Core.Data.RowCollection"/> this row belongs to.
            </summary>
            <value>
            The <see cref="T:Ranorex.Core.Data.RowCollection"/> this row belongs to or <c>null</c> if
            the row does not belong to a collection.
            </value>
        </member>
        <member name="P:Ranorex.Core.Data.Row.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the collection.</exception>
        </member>
        <member name="P:Ranorex.Core.Data.Row.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value with the specified column name.
            </summary>
            <exception cref="T:System.ArgumentException">If the row is not bound to a row collection
            or the <see cref="P:Ranorex.Core.Data.Row.Owner"/> row collection is not bound to a column collection.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the associated data table does not contain a
            column with the specified name.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.Row.ToDictionary">
            <summary>
            Creates a dictionary that maps the column names of the associated data table
            to the values of this row.
            </summary>
            <returns>A dictionary mapping columns names to the values of this row.</returns>
        </member>
        <member name="T:Ranorex.Core.Data.RowCollection">
            <summary>
            Represents a collection of <see cref="T:Ranorex.Core.Data.Row"/> instances.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.#ctor(Ranorex.Core.Data.ColumnCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.RowCollection"/> class.
            </summary>
            <param name="columns">The column collection this collection is bound to.</param>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.#ctor(Ranorex.Core.Data.ColumnCollection,System.Collections.Generic.IList{Ranorex.Core.Data.Row})">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.RowCollection"/> class.
            </summary>
            <param name="columns">The column collection this collection is bound to.</param>
            <param name="rows">A list of rows that is used as internal backing store for this collection.
            This constructor DOES NOT call <see cref="M:Ranorex.Core.Data.RowCollection.OnInsert(Ranorex.Core.Data.Row)"/> on the specified <paramref name="rows"/>.
            Consequently, make sure that <paramref name="rows"/> does not contain <c>null</c> references
            and that <see cref="M:Ranorex.Core.Data.RowCollection.OnInsert(Ranorex.Core.Data.Row)"/> is called on the individual rows
            before they are first returned by any method/property of the <paramref name="rows"/> list.</param>
            <remarks>This constructor DOES NOT call <see cref="M:Ranorex.Core.Data.RowCollection.OnInsert(Ranorex.Core.Data.Row)"/> on the specified <paramref name="rows"/>.
            Consequently, make sure that <paramref name="rows"/> does not contain <c>null</c> references
            and that <see cref="M:Ranorex.Core.Data.RowCollection.OnInsert(Ranorex.Core.Data.Row)"/> is called on the individual rows
            before they are first returned by any method/property of the <paramref name="rows"/> list.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rows"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Ranorex.Core.Data.RowCollection.Columns">
            <summary>
            Gets the column collection this collection is bound to.
            </summary>
            <value>The <see cref="T:Ranorex.Core.Data.ColumnCollection"/> this collection is bound to or <c>null</c>
            if this collection is not bound to columns, yet.</value>
        </member>
        <member name="P:Ranorex.Core.Data.RowCollection.Count">
            <summary>
            Gets the number of rows contained in the collection.
            </summary>
            <returns>
            The number of rows contained in the collection.
            </returns>
        </member>
        <member name="P:Ranorex.Core.Data.RowCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns><c>true</c> if the collection is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Ranorex.Core.Data.RowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Ranorex.Core.Data.Row"/> at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.CreateCopy(Ranorex.Core.Data.ColumnCollection)">
            <summary>
            Creates a deep copy of this collection.
            </summary>
            <param name="columns">The column collection the copied collection is bound to.</param>
            <returns>A new row collection bound to <paramref name="columns"/> and containing rows
            with the same values as the rows in this collection.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.Add(Ranorex.Core.Data.Row)">
            <summary>
            Adds the specified row.
            </summary>
            <param name="row">The row to add.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.Add(System.Object[])">
            <summary>
            Adds a new row containing the specified values.
            </summary>
            <param name="values">The values for the new row to add.</param>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.Add(System.String[])">
            <summary>
            Adds a new row containing the specified values.
            </summary>
            <param name="values">The values for the new row to add.</param>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.Contains(Ranorex.Core.Data.Row)">
            <summary>
            Determines whether the collection contains the specified row.
            </summary>
            <param name="item">The row to locate in the collection.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.IndexOf(Ranorex.Core.Data.Row)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The row to locate in the collection.</param>
            <returns>
            The index of <paramref name="item"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.Insert(System.Int32,Ranorex.Core.Data.Row)">
            <summary>
            Inserts the row at the specified index.
            </summary>
            <param name="index">The index to insert the row at.</param>
            <param name="row">The row to insert.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the collection.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.Remove(Ranorex.Core.Data.Row)">
            <summary>
            Removes the specified row.
            </summary>
            <param name="row">The row to remove.</param>
            <returns><c>true</c> if the row was successfully removed from the collection;
            otherwise, <c>false</c>. This method also returns <c>false</c> if the row is not
            found in the original collection.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is not a valid index in the collection.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.Clear">
            <summary>
            Removes all rows from the collection.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.CopyTo(Ranorex.Core.Data.Row[],System.Int32)">
            <summary>
            Copies the rows of the collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from the collection. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source collection is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An enumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Data.RowCollection.OnInsert(Ranorex.Core.Data.Row)">
            <summary>
            Called when inserting a new row into this collection.
            </summary>
            <param name="row">The row to insert.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Ranorex.Core.Data.SimpleDataConnector">
            <summary>
            A simple data source that holds its data in memory. The data is loaded from and stored
            in the data source XML definition which allows to embed it into a test suite definition file.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.#ctor(System.String)">
            <summary>
            Initializes a new empty instance of the <see cref="T:Ranorex.Core.Data.SimpleDataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.#ctor(System.String,Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)">
            <summary>
            Initializes a new empty instance of the <see cref="T:Ranorex.Core.Data.SimpleDataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="columCollection">The Collection of the columns of this source.</param>
            <param name="rowCollection">The RowCollection containing the data of this source.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.#ctor(System.String,System.String[],System.String[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.SimpleDataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="columnNames">The name of the columns of this source.</param>
            <param name="rows">The rows containing the data of this source.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.#ctor(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.SimpleDataConnector"/> class.
            </summary>
            <param name="node">An XML node containing the definition and data of the source.</param>
        </member>
        <member name="P:Ranorex.Core.Data.SimpleDataConnector.XmlIdentifier">
            <summary>
            Gets the unique identifier for serialization and deserialization purposes as well as factory creation.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)">
            <summary>
            Gets the data from the source.
            </summary>
            <param name="columns">The loaded columns.</param>
            <param name="rows">The loaded rows.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.LoadColumnsImpl(Ranorex.Core.Data.ColumnCollection@)">
            <summary>
            Loads the data columns from the source.
            </summary>
            <param name="columns">The loaded columns.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.StoreDataImpl(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)">
            <summary>
            Stores the data to the data source.
            </summary>
            <param name="columns">The columns to store.</param>
            <param name="rows">The rows to store.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SimpleDataConnector.GetXMLNodeDerived(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Add DataSource specific information from derived classes to the node
            </summary>
            <param name="node">The node to which information should be added.</param>
        </member>
        <member name="T:Ranorex.Core.Data.SqlDataConnector">
            <summary>
            Provides access to data stored in SQL (Structured Query Language) databases.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Data.SqlDataConnector.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.SqlDataConnector"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="connectionString">The connection string to the database.</param>
            <param name="query">The SQL query.</param>
            <param name="dialogDataSource">The used database type.</param>
            <param name="provider">The name of the underlying data provider provider used
            for the SQL connection.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SqlDataConnector.#ctor(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Data.SqlDataConnector"/> class.
            </summary>
            <param name="node">An XML node containing the definition of the source.</param>
        </member>
        <member name="P:Ranorex.Core.Data.SqlDataConnector.XmlIdentifier">
            <summary>
            Gets the unique identifier for serialization and deserialization purposes as well as factory creation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Data.SqlDataConnector.ConnectionString">
            <summary>
            Gets or sets the connection string to the database.
            </summary>
            <value>The database connection string.</value>
        </member>
        <member name="P:Ranorex.Core.Data.SqlDataConnector.DialogDataSource">
            <summary>
            Gets or sets the type of database used.
            </summary>
            <value>The type of database used.</value>
        </member>
        <member name="P:Ranorex.Core.Data.SqlDataConnector.Provider">
            <summary>
            Gets or sets the name of the underlying data provider provider used
            for the SQL connection.
            </summary>
            <value>The name of the underlying data provider provider used
            for the SQL connection.</value>
        </member>
        <member name="P:Ranorex.Core.Data.SqlDataConnector.Query">
            <summary>
            Gets or sets the SQL query selecting the data from the database.
            </summary>
            <value>The SQL query.</value>
        </member>
        <member name="M:Ranorex.Core.Data.SqlDataConnector.GetFactory(System.String)">
            <summary>
            Gets a factory object for the named data provider.
            </summary>
            <param name="name">The name of the data provider.</param>
            <returns>A factory that can be used to create data providers of the specified name.</returns>
        </member>
        <member name="M:Ranorex.Core.Data.SqlDataConnector.GetXMLNodeDerived(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Add DataSource specific information from derived classes to the node
            </summary>
            <param name="node">The node to which information should be added.</param>
        </member>
        <member name="M:Ranorex.Core.Data.SqlDataConnector.LoadDataImpl(Ranorex.Core.Data.ColumnCollection@,Ranorex.Core.Data.RowCollection@)">
            <summary>
            Loads the data from the source using the provided <see cref="P:Ranorex.Core.Data.SqlDataConnector.ConnectionString"/>
            and SQL <see cref="P:Ranorex.Core.Data.SqlDataConnector.Query"/>.
            </summary>
            <param name="columns">The loaded columns.</param>
            <param name="rows">The loaded rows.</param>
            <exception cref="T:Ranorex.Core.Data.DataException">If loading the data fails, e.g. if the connection
            to the database cannot be established.</exception>
        </member>
        <member name="M:Ranorex.Core.Data.SqlDataConnector.StoreDataImpl(Ranorex.Core.Data.ColumnCollection,Ranorex.Core.Data.RowCollection)">
            <summary>
            Stores the data to the data source. Currently not supported.
            </summary>
            <param name="columns">The columns to store.</param>
            <param name="rows">The rows to store.</param>
            <remarks>This functionality is currently not supported by this data source.</remarks>
            <exception cref="T:System.NotSupportedException">Storing data to SQL databases is currently not supported.</exception>
        </member>
        <member name="T:Ranorex.Core.Events.ProjectCreatedEvent">
            <summary>
            Event which is fired
            </summary>
        </member>
        <member name="T:Ranorex.Core.GlueRuleExecutionState">
            <summary>
            Represents the current state of glue rule execution.
            </summary>
        </member>
        <member name="P:Ranorex.Core.GlueRuleExecutionState.Action">
            <summary>
            Gets the action which is performed by the element engine while executing the current rule.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Ranorex.Core.GlueRuleExecutionState.Bucket">
            <summary>
            The Bucket contains a readonly list of already constructed elements.
            </summary>
        </member>
        <member name="P:Ranorex.Core.GlueRuleExecutionState.SourceElement">
            <summary>
            Gets the source element which is used by all applicable glue rules accessing this state.
            </summary>
            <value>The source element.</value>
        </member>
        <member name="P:Ranorex.Core.GlueRuleExecutionState.SourceFlavorElement">
            <summary>
            The flavor element the rule is applied to.
            </summary>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionState.AddElement(Ranorex.Core.FlavorElement)">
            <summary>
            Adds a flavor element to the bucket and automatically transforms it into an element.
            </summary>
            <param name="flavorElement">The flavor element to add.</param>
            <remarks>If <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>, pass
            <c>null</c> to remove the <see cref="P:Ranorex.Core.GlueRuleExecutionState.SourceElement"/> from the element tree.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="flavorElement"/> is <c>null</c>
            and <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is not <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionState.AddElement(Ranorex.Core.FlavorElement,Ranorex.Core.Element@)">
            <summary>
            Adds a flavor element to the bucket and automatically transforms it into an element.
            </summary>
            <param name="flavorElement">The flavor element to add.</param>
            <param name="element">When the method returns, contains the newly added <see cref="T:Ranorex.Core.Element"/>
            or <c>null</c> if <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>.</param>
            <remarks>If <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>, pass
            <c>null</c> to remove the <see cref="P:Ranorex.Core.GlueRuleExecutionState.SourceElement"/> from the element tree.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="flavorElement"/> is <c>null</c>
            and <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is not <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionState.InsertElement(System.Int32,Ranorex.Core.FlavorElement)">
            <summary>
            Inserts a flavor element at the specified position into the bucket
            and automatically transforms it into an element.
            </summary>
            <param name="index">The index to insert the flavor element at.</param>
            <param name="flavorElement">The flavor element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than 0
            or greater than the current size of the <see cref="P:Ranorex.Core.GlueRuleExecutionState.Bucket"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="flavorElement"/> is <c>null</c>
            and <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is not <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionState.InsertElement(System.Int32,Ranorex.Core.FlavorElement,Ranorex.Core.Element@)">
            <summary>
            Inserts a flavor element at the specified position into the bucket
            and automatically transforms it into an element.
            </summary>
            <param name="index">The index to insert the flavor element at.</param>
            <param name="flavorElement">The flavor element to insert.</param>
            <param name="element">When the method returns, contains the newly inserted <see cref="T:Ranorex.Core.Element"/>
            or <c>null</c> if <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than 0
            or greater than the current size of the <see cref="P:Ranorex.Core.GlueRuleExecutionState.Bucket"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="flavorElement"/> is <c>null</c>
            and <see cref="P:Ranorex.Core.GlueRuleExecutionState.Action"/> is not <see cref="F:Ranorex.Core.LineageGlueRule.Action.Replace"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionState.SkipAll">
            <summary>
            Instructs the engine to skip all rules after the current one.
            </summary>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionState.SkipOutputFlavor(System.String)">
            <summary>
            Instructs the engine to skip all rules with a specific output flavor, if they have not already been executed.
            </summary>
            <param name="flavorName">The name of the output flavor whose rules are skipped.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="flavorName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionState.SkipRule(System.String)">
            <summary>
            Instructs the engine to skip a rule with a given name, if it has not already been executed.
            </summary>
            <param name="ruleName">The name of the rule to skip.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="ruleName"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Ranorex.Core.IHost">
            <summary>
            Represents a machine/device that provides UI elements that can be automated by Ranorex.
            </summary>
        </member>
        <member name="M:Ranorex.Core.IHost.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <param name="instrument">Specifies whether the browser should be instrumented before browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Core.IHost.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Core.IHost.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="clearCodeCache">Specifies whether code cache should be cleared on browser start.</param>
            <param name="clearServiceWorker">Specifies whether Service Worker folder should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <param name="instrument">Specifies whether the browser should be instrumented before browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Core.IHost.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="clearCodeCache">Specifies whether code cache should be cleared on browser start.</param>
            <param name="clearServiceWorker">Specifies whether Service Worker folder should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Core.IHost.OpenBrowser(System.String,System.String)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Core.IHost.CloseApplication(Ranorex.Core.Element,Ranorex.Duration)">
            <summary>
            Closes an application or web page which contains the specified element.
            If the application does not react to the close request within the specified grace period,
            the application process is killed.
            </summary>
            <param name="containedElement">The element whose parent application to close.</param>
            <param name="gracePeriod">A grace period before the process is killed (does not apply to mobile apps).</param>
            <returns>Returns <c>true</c> if the application has closed within the grace period, otherwise <c>false</c>.</returns>
            <remarks>Setting the grace period to zero causes the application's process not to be killed.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="gracePeriod"/> is negative.</exception>
        </member>
        <member name="M:Ranorex.Core.IHost.CloseApplication(System.Int32)">
            <summary>
            Closes an application with the specified process ID by trying to close its main window.
            </summary>
            <param name="processId">The process ID of the application to close.</param>
            <exception cref="T:Ranorex.ElementNotFoundException">If no application is found.</exception>
        </member>
        <member name="M:Ranorex.Core.IHost.CloseApplication(System.Int32,Ranorex.Duration)">
            <summary>
            Closes an application with the specified process ID by trying to close its main window.
            </summary>
            <param name="processId">The process ID of the application to close.</param>
            <param name="gracePeriod">A grace period before the process is killed (does not apply to mobile apps).</param>
            <returns>Returns <c>true</c> if the application has closed within the grace period, otherwise <c>false</c>.</returns>
            <remarks>Setting the grace period to zero causes the application's process not to be killed.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="gracePeriod"/> is negative.</exception>
        </member>
        <member name="M:Ranorex.Core.IHost.KillApplication(Ranorex.Core.Element)">
            <summary>
            Kills the process which contains the specified element.
            </summary>
            <param name="containedElement">The element whose parent application to kill.</param>
        </member>
        <member name="T:Ranorex.Core.IAdapter">
            <summary>
            The interface for all role and capability adapters.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IAdapter.Children">
            <summary>
            Gets the immediate children of this adapter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IAdapter.Parent">
            <summary>
            Gets the parent of this adapter.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IAdapter.Element">
            <summary>
            The element associated with this adapter.
            </summary>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If setting the value of this property
            and the element does not support the capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Core.IAdapter.ScreenRectangle">
            <summary>
            The bounding rectangle of the element in screen coordinates.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IAdapter.Visible">
            <summary>
            True if the element is visible.
            </summary>
        </member>
        <member name="M:Ranorex.Core.IAdapter.As``1">
            <summary>
            Returns an adapter of the specified type for the underlying element of the current adapter.
            </summary>
            <typeparam name="T">The adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The specified adapter or <c>null</c> if the underlying element does not
            provide the capabilites required for the adapter.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.Filter``1(System.Collections.Generic.IList{Ranorex.Core.Element})">
            <summary>
            Filters the given element list by the specified adapter type. The returned adapter list
            correspond to the elements that could be converted to the specified adapter type.
            </summary>
            <typeparam name="T">The type of adapter to filter by. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="elements">A list of elements.</param>
            <returns>A list of adapter instances corresponding to the elements that
            could be converted to the specified adapter.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.Find(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning all elements which match the path.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.Find(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning instances of a specific adapter type (e.g. Role or Capability).
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for at least one element matching the path.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.Find``1(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning instances of a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.Find``1(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning instances of a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for at least one element matching the path.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindChild``1">
            <summary>
            Finds an immediate child element of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The matching element adapter.</returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindChild``1(System.String)">
            <summary>
            Finds an immediate child element of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>The matching element adapter.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindChildren``1">
            <summary>
            Finds immediate child elements of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>A list of matching element adapters.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindChildren``1(System.String)">
            <summary>
            Finds immediate child elements of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>A list of matching element adapters.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindDescendant``1">
            <summary>
            Finds a descendant of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The matching element adapter.</returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindDescendant``1(System.String)">
            <summary>
            Finds a descendant of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>The matching element adapter.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindDescendants``1">
            <summary>
            Finds all descendants of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>A list of matching element adapters.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindDescendants``1(System.String)">
            <summary>
            Finds all descendants of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>A list of matching element adapters.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindSingle(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Core.IAdapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>
            The first element found.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindSingle(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Core.IAdapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <returns>
            The first element found.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found within the timeout.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindSingle``1(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>
            The first element found converted to the specified adapter type.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.FindSingle``1(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <returns>
            The first element found converted to the specified adapter type.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found within the timeout.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Core.IAdapter.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Core.IAdapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element is found.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/>,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Duration,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Core.IAdapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element
            is found within the timeout.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/>
            within the specified timeout, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.TryFindSingle``1(Ranorex.Core.RxPath,``0@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="foundAdapter">The first element found converted to the specified adapter type
            or <c>null</c> if no element is found or the element does not support the
            capabilities to create the specified adapter type.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/> and
            the specified adapter type could be created, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.IAdapter.TryFindSingle``1(Ranorex.Core.RxPath,Ranorex.Duration,``0@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <param name="foundAdapter">The first element found converted to the specified adapter type
            or <c>null</c> if no element is found within the timeout or the element does not support the
            capabilities to create the specified adapter type.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/> within the
            specified <paramref name="timeout"/> and the specified adapter type could be created,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.RemoteHost.CloseMobileApp(Ranorex.Core.Element)">
            <summary>
            Legacy mobile support helper (should be refactored in the future)
            </summary>
            <param name="mobileAppElement"></param>
            <returns></returns>
        </member>
        <member name="T:Ranorex.Core.Instrumentation.Workers.FirefoxExtensionJs">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Instrumentation.Workers.FirefoxExtensionJs.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Instrumentation.Workers.FirefoxExtensionJs.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Instrumentation.Workers.FirefoxExtensionJs.RanorexExtensionRegistration">
            <summary>
              Looks up a localized string similar to {
            &quot;schemaVersion&quot;: 26,
            &quot;addons&quot;: [{	
            	&quot;id&quot;: &quot;extension@ranorex.com&quot;,
            	&quot;syncGUID&quot;: &quot;{68202faf-c25e-4d40-b5f9-8fd89ef86c46}&quot;,
            	&quot;location&quot;: &quot;app-global&quot;,
            	&quot;version&quot;: &quot;1.1.5&quot;,
            	&quot;type&quot;: &quot;webextension&quot;,
            	&quot;updateURL&quot;: null,
            	&quot;optionsURL&quot;: null,
            	&quot;optionsType&quot;: null,
            	&quot;optionsBrowserStyle&quot;: true,
            	&quot;aboutURL&quot;: null,
            	&quot;defaultLocale&quot;: {
            		&quot;name&quot;: &quot;Ranorex Automation&quot;,
            		&quot;description&quot;: &quot;Ranorex automation support.&quot;,
            		&quot;creator&quot;: null,
            		&quot;developers&quot;: null,
            		&quot;translators&quot;: null,
            	 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Integration.IntegrationDataExtensions.GetSuperId(Ranorex.Core.Testing.TestSuiteEntry)">
             <summary>
             Tries to create a SuperId for a test suite item.
             </summary>
             <remarks>
             When a node is moved / created the icon gets resolved while the parent is not set yet.
             Because of that we have to create a weak Id in that case. Oterwise moved items will not get
             the icon. This is not 100% correct as theoretically it could happen that a non-integrated item can
             get a icon (when the integrated and not integrated test case have same local ID). But this case should
             never happen in reality while the inverted case happens all the time. So creating the weak ID is the
             practically correct approach.
            
             Changing the icon resolve time (correct solution) is too risky.
             </remarks>
             <param name="e">The test suite entry.</param>
             <returns>A super ID.</returns>
        </member>
        <member name="M:Ranorex.Core.Integration.IntegrationDataExtensions.GetTestSuiteId(Ranorex.Core.Testing.TestSuite)">
            <summary>
            Creates a 'weak' SuperID for a test suite.
            </summary>
            <remarks>
            We do not have the project structure available here only a weak super ID without parent ID can be created.
            As test suites should never have matching ID's and the objects created here are used for display purposes only
            this should be OK (The objects that are stored in TRDS files get created where the project structure is available).
            Note: SuperId matches local ID only if ParentID is missing, because of this the comparison logic works.
            0/A == B/A => true.
            </remarks>
            <param name="suite">The test suite</param>
        </member>
        <member name="T:Ranorex.Core.Recorder.Touch.GestureDirection">
             <summary>
             DataStucture to define a direction for gesture record items. The direction is defined clockwise starting with 0°
             which corresponds to the direction right.
             </summary>
            
        </member>
        <member name="F:Ranorex.Core.Recorder.Touch.GestureDirection.Up">
            <summary>
            Static readonly direction defining the'Up' direction (270°).
            </summary>
        </member>
        <member name="F:Ranorex.Core.Recorder.Touch.GestureDirection.Right">
            <summary>
            Static readonly direction defining the 'Right' direction (0°).
            </summary>
        </member>
        <member name="F:Ranorex.Core.Recorder.Touch.GestureDirection.Down">
            <summary>
            Static readonly direction defining the 'Down' direction (90°).
            </summary>
        </member>
        <member name="F:Ranorex.Core.Recorder.Touch.GestureDirection.Left">
            <summary>
            Static readonly direction defining the 'Left' direction (180°).
            </summary>
        </member>
        <member name="F:Ranorex.Core.Recorder.Touch.GestureDirection.Angle">
            <summary>
            The angle of the direction in degrees. 0° is equal to the direction 'Right'. Direction is clockwise.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Recorder.Touch.GestureDirection.#ctor(System.Double)">
            <summary>
            Initializes a new direction with the given angle. The angle can have values bigger than 360.0 and smaller than 0.0.
            </summary>
            <param name="angle">The angle of the direction in degrees.</param>
        </member>
        <member name="M:Ranorex.Core.Recorder.Touch.GestureDirection.ToString">
            <summary>
            Returns the string representation of the direction. For the four main directions the string representation will be:
            'Right (0°)', 'Down (90°), 'Left (180°)' and 'Up (270°)'. For every other angle the representation will be 'Angle°'
            with at most one decimal place if a decimal place is required.
            </summary>
            <returns>The string representation of the direction.</returns>
        </member>
        <member name="M:Ranorex.Core.Recorder.Touch.GestureDirection.Parse(System.String)">
            <summary>
            Creates a angle data structure from a given string. Parsing is performed case insensitive.
            </summary>
            <param name="value">
            The string representing the direction. Valid representations e.g. are '90', '90.0', '90.0°', 'Right 0', 'Right (0)', 'Right(0)'
            and 'Right (0°)'. The number in the string weights more than the direction specification. That means if the
            value 'Right (90.0)' is passed to the method,
            the direction will not be parsed as 'Right (90°)' instead it will be parsed as 'Down (90°)'.
            </param>
            <returns>GestureDirection instance with the parsed value.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
            <exception cref="T:System.ArgumentException">If value was empty or contained whitespace only.</exception>
            <exception cref="T:System.FormatException">If the value could not be parsed.</exception>
        </member>
        <member name="M:Ranorex.Core.Recorder.Touch.GestureDirection.op_Implicit(Ranorex.Core.Recorder.Touch.GestureDirection)~System.Double">
            <summary>
            Implicit conversion operator from direction to double.
            </summary>
            <param name="dir">The direction data structure that will get converted.</param>
            <returns>A double corresponding to the 'Angle' field of the direction data structure.</returns>
        </member>
        <member name="M:Ranorex.Core.Recorder.Touch.GestureDirection.op_Implicit(System.Double)~Ranorex.Core.Recorder.Touch.GestureDirection">
            <summary>
            Implicit conversion operator from double to direction.
            </summary>
            <param name="angle">The angle in degrees. Can be any arbitrary double value [double.Min, double.Max]</param>
            <returns>A gesture direction with the 'Angle' field set to the passed angle value.</returns>
        </member>
        <member name="M:Ranorex.Core.Recorder.Touch.GestureDirection.FromDegrees(System.Double)">
            <summary>
            Converts operator from double to direction.
            </summary>
            <param name="angle">The angle in degrees. Can be any arbitrary double value [double.Min, double.Max]</param>
            <returns>A gesture direction with the 'Angle' field set to the passed angle value.</returns>
        </member>
        <member name="M:Ranorex.Core.Recorder.Argument.#ctor(Ranorex.Core.Recorder.Arguments,System.String,System.Type)">
            <summary>
            Creates a new owned arg with the given name and type. The default value is inferred from the type.
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <param name="valueType"></param>
        </member>
        <member name="M:Ranorex.Core.Recorder.Argument.#ctor(Ranorex.Core.Recorder.Arguments,Ranorex.Core.Recorder.Argument,System.String,System.Type)">
            <summary>
            Copies the argument giving it a new name and value type.
            </summary>
            <param name="owner"></param>
            <param name="arg"></param>
            <param name="name"></param>
            <param name="valueType"></param>
        </member>
        <member name="M:Ranorex.Core.Recorder.Argument.#ctor(Ranorex.Core.Recorder.Arguments,Ranorex.Core.Recorder.Argument)">
            <summary>
            Copies to new owner.
            </summary>
            <param name="owner"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Ranorex.Core.Recorder.Argument.#ctor(Ranorex.Core.Recorder.Arguments,Ranorex.Core.ActionDescriptor.Argument)">
            <summary>
            Creates a new owned arg using the info from an ActionDescriptor.Argument descriptor.
            </summary>
            <param name="owner"></param>
            <param name="descriptor"></param>
        </member>
        <member name="T:Ranorex.Core.Recorder.ReplayIpcServiceHost">
            <summary>
            Helper class that ensures only one IPC service gets hosted, at least as long as this helper here is used
            </summary>
            <remarks>
            This class is thread safe
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Recorder.RecordTable.Id">
            <summary>
            Id of the record table. Setter of this property should not be used
            when perfomance is critical since it can generate new id for all the elements within the table.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Recorder.RecordTable.IsValid">
            <summary>
            Returns true if the returned IValidationResult from Validate() has no errors.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Recorder.RecordTable.ValidationResult">
            <summary>
            Returns the IValidationResult result of the last call to Validate().
            If no cached result exist a call to Validate will be made before returning.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Recorder.RecordTable.ToXmlString">
            <summary>
            Serializes the complete record table as an XML document.
            </summary>
            <returns>The record table as XML string.</returns>
        </member>
        <member name="T:Ranorex.Core.IElement">
            <summary>
            Represents an UI item in the global UI tree. Instances of this class dynamically implement a Role and optional Capabilities,
            as well as numerous standard properties.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Item(System.String)">
            <summary>
            Indexer for attribute access.
            </summary>
            <param name="name">Name of the attribute to return.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="P:Ranorex.Core.IElement.Actions">
            <summary>
            A list of actions the element supports. This list is aggregated from the role and the capabilities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Attributes">
            <summary>
            A list of attributes the element supports. This list is aggregated from the role and the capabilities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Capabilities">
            <summary>
            The list of the capabilities the element has.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.ChildIndex">
            <summary>
            The index of this element in the parent's child list. Is '-1' if the index is unknown.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Children">
            <summary>
            The list of children the element has.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.ClientRectangle">
            <summary>
            The bounding rectangle of the element, relative to the parent.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.DynamicCapability">
            <summary>
            Gets a capability providing dynamic attributes and actions that the element supports.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Enabled">
            <summary>
            True if the element is enabled.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.FlavorElement">
            <summary>
            The flavor element associated with the element. This can be <c>null</c>, for example when using static snapshots.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.FlavorName">
            <summary>
            The name of the flavor this element belongs to.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.HasFocus">
            <summary>
            True if the element has the focus.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.IsRemote">
            <summary>
            Gets a value indicating whether the element resides on a remote device.
            </summary>
            <value>
                <c>true</c> if this instance resides on a remote device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.IElement.IsSnapshot">
            <summary>
            Gets a value indicating whether this instance is a snapshot.
            </summary>
            <value>
                <c>true</c> if this instance is a snapshot; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.IElement.Limitations">
            <summary>
            Gets a list of technology specify limitations that are associated with this element.
            </summary>
            <remarks>The list implementation checks for duplicates and <c>null</c> entries and does not
            add/insert such entries.</remarks>
        </member>
        <member name="P:Ranorex.Core.IElement.Location">
            <summary>
            The location of the element, relative to its parent.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Parent">
            <summary>
            The parent of the element.
            </summary>
            <remarks>
            Is null if the element is a root element.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.IElement.PreferredCapability">
            <summary>
            The preferred capability of the element.
            </summary>
            <remarks>
            Usually, this is the role, but it can be any of the capabilities. This property is used when building RxPaths.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.IElement.Role">
            <summary>
            The role of the element (= main capability).
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.ScreenLocation">
            <summary>
            The location of the element in screen coordinates.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.ScreenRectangle">
            <summary>
            The bounding rectangle of the element in screen coordinates.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Size">
            <summary>
            The (x,y) size of element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.TopLevelAncestor">
            <summary>
            The top-level ancestor of the element.
            </summary>
            <remarks>
            Is null if the element is a root element.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.IElement.Valid">
            <summary>
            Returns true if the element is believed to be valid.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IElement.Visible">
            <summary>
            True if the element is visible.
            </summary>
            <remarks>
            Note that even if the element is visible, it might be covered by another visible element.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.IElement.As``1">
            <summary>
            Returns an adapter of the specified type for the element.
            </summary>
            <typeparam name="T">The adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The specified adapter for the element or <c>null</c> if the
            element does not provide the capabilities required for the adapter.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.CaptureCompressedImage">
            <summary>
            Captures a PNG image of the element.
            </summary>
            <returns>A compressed image of the element.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.EnsureVisible">
            <summary>
            Tries to make the element visible to the user.
            This is usually accomplished by bringing the element or one of its ancestors to foreground.
            </summary>
            <returns>True if the operation has succeeded.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.Find(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The list of elements found for that path.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.Find(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for at least one element matching the path.</param>
            <returns>The list of elements found for that path.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.FindFromPoint(System.Drawing.Point)">
            <summary>
            Find an element by screen location. The found element is a descendant of this
            instance or this instance itself.
            </summary>
            <param name="screenLocation">The location where the element is located.</param>
            <returns>The element at the specified location or null if nothing was found.</returns>
            <remarks>This method requires a Ranorex Professional/Premium license.</remarks>
        </member>
        <member name="M:Ranorex.Core.IElement.FindFromPoint(System.Drawing.Point,Ranorex.Core.RxPath@)">
            <summary>
            Find an element by screen location and build its RxPath. The found element is a descendant of this
            instance or this instance itself.
            </summary>
            <param name="screenLocation">The location where the element is located.</param>
            <param name="resultPath">The result RxPath.</param>
            <returns>The element at the specified location or null if nothing was found.</returns>
            <remarks>This method requires a Ranorex Professional/Premium license.</remarks>
        </member>
        <member name="M:Ranorex.Core.IElement.FindFromUid(System.String,Ranorex.Core.Element@)">
            <summary>
            Finds a descendant element by its unique identifier attribute (defined by the owner flavor UidAttribute name).
            </summary>
            <param name="uidValue">The unique id value.</param>
            <param name="result">The result element, if anything was found.</param>
            <returns>Returns <c>true</c> if an element was found for the given unique id value.</returns>
            <remarks>For this to work, the underlying flavor element has to implement GetChildLineageFromUid()
            and has to set IsUidDomainRoot properly.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.IElement.FindSingle(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The first element found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.FindSingle(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <returns>The first element found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found within the timeout.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.Focus">
            <summary>
            Tries to set the focus on the element.
            </summary>
        </member>
        <member name="M:Ranorex.Core.IElement.GetAttributeValue(System.String)">
            <summary>
            Returns the value of an attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.GetAttributeValueText(System.String)">
            <summary>
            Returns the value of an attribute converted to its string representation.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute converted to its string representation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <remarks>This method internally calls <see cref="M:Ranorex.Core.IElement.GetAttributeValue(System.String)"/> and converts
            the returned value to its string representation using the <see cref="T:Ranorex.Core.ValueConverter"/>.</remarks>
        </member>
        <member name="M:Ranorex.Core.IElement.GetAttributeValueText(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the value of an attribute converted to its string representation. If a <paramref name="regex"/>
            is provided, only the part of the string representation matching the regular
            expression is returned.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="regex">A regular expression that defines which part of the attribute value
            string representation should be returned. If more than a single group (= whole match) is
            captured by the regex, the second group (mark using "(?&lt;1&gt;expression)") is returned.</param>
            <returns>The value of the attribute converted to its string representation and optionally
            matched by the provided <paramref name="regex"/> regular expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <remarks>This method internally calls <see cref="M:Ranorex.Core.IElement.GetAttributeValue(System.String)"/> and converts
            the returned value to its string representation using the <see cref="T:Ranorex.Core.ValueConverter"/>.</remarks>
        </member>
        <member name="M:Ranorex.Core.IElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For Ranorex internal use only.
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Ranorex.Core.IElement.GetPath(Ranorex.Core.PathBuildMode)">
            <summary>
            Builds an absolute RxPath to the element.
            </summary>
            <param name="buildMode">Specifies how the path should be built. (optimization vs. runtime tradeoff)</param>
            <returns>The path of the element.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.GetRobustPath">
            <summary>
            Builds an absolute robust RxPath to the element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ranorex.Core.IElement.GetPath(Ranorex.Core.PathBuildMode,Ranorex.Core.Element)">
            <summary>
            Builds an RxPath to the element, relative to another element.
            </summary>
            <param name="buildMode">Specifies how the path should be built. (optimization vs. runtime tradeoff)</param>
            <param name="relativeToElement">The element to which the path is relative to.</param>
            <returns>The path of the element.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.HasCapability(System.String)">
            <summary>
            Tests if the element possesses a certain capability (or role), by name.
            </summary>
            <param name="capName">The name of the capability to look for.</param>
            <returns>True if the element has the capability or role.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.InvokeAction(System.String,System.Object[])">
            <summary>
            Invokes an action on the element.
            </summary>
            <param name="name">The name of the action to invoke.</param>
            <param name="args">The list of parameters for the action.</param>
            <returns>The invocation result.</returns>
            <remarks>The types of the parameters and return value are as defined by the <see cref="T:Ranorex.Core.ActionDescriptor"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.InvokeActionWithText(System.String,System.String[])">
            <summary>
            Invokes an action on the element.
            </summary>
            <param name="name">The name of the action to invoke.</param>
            <param name="args">The list of parameters for the action, as strings.</param>
            <returns>The invocation result.</returns>
            <remarks>The string values of the parameters are converted to the types defined by the <see cref="T:Ranorex.Core.ActionDescriptor"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed, or argument type conversion failed.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.IsAncestor(Ranorex.Core.Element)">
            <summary>
            Determines whether the current element is an ancestor of the specified child element.
            </summary>
            <param name="child">The child element to test.</param>
            <returns>
                <c>true</c> if the this element is an ancestor; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.IElement.IsEqual(Ranorex.Core.Element)">
            <summary>
            Compares two elements by comparing their flavor elements or their screen rectangles if no flavor comparison is possible.
            </summary>
            <param name="elem">The element to compare to.</param>
            <returns>True if the elements are equal.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of an attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set as string.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed or the string value could not be converted to the attribute's type.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.SetAttributeValue(System.String,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="M:Ranorex.Core.IElement.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element is found.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/>,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.IElement.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Duration,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element is found within
            the timeout.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/> within the
            specified <paramref name="timeout"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Ranorex.Core.IRemoteEndpoint">
            <summary>
            An generic endpoint.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IRemoteEndpoint.DisplayName">
            <summary>
            The display name of this endpoint
            </summary>
        </member>
        <member name="P:Ranorex.Core.IRemoteEndpoint.DisplayText">
            <summary>
            Readable summary of the endpoint.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IRemoteEndpoint.Disconnected">
            <summary>
            Determines whether endpoint is disconnected or.
            </summary>
        </member>
        <member name="M:Ranorex.Core.IRemoteEndpoint.ConnectAsync">
            <summary>
            Connects the endpoint.
            </summary>
            <returns>Task for the connection in progress.</returns>
        </member>
        <member name="M:Ranorex.Core.IRemoteEndpoint.MakeCurrentHostAsync">
            <summary>
            Sets endpoint as current automation host.
            </summary>
            <returns>Task for the operation in progress.</returns>
        </member>
        <member name="M:Ranorex.Core.IRemoteEndpoint.ActivateConfig(System.String)">
            <summary>
            Activates a given config string for the current host.
            </summary>
            <param name="config">Encoded configuration string.</param>
        </member>
        <member name="T:Ranorex.Core.RemoteEndpointFactory">
             <summary>
             Factory to create and access endpoints.
             <example>
             Example to create and use WebDriver endpoints in code.
             <code>
             // Create endpoint management factory
             var fac = new RemoteEndpointFactory();
            
             // Use existing endpoints
             var existing = fac.GetAll();
             Report.Log(ReportLevel.Info, string.Format("Endpoints: {0}", existing.Count()));
            
             foreach (var e in existing)
             {
                 Report.Log(ReportLevel.Info, string.Format("Name: {0}", e.DisplayName));
             }
            
             // Get WebDriver endpoints form the existing ones (no equivalent for mobile currently)
             var webDriverEndpoints = fac.GetAllWebDriverEndpoints();
             Report.Log(ReportLevel.Info, string.Format("There are '{0}' WebDriver endpoints", webDriverEndpoints.Count()));
            
             // Create user process endpoint
             var ep = fac.CreateTransientWebDriverEndpoint(new WebDriverEndpointInfo("tempEp", "http://localhost:4444/wd/hub"));
            
             var cfg = WebDriverConfiguration.FromJson("{}");
             cfg.Name = "MyConfig1";
             cfg.Description = "Code sample Config";
            
             ep.ActivateConfiguration(cfg);
            
             ep.ConnectAsync()
                 .ContinueWith(_ => ep.MakeCurrentHostAsync())
                 .Wait();
            
             var b = ep.StartBrowser("firefox", "http://www.ranorex.com");
             </code>
             Example to create and use Mobile endpoints in code.
             <code>
             // Create endpoint management factory
             var fac = new RemoteEndpointFactory();
            
             // Create mobile endpoint in that way
             MobileEndpointInfo info = new MobileEndpointInfo("ExampleEndpointName", "Android", "USB", "4100331a96f1a000");
             // or MobileEndpointInfo info = new MobileEndpointInfo("ExampleEndpointName", "Ios", "WLAN", "192.168.1.13");
             // or MobileEndpointInfo info = new MobileEndpointInfo("ExampleEndpointName", "Android", "Emulator", "emulator-5554");
             var ep = fac.CreateMobileEndpoint(info);
            
             // Use it like other endpoints
             Host.MakeCurrentHost("ExampleEndpointName");
             Host.Local.RunMobileApp("ExampleEndpointName", "ranorex.RxBrowser", true);
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Ranorex.Core.RemoteEndpointFactory.GetAll">
            <summary>
            Gets all existing endpoints.
            </summary>
            <returns>All existing endpoints.</returns>
        </member>
        <member name="T:Ranorex.Core.Remote.EndpointNameBroker">
            <summary>
            Helper class to allow passing all the endpoints name from one process to another.
            </summary>
            <remarks>
            We have the issue, that we need the endpoint names inside the build system (MSBuildTask). But to get the
            endpoints all plugins need to be loaded. Its not possible to load all plugins inside the build process.
            So we transfer the names via simple string list stored in a file. Not very nice from an architectural
            perspective but it should get the job done.
            -
            The remote pad has to store all endpoints when clicking on the 'play' button, so that the build
            triggered by this button can pick up the correct list later.
            -
            Current Problem: The endpoint list on the command line will be the one from the last UI based build (always)
            But I think that is OK for now... This is a temporary feature, until we have full blown UI based
            run on this endpoint solution
            </remarks>
        </member>
        <member name="T:Ranorex.Core.Remote.RemoteCommandLineExtensions">
            <summary>
            Helper class to set test execution arguments form within ranorex core as there is no other way without large
            refactoring to pass them to the 'run' thingi.
            </summary>
            <remarks>
            This class only works when the feature flag 'webdriver' is activated. ATM this is by design. This may has
            to change in the future, when other features need to override the test execution arguments.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Remote.IAddEndpointControl.NumberOfSteps">
            <summary>
            The add procedure for e.g. a mobile device consists of a prepare and select step. Whereas for a webdriver endpoint
            there is only one step. Since the generic remote add device view has a numbered list of steps, we need this count
            to number the subsequent steps properly.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remote.TechInfo.Name">
            <summary>
            This name is used in various controls to show different icons or for similar purposes.
            In general this name should stay constant between Ranorex version. If the name changes, check
            that all remote controls still work correctly.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remote.ISearchable.Match(System.String)">
            <summary>
            Returns if the instance matches some search term (deep search). If null/empty/whitespaces only string is
            passed, true should be returned, as this has to be treated as an cleared search (show everything again).
            </summary>
        </member>
        <member name="T:Ranorex.Core.Remote.RuntimeEndpoint">
            <summary>
            Aggregates endpoint info (connection information) and the endpoint functionality (the runtime object created
            from the info) into one class. The runtime created object will only be available if the endpoint is enabled.
            Otherwise only the info (that was entered by the user) is available.
            </summary>
            <remarks>
            In memory only one runtime endpoint per logical different endpoint (info with differing ID) should exist
            at all times. All views/controls have to operate on that single instance.
            </remarks>
        </member>
        <member name="T:Ranorex.Core.Remote.Infra.ISemanticData`3">
            <summary>
            Semantic data interface to ensure semantic data implements all 3 data variants.
            </summary>
            <remarks>
            Semantic data consists of three data variants
            1. Immutable interface with getters (no real immutable, only syntactic sugar!)
            2. Mutable implementation that implements that interface
            3. Serializable variant that uses plain CLR types so that various serializers/technologies can work with the data
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Remote.Service.RemotePluginService.DisconnectAllEndpoints">
            <summary>
            If a solution is loaded the Update of endpoints is triggered checking for added and removed endpoints.
            Since the local config could contain endpoints with the same ID (they are copied from local on solution create!)
            We need to reload all of them to ensure the correct endpoint data is loaded.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.RemoteHostingService.CreateHostedInstance``1(Ranorex.Core.Remoting.TargetCPU,System.String,System.Object[])">
            <summary>
            Creates a remote hosted instance in a host proc.
            One RemoteHost.exe per "targetCpu+tagName".
            When all instances for the given "targetCpu+tagName" are disposed the RemoteHost shuts down.
            </summary>
            <typeparam name="T"> The type</typeparam>
            <param name="targetCpu"> The desired cpu of the RemoteHost. </param>
            <param name="tagName"> The name to use to identify the RemoteHost instance. </param>
            <param name="args"> The optional arguments to pass to the type ctor.</param>
            <returns></returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.RemoteHostingService.HostServiceActivator">
            <summary>
            This class is marshaled as a singleton in the host proc.
            When all created objects are disposed the service shuts down.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.Instrument">
            <summary>
            When true instrumentation will be done, otherwise it will be skipped.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.ExitOnSuspend">
            <summary>
            When true, PList will be modified so that applications exists on suspend
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.KeyPath">
            <summary>
            The path to the *.p12 key file
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.ProvisionPath">
            <summary>
            The path to the embedded mobile provision file (*.mobileprovision).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.Password">
            <summary>
            The password for the p12 key file.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.Timeout">
            <summary>
            Timeout for the instrumentation process. Default is 3 minutes.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.EntitlementsPath">
            <summary>
            The path to optional entitlements file
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.SkipInstrumentation">
            <summary>
            With this option set to true Ranorex will not perform instrumentation process
            for the chosen IPA file. This option may be useful for deploying any IPA.
            By default it should be set to false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.SkipDeployment">
            <summary>
            With this option set to true Ranorex will not perform deployment process. It means that
            Ranorex will not attempt to upload the chosen IPA file to chosen endpoint.
            It may be useful, if one wants to only resign the IPA and deploy it using other device.
            By default it should be set to false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.InstrumentIpaOptions.ResignOnly">
            <summary>
            With this option set to true Ranorex will perform only changing the signature of the chosen IPA.
            By default it should be set to false.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions">
            <summary>
            Advanced options that can be supplied to <see cref="M:Ranorex.Host.InstrumentAndDeployAndroidApp(System.String,System.String,System.Boolean,Ranorex.Host.DeploymentModes,Ranorex.Duration,Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions)"/>
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.#ctor">
            <summary>
            Initializes a new instance of the class and initializes the properties with the hard coded default values.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.AutoSettingsAdjustment">
            <summary>
            When set to true (default), does automatically adjust instrumentation settings and re-run instrumentatino process up to 4 times.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.AvoidResourcesDecompiling">
            <summary>
            When set to true Ranorex will not decompile and recompile resources of the Android application
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.StaticInstrumentation">
            <summary>
            When set to true Ranorex will use for instrumentation process an experimental algorithm basing on adding static code
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.MultidexApplication">
            <summary>
            When set to true Ranorex will use dedicated instrumentation approach for multidex Android applications
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.RedistributedSmali">
            <summary>
            This option works in that way that Ranorex creates additional dex file in Android instrumented application, copying to its resources by default 20% of files from the existing dex packages. Default is false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.DebugInformation">
            <summary>
            Ranorex will add more information to log files during instrumentation process. This could be useful in a case of any issues with instrumentation process.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.InstrumentationFlags">
            <summary>
            Flags to modify instrumentation behavior. Mainly used to analyze problems that occur during instrumentation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.EnableWebTesting">
            <summary>
            When set to true Ranorex shows DOM content of WebViews in UI-Hierarchy. Note that this feature has a huge performance impact on your app.
            (See: https://www.ranorex.com/help/latest/android-testing/testing-of-mobile-websites-on-android). Default is true.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.TreeSimplification">
            <summary>
            When set to false no post processing of the UI-Tree takes place. This results in a larger UI-Tree which could be useful for automating 3rd party Android controls.
            (See: https://www.ranorex.com/help/latest/android-testing#AndroidTesting-FICandtreesimplification). Default is true.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.FullImageComparison">
            <summary>
            When set to true more robust image comparison is used to determine resource id's for images. This option decreases startup performance.
            (See: https://www.ranorex.com/help/latest/android-testing#AndroidTesting-FICandtreesimplification). Default is false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.ExtractNativeLibs">
            <summary>
            When set to true, Ranorex will change the extractNativeLibs attribute to true if it is defined in AndroidManifest.xml.
            Default is false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.SetTestOnlyFalse">
            <summary>
            When set to true, Ranorex will set the testOnly attribute to false if it is defined in AndroidManifest.xml.
            Default is true.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.RIdClass">
            <summary>
            Provide a custom namespace for ranorex to look for resource ids.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.KeyStore">
            <summary>
            Location of the keystore used for jarsigner. Note: For custom signing Key store, Keystore alias, Keystore password and Key password has to be set.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.KeyAlias">
            <summary>
            Alias of the keystore entity used for jarsigner. Note: For custom signing Key store, Keystore alias, Keystore password and Key password has to be set.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.JdkBinPath">
            <summary>
            Alias of the keystore entity used for jarsigner. Note: For custom signing Key store, Keystore alias, Keystore password and Key password has to be set.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.KeyStorePass">
            <summary>
            Password of the keystore used for jarsigner. Note: For custom signing Key store, Keystore alias, Keystore password and Key password has to be set.
            Security Warning: Please note that password is stored in plain text. Do not use production certificates.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.KeyPass">
            <summary>
            Password of the key used for jarsigner. Note: For custom signing Key store, Keystore alias, Keystore password and Key password has to be set.
            Security Warning: Please note that password is stored in plain text. Do not use production certificates.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.SkipInstrumentation">
            <summary>
            With this option set to true Ranorex will not perform instrumentation process
            for the chosen apk file. This option may be useful for deploying any apk.
            By default it should be set to false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.SkipDeployment">
            <summary>
            With this option set to true Ranorex will not perform deployment process. It means that
            Ranorex will not attempt to upload the chosen IPA file to chosen endpoint.
            It may be useful, if one wants to only resign the IPA and deploy it using other device.
            By default it should be set to false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions.ResignOnly">
            <summary>
            With this option set to true Ranorex will perform only changing the signature of the chosen apk file.
            By default it should be set to false.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.MobileScreenshotHelper.GetScreenshotFromAllDevices">
            <summary>
            Merges screenshots of all online and app-connected devices into one screenshot
            and adds device name caption.
            </summary>
            <returns>Screenshot of all devices.</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.IRemoteEndpointService">
            <summary>
            Service to interact with remote endpoints like mobile devices.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Remoting.IRemoteEndpointService.EndpointsChangedEvent">
            <summary>
            Event that indicates status changes from endpoints.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.IRemoteEndpointService.ConnectTimeout">
            <summary>
            Configured connect timeout for remote endpoints.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.IRemoteEndpointService.AllKnownEndpoints">
            <summary>
            List of all enabled Endpoints
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.GetRemoteEndpointFromInfo(Ranorex.Core.Remoting.IRemoteEndpointInformation)">
            <summary>
            Returns the matching endpoint to an endpoint information object.
            </summary>
            <param name="info">endpoint information</param>
            <returns>existing endpoint instance</returns>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.GetByDisplayName(System.String)">
            <summary>
            Returns the endpoint with given display name if exists.
            </summary>
            <param name="displayName">Endpoint display name. e.g. Nexus S</param>
            <returns>existing endpoint instance</returns>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.Exists(Ranorex.Core.Remoting.IRemoteEndpointInformation)">
            <summary>
            Checks if an endpoint exists for given information.
            </summary>
            <param name="info">endpoint information</param>
            <returns>true if endpoint exists</returns>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.Refresh">
            <summary>
            Refreshes all endpoints. Reloads information and tries to connect endpoints.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.AddDevice(System.String,Ranorex.Core.Remoting.RemotePlatform,Ranorex.Core.Remoting.RemoteConnectionType,System.String)">
            <summary>
            Add a device temporary for this session.
            </summary>
            <param name="name">Device name</param>
            <param name="platform">Device platform (e.g. Android)</param>
            <param name="type">Connection type (e.g. Usb)</param>
            <param name="address">Device identification address. (e.g. IP-Address of network connections; device serial for usb connections) </param>
            <returns>New endpoint instance</returns>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.AddDevice(System.String,Ranorex.Core.Remoting.RemotePlatform,Ranorex.Core.Remoting.RemoteConnectionType,System.String,System.Int32,System.Int32)">
            <summary>
            Add a device temporary for this session.
            </summary>
            <param name="name">Device name</param>
            <param name="platform">Device platform (e.g. Android)</param>
            <param name="type">Connection type (e.g. Usb)</param>
            <param name="address">Device identification address. (e.g. IP-Address of network connections; device serial for usb connections) </param>
            <param name="devicePort">Device TCP port 0..65535, default value is 31000. It should be the same as in Ranorex Services application.</param>
            <param name="discoveryPort">Discovery UDP port 0..65535, default value is 31000. It should be the same as in Ranorex Services application.</param>
            <returns>New endpoint instance</returns>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.CreateControl``1">
            <summary>
            Creates Plugin control instances. Not recommended for public use.
            </summary>
            <typeparam name="T">Control interface to instantiate</typeparam>
            <returns>Control instance</returns>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.Resolve``1">
            <summary>
            Resolves a service.
            </summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>A instance for the specified service type. Supported types are
                <see cref="T:Ranorex.Core.Remoting.IDeviceDiscoveryServiceFactory"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">When resolving the service fails.</exception>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpointService.InstallRxBrowser(Ranorex.Core.Remoting.IRemoteEndpointInformation,Ranorex.Core.Remoting.DeployProcessChangedDelegate,System.Action{System.Exception})">
            <summary>
            Deploys browser app to device.
            </summary>
            <param name="info">Device information</param>
            <param name="progress">Progress changed delegate</param>
            <param name="onFailed">Action delegate being invoked if an exception occurs.</param>
        </member>
        <member name="T:Ranorex.Core.Remoting.RemoteServiceLocator">
            <summary>
            Service locator to access IRemoteEndpointService to interact with remote endpoints like mobile devices.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.RemoteServiceLocator.GetCurrentDeviceName">
            <summary>
            Returns the name of the currently automation root device.
            </summary>
            <returns>
            The name of the mobile device that is the current automation root. 'None' if the current root is
            localhost or some non mobile device endpoint.
            </returns>
        </member>
        <member name="P:Ranorex.Core.Remoting.RemoteServiceLocator.Service">
            <summary>
            Provides access to the service instance if registered.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.AndroidDeviceInfo">
            <summary>
            Holds android device system information.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.Brand">
            <summary>
            Device brand. E.g. "Google"
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.Manufacturer">
            <summary>
            Device manufacturer. E.g. "Samsung"
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.Fingerprint">
            <summary>
            A string that uniquely identifies this build.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.AndroidVersionName">
            <summary>
            The user-visible version string. E.g., "4.1.2".
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.AndroidSDKVerison">
            <summary>
            The user-visible SDK version of the framework in its raw String representation. E.g. "16"
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.BatteryLevelPercent">
            <summary>
            Device battery level as percent. E.g. "98.0"
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.IsCharging">
            <summary>
            True if the device is charging by AC or USB
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.ChargingByAC">
            <summary>
            True if device is charging by AC.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.ChargingByUsb">
            <summary>
            True if device is charging by USB.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.WifiEnabled">
            <summary>
            True if Wifi is enabled on the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.BluetoothEnabled">
            <summary>
            True if bluetooth is enabled on the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.GPSEnabled">
            <summary>
            True if GPS is enabled on the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.AirplaneMode">
            <summary>
            True if device is in AirplaneMode
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.WiFiSSID">
            <summary>
            SSID (Service Set Identifier) of the wifi network.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.WiFiBSSID">
            <summary>
            BSSID (BAsic Service Set Identifier) of the wifi network.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.MacAddress">
            <summary>
            Mac address of the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.NetworkInterfaces">
            <summary>
            List of all network interfaces on the device.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.AndroidDeviceInfo.ToString">
            <summary>
            Converts all device properties to displayable form.
            </summary>
            <returns>All device properties as string</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.ContactCollection">
            <summary>
            Collection of contact data.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.ContactCollection.ToString">
            <summary>
            Converts ContactCollection to human readable string.
            </summary>
            <returns>Contact representations separated by new line.</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.Contact">
            <summary>
            Data object for phone contacts.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Contact.Id">
            <summary>
            Identifier for the contact on the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Contact.Name">
            <summary>
            Name of the contact.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Contact.PhoneNumberMobile">
            <summary>
            Mobile phone number associated with the contact.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Contact.PhoneNumberWork">
            <summary>
            Work phone number associated with the contact.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Contact.PhoneNumberHome">
            <summary>
            Home phone number associated with the contact.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Contact.EMail">
            <summary>
            Email address associated with the contact.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.Contact.ToString">
            <summary>
            Converts contact data to human readable string.
            </summary>
            <returns>Contact in formant. {Name} [PhoneNumberMobile] [PhoneNumberWork] [PhoneNumberHome] [Email]</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.IgnoreInDeviceInfoToString">
            <summary>
            Apply this attribute to a property to ignore it in the <see cref="M:Ranorex.Core.Remoting.Data.DeviceInfo.ToString" /> method. This class is intended
            for Ranorex internal usage.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.DeviceInfo">
            <summary>
            Abstract base class for the Device information data structures. Is here to defined some base helper methods and enable
            casting from a common info object to the derived objects. This class is intended for Ranorex internal usage.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.DeviceInfo.ToString">
            <summary>
            Serialized all attributes into a readable string of key value pairs.
            </summary>
            <returns>Attributes in formant {Name}={Value} separated by new line.</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.IosDeviceInfo">
            <summary>
            DataStucture that holds all iOS device infos. If no infos could be fetched (e.g. when the RxDeviceInfos library is not linked
            to the application under test) from the device, the corresponding property will
            be set to a default value. The default value for bool properties is false. The default value for string is null.
            The default value for numeric types is -1. Please note that he iOS simulator will deliver values for device infos
            but their values will be based on hardware specifications of the simulator host system. For more information how the
            get valid device infos from an iOS device or simulator see.
            </summary>
            <remarks>
            Note that the information that can be retrieved can vary depending on device and iOS version.
            </remarks>
        </member>
        <member name="F:Ranorex.Core.Remoting.Data.IosDeviceInfo.NotAvailable">
            <summary>
            Constant for not available device information.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.DeviceSpecifier">
            <summary>
            Device name e.g. 'iPad Standard'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.ReadingLocaleLanguage">
            <summary>
            Device display language e.g. 'en'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.ReadingLocaleDescription">
            <summary>
            Device display language extended description e.g. 'en English (United States)'
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.ScreenBrightness">
            <summary>
            Value indicating the screen brightness with range 0.0 - 1.0 (0 - 100%).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.ScreenScale">
            <summary>
            Scale factor of the display.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.IsRetina">
            <summary>
            Boolean indicating if the given device has a retina display.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.IsMirroringSupported">
            <summary>
            Bool indicating if the device supports mirroring.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.CpuUsage">
            <summary>
            Current CPU usage when fetching the device information.
            </summary>
            <remarks>
            This is a very inaccurate value and should not be used for essential performance indicators during automation.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.NetworkBytesSent">
            <summary>
            Number of bytes sent over the network adapter.
            </summary>
            <remarks>
            This value will be heavily influenced by the Ranorex and therefore should not be used for essential automation purposes.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.NetworkBytesReceived">
            <summary>
            Number of bytes received over the network adapter.
            </summary>
            <remarks>
            This value will be heavily influenced by the Ranorex and therefore should not be used for essential automation purposes.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.SystemUpTime">
            <summary>
            Time since the device or simulator host system is up and running.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.ProcessorInfo">
            <summary>
            General CPU information.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.CpuFrequency">
            <summary>
            CPU frequency in MHz.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.BusFrequency">
            <summary>
            Bus frequency in MHz.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.AccessoryInfo">
            <summary>
            Information about attached accessories if there are any.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.CarrierName">
            <summary>
            Name of the carrier.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.CarrierMobileCountryCode">
            <summary>
            Carrier country code.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.CarrierIosCountryCode">
            <summary>
            Carrier ISO country code.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.CarrierMobileNetworkCode">
            <summary>
            Carrier mobile network code.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.BatteryLevelInfo">
            <summary>
            Battery load status in percent and status of battery (charing, plugged in, ...)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.BatteryLevel">
            <summary>
            Battery level ranging from 0.0 to 1.0 (0% - 100%).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.IpAddress">
            <summary>
            IP Address of the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.CellAddress">
            <summary>
            Cell address of the device. Works only with valid SIM information.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.DiskSpace">
            <summary>
            Total disk space in MB.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.FreeDiskSpace">
            <summary>
            Free disk space in MB.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.FreeMemory">
            <summary>
            Free system memory in MB.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.TotalMemory">
            <summary>
            Total system memory in MB.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.UsedMemory">
            <summary>
            Used system memory in MB.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.AvailableMemory">
            <summary>
            Available memory in MB.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.ActiveMemory">
            <summary>
            Memory used by running apps.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.InactiveMemory">
            <summary>
            Memory recently used by apps but not freed yet.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.WiredMemory">
            <summary>
            Memory used by the OS.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.IosDeviceInfo.PurgableMemory">
            <summary>
            Memory that can be freed.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.SmsCollection">
            <summary>
            Collection of SMS.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.SmsCollection.ToString">
            <summary>
            String representation of a collection of SMS.
            </summary>
            <returns>String representation of SMS separated by new line.</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.Sms">
            <summary>
            Data object for SMS information.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Sms.MessageId">
            <summary>
            Message Identifier for SMS assigned by the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Sms.ThreadId">
            <summary>
            Identifier of the conversation thread assigned by the device.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Sms.Number">
            <summary>
            Phone number associated with the SMS Message.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Sms.ContactId">
            <summary>
            Contact Identifier associated with the SMS Message.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Sms.TimeStamp">
            <summary>
            Date and time the SMS was sent.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.Sms.Body">
            <summary>
            Message that was sent.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.Sms.ToString">
            <summary>
            String representation of the SMS. Format: {TimeStamp} {Body}
            </summary>
            <returns>String representation of the SMS Message.</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.PhoneCallCollection">
            <summary>
            Collection of multiple phone calls.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.PhoneCallCollection.ToString">
            <summary>
            List of string representations of phone calls.
            </summary>
            <returns>String representation of phone calls separated by new line.</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.Data.PhoneCall">
            <summary>
            Data object for phone calls.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.PhoneCall.Number">
            <summary>
            Phone number associated with the call
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.PhoneCall.Id">
            <summary>
            Identifier for the call.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.PhoneCall.Date">
            <summary>
            DateTime the call occurred.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.PhoneCall.CallType">
            <summary>
            Type of call. Could be "incoming", "outgoing" or "missed"
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.PhoneCall.CallDuration">
            <summary>
            Duration of the call.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.Data.PhoneCall.DurationMs">
            <summary>
            Duration of the call in milliseconds.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.Data.PhoneCall.ToString">
            <summary>
            String representation of the call. Format: {DATE} (Duration: {CallDuration}) {Number} {CallType}
            </summary>
            <returns>String representation of the call.</returns>
        </member>
        <member name="T:Ranorex.Core.Remoting.IRemoteElement">
            <summary>
            Represents a remote UI-Element. Remote UI-Elements are such elements that are not residing on localhost.
            Instead they are elements of applications running on a device computer that is connected to the ranorex System
            by a network channel.
            </summary>
            <remarks>
            Primarily this interface is used within the <see cref="T:Ranorex.Adapter"/> class to check if an element
            is a remote element. If so, the Mouse and Key sequences are not handled by the 'global' Mouse and
            Keyboard handler class, instead it is forwarded to the element itself, so that it can handle it
            (in general handling within an element means sending data over the network so that the remote device/machine
            performs the required actions). Additionally the <see cref="T:Ranorex.Imaging"/> class will check if an
            element is an IRemoteElement. If so it will call CaptureScreenshot() to retrieve the screenshot from the element
            instead of taking a screenshot from the local desktop.
            </remarks>
        </member>
        <member name="T:Ranorex.Core.Remoting.IRemoteEndpoint">
            <summary>
            Represents an interface for connection endpoints to remote devices. Use <see cref="T:Ranorex.Core.Remoting.RemoteServiceLocator"/>
            to retrieve concrete implementations of an IRemoteEndpoint.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Remoting.IRemoteEndpoint.DefaultPort">
            <summary>
            Returns default port value.
            Warning: given endpoint device port number may be changed by a user, depending on
            Ranorex Services application run on the device.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpoint.EnableEventSynchronization(System.Boolean)">
            <summary>
            Event synchronization is primarily used in recorder mode. Enabling event synchronization signals the
            implementation of an IRemoteDevice that we are operating in recording mode, where it is required that the
            UI doesn't change until an event that was received from the remote device is processed by the Ranorex
            system. Because otherwise often the UI already would change before the event was processed. This can lead
            to a behavior where the UI-Element cannot be identified by the element engine while the event is processed
            because a complete new UI-Tree is already loaded and this button doesn't exist anymore.
            </summary>
            <param name="enable">Set to true to enable event synchronization. Should only be done while in recording mode where recording events get processed by Ranorex</param>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpoint.DisconnectAndDisable">
            <summary>
            Disconnects the device from the Ranorex System and marks it disabled in the devices list, so that it won't get connected automatically again.
            </summary>
            <remarks>
            The disconnect has also to take care, that the device is not found anymore by the element engine (Remove Item from
            the ranorex UI-Tree)
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpoint.ReconnectAsync">
            <summary>
            Disconnects the device temporarily. It will get connected automatically by the infrastructure on the next refresh event.
            The operation will be performed on a background thread.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpoint.Reconnect">
            <summary>
            Disconnects the device temporarily. It will get connected automatically by the infrastructure on the next refresh event.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpoint.GetElementInfo">
            <summary>
            Get the element info corresponding to the device Information in the UI-Tree
            </summary>
            <returns>The element info for this remote endpoint</returns>
        </member>
        <member name="M:Ranorex.Core.Remoting.IRemoteEndpoint.WaitFor(Ranorex.Core.Remoting.ChannelState)">
            <summary>
            Wait until device reaches state. This operation throws a TimeoutException if the state is not reached within the configured ConnectTimout.
            e.g.:
            var device = RemoteServiceLocator.Service.GetByDisplayName("MyDevice");
            device.StartApplication(firstApp);
            device.WaitFor(ChannelState.AppConnected);
            </summary>
            <param name="state">state to wait for</param>
        </member>
        <member name="T:Ranorex.Core.Remoting.RpcException">
            <summary>
            Represents an RPC error. Such erros happen when the targeted remote cannot handle the request
            and post back a fault instead of a method response.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.RpcException.#ctor">
            <summary>
            Creates a new RpcException exception.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Remoting.RpcException.#ctor(System.String)">
            <summary>
            Creates a new RpcException.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.Core.Remoting.RpcException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new RpcException.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Ranorex.Core.Remoting.RpcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Remoting.RpcException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Ranorex.Core.Reporting.ActivityExecType">
            <summary>
            Indicates the run context of an <see cref="T:Ranorex.Core.Reporting.ITestIterableActivity"/>, i.e whether or not it is run in an iteration.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.IterationExecType">
            <summary>
            Indicates the iteration type of the <see cref="T:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity"/>.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestContainerActivityType">
            <summary>
            Indicates the type of <see cref="T:Ranorex.Core.Testing.ITestContainer"/> represents.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestEntryActivityType">
            <summary>
            Indicates the type of test entry an <see cref="T:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity"/> or <see cref="T:Ranorex.Core.Reporting.ITestIterableActivity"/> represents.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.IIntegratableActivity">
            <summary>
            Describes an activity that is linked in a Test Management system.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity">
            <summary>
            The public interface of the <see cref="T:Ranorex.Core.Reporting.TestEntryIterationContainerActivity"/>
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity.EntryName">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' name contained in this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity.IterationCount">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' run or data iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity.EntryActivityType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.TestEntryActivityType"/> of the activity contained in this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity.IterationExecuteType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.IterationExecType"/> of this Activity.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ISupportsVideoActivity">
            <summary>
            Specifies video file metadata if an activity supports it
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.IVideoRecordingProvider">
            <summary>
            Represents a video recording provider for recording tests
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.IVideoRecordingProvider.Initialize">
            <summary>
            Called once for lazy initial setup.
            </summary>
            <remarks>
            Not called if video recording is disabled.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.IVideoRecordingProvider.BeginFileRecording(System.String,Ranorex.Core.Reporting.VideoRecordingOptions)">
            <summary>
            Begin file recording to the specified file name with the specified options.
            </summary>
            <param name="fileName">The target video file to record to. Uses the extension specified by the provider.</param>
            <param name="options">The options which should be used for recording, if supported.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.IVideoRecordingProvider.EndFileRecording(System.Boolean)">
            <summary>
            Ends recording for the current video file.
            </summary>
            <param name="keepVideo">Specifies whether to keep the video file or not.</param>
        </member>
        <member name="P:Ranorex.Core.Reporting.IVideoRecordingProvider.FileExtension">
            <summary>
            The file extension required by this provider for the video file name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IVideoRecordingProvider.CurrentVideoFileName">
            <summary>
            The current video file name, if recording is active.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IVideoRecordingProvider.CurrentVideoLengthSeconds">
            <summary>
            The current length, in seconds, of the currently recording video. Zero if no video is recording.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.VideoRecordingOptions">
            <summary>
            Options for video recording.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoRecordingOptions.Default">
            <summary>
            Default options used if no options are specified.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoRecordingOptions.Bitrate">
            <summary>
            The (average) bitrate in kbit used for video recording.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoRecordingOptions.Fps">
            <summary>
            The nominal frame rate used for video recording.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoRecordingOptions.Source">
            <summary>
            The source for video recording.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.VideoRecordingSource">
            <summary>
            Selects the source for video recording
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.FullName">
            <summary>
                The full name of the 'test suite'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCount">
            <summary>
                The total number of tests in 'test suite'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.FailureCount">
            <summary>
                The total number of tests in the suite that failed. i.e. failed from through validation (assertion).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.ErrorCount">
            <summary>
                The total number of tests in the suite that erred. i.e. failed from an exception
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.RunDuration">
            <summary>
                Time taken (in seconds) to execute the 'test suite'
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.SkippedCount">
            <summary>
                The total number of skipped 'test casses'.
            </summary>
            <remarks>
                If skipped used; all are used 'skip', 'skips', and 'skippedCount'; tools are not unified on the attribute name!
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TimeStamp">
            <summary>
                When the test was executed in ISO 8601 format (2014-01-21T16:17:18). Timezone may not be specified.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.HostName">
            <summary>
                Host on which the tests were executed. 'IP' should be used if the hostname cannot be determined.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCases">
            <summary>
                Test cases in the test suite.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.SkippedMessage">
            <summary>
                Indicates that the test was skipped. A skipped test is one that
                was not executed.e.g.disabled or the error behavior indicated it shouldn't be executed.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.StandardSysOut">
            <summary>
                Data that was written to standard out while the test suite was executed.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.StandardSysErrorOut">
            <summary>
                Data that was written to standard error while the test was executed.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.FullName">
            <summary>
                The full display name of the test. e.g. TC1-(Run:1)-(Row:1)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.RunDuration">
            <summary>
                Time taken (in seconds) to execute the test.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.ClassName">
            <summary>
                Fully qualified test name. i.e. the path name in the test suite. e.g. 'MyTestSuite.MySmartFolder.MyTestCase'
            </summary>
            <remarks>
                If classname use class is also used; tools are not unified on the attribute name!
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.ErrorMessage">
            <summary>
                Indicates that the test erred.
                An erred test is one that had an unanticipated problem.
                For example an unhandled exception or a problem with the implementation of the test.
                Contains as a text node relevant data for the error, for example a stack trace.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.FailureMessage">
            <summary>
                Indicates that the test failed. A failure is a test which
                the code has explicitly failed by using the mechanisms for
                that purpose.For example via an assertEquals. Contains as
                a text node relevant data for the failure, e.g., a stack
                trace.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.Error">
            <summary>
                Indicates that the test erred.
                An erred test is one that had an unanticipated problem.
                For example an unhandled exception or a problem with the implementation of the test.
                Contains as a text node relevant data for the error, for example a stack trace.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.Error.#ctor(System.String,System.String)">
            <summary>
                Creates the error report object.
            </summary>
            <param name="message">The error message. e.g. Exception.Message</param>
            <param name="text">The complete exception text.</param>
        </member>
        <member name="T:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.Failure">
            <summary>
                Indicates that the test failed. A failure is a test which
                the code has explicitly failed by using the mechanisms for
                that purpose. For example via an assertEquals. Contains as
                a text node relevant data for the failure, e.g., a stack
                trace.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.Failure.#ctor(System.String)">
            <summary>
                Creates the failure report object.
            </summary>
            <param name="message">The message specified in the assertion.</param>
        </member>
        <member name="T:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.Skipped">
            <summary>
                Indicates that the test was skipped. A skipped test is one that
                was not executed. e.g. disabled or the error behavior indicated it shouldn't be executed.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.JUnit.JUnitReportWriter.TestSuite.TestCase.Skipped.#ctor(System.String)">
            <summary>
                Creates the skipped report object.
            </summary>
            <param name="message">The reason for the skipped test.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.JUnit.IXmlWritable.WriteXml(System.Xml.XmlWriter)">
            <summary>
                Converts an object into its XML representation.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream to which the object is serialized.</param>
        </member>
        <member name="T:Ranorex.Core.Reporting.VideoRecording">
            <summary>
            Video recording for tests
            </summary>
        </member>
        <member name="E:Ranorex.Core.Reporting.VideoRecording.RecordingStarting">
            <summary>
            Triggered before a video recording is started.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Reporting.VideoRecording.RecordingStopping">
            <summary>
            Triggered before a video recording is stopped.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.VideoRecording.CreateDefaultProvider">
            <summary>
            Creates an instance of the default video recording provider
            </summary>
            <returns>An IVideoRecording provider instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.VideoRecording.Initialize(System.String,Ranorex.Core.Reporting.IVideoRecordingProvider)">
            <summary>
            Initializes and configures video recording functionality when using the test suite (or the activity stack directly).
            </summary>
            <param name="reportSubFolder">The sub folder name of the report folder where video files are placed.</param>
            <param name="recordingProvider">An optional instance of the video recording provider used for capturing/compression.</param>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoRecording.Provider">
            <summary>
            The configured video recording provider.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.VideoRecording.Shutdown">
            <summary>
            Stops and shuts down the video recording.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.VideoStoppingEventArgs">
            <summary>
             Event arguments for the VideoStopping event.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoStoppingEventArgs.RelatedActivity">
            <summary>
            The activity in the current TestReport related to this video (e.g. a TestCaseActivity)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoStoppingEventArgs.KeepVideo">
            <summary>
            Determines whether the video should be kept or not.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.VideoStartingEventArgs">
            <summary>
             Event arguments for the VideoStarting event.
             Allows override if recording should be started and setting a custom file name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoStartingEventArgs.RelatedActivity">
            <summary>
            The activity in the current TestReport related to this video (e.g. a TestCaseActivity)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoStartingEventArgs.VideoFileName">
            <summary>
            The file name for the newly recorded video. A relative path is based on the report location.
            </summary>
            <remarks>
            The file is overwritten if it already exists, and the specified directory is created if it doesn't.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.VideoStartingEventArgs.StartVideo">
            <summary>
            Determines whether the video recording should actually start.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestReport">
            <summary>
            Provides structured reporting functionality for Ranorex test suites.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.CurrentTestContainerActivity">
            <summary>
            Returns the Activity for the currently active 'test case' or 'smart folder'.
            </summary>
            <remarks>
            If called from a module at run time, this will be the first active ancestor 'test case' or 'smart folder'.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.CurrentTestEntryIterationContainerActivity">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity"/> for the currently active activity run as an iteration.
            </summary>
            <remarks>
            If called from a module at run time, this will be one of the following.
                -The iteration container of the current <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> if it is run with 'data rows' or has an iteration count greater than 1.
                -The iteration container of the current <see cref="T:Ranorex.Core.Reporting.ITestModuleActivity"/> if the module has an iteration count greater than 1.
             </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.CurrentTestIterationActivity">
            <summary>
            Returns the active <see cref="T:Ranorex.Core.Reporting.ITestIterableActivity"/> of the currently active <see cref="T:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity"/>.
            </summary>
            <remarks>
            The <see cref="T:Ranorex.Core.Reporting.ITestIterableActivity"/> represents the report activity of an <see cref="T:Ranorex.Core.Testing.TestSuiteEntry"/> run as an iteration.
            This is usually the current <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> but may also be <see cref="T:Ranorex.Core.Reporting.ITestModuleActivity"/>.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.CurrentModuleGroupFolderActivity">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.ITestFolderActivity" /> for the currently active module group folder.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.CurrentTestSuiteActivity">
            <summary>
            Returns the Activity for the currently active test suite.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.CurrentTestModuleActivity">
            <summary>
            Returns the Activity for the currently active test module.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.CurrentTestModuleGroupActivity">
            <summary>
            Returns the Activity for the currently active test module group.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestSuite(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.TestSuiteActivity" /> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <param name="testSuiteName">The name of the test suite.</param>
            <param name="runLabel">
            An optional run label. This will be displayed below the testsuite name in the report header section.
            </param>
            <param name="parameters">
            A list of parameters for the test suite. This will be displayed as key/value pairs in the report header section.
            </param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestSuite(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.TestSuiteActivity" /> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <param name="testSuiteName">The name of the test suite.</param>
            <param name="runLabel">
            An optional run label. This will be displayed below the testsuite name in the report header section.
            </param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestSuite(System.String)">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.TestSuiteActivity" /> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <param name="testSuiteName">The name of the test suite.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestSuite">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestSuiteActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />,
            with the result calculated from its child items.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestSuite(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestSuiteActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" /> and updates its
            <see cref="T:Ranorex.Core.Testing.TestResult" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed test container.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestCaseContainer(System.String,System.String,Ranorex.Core.Reporting.ActivityExecType,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.TestContainerActivity" /> of type <see cref="F:Ranorex.Core.Reporting.TestContainerActivityType.TestCase"/> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <param name="containerName">The name of the 'test case'.</param>
            <param name="comment">
            Additional text for this test container. This will be displayed as detail under the activity name in the report.
            </param>
            <param name="executeType">Used to indicate the context the <see cref="T:Ranorex.Core.Reporting.TestContainerActivity"/> run in.</param>
            <param name="iterationIndex">The index of the iteration (starts at one by convention).</param>
            <param name="dataRowOrParams">The current 'data row' or 'params' of the 'smart folder'</param>
            <param name="iterationLabel">The label of the iteration in report.</param>
            <remarks>For each <see cref="M:Ranorex.Core.Reporting.TestReport.BeginTestCaseContainer(System.String,System.String,Ranorex.Core.Reporting.ActivityExecType,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.String)"/> called, <see cref="M:Ranorex.Core.Reporting.TestReport.EndTestCaseContainer"/> must be called, too.</remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginSmartFolderContainer(System.String,System.String,Ranorex.Core.Reporting.ActivityExecType,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.TestContainerActivity" /> of type <see cref="F:Ranorex.Core.Reporting.TestContainerActivityType.SmartFolder"/> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <param name="containerName">The name of the 'smart folder'.</param>
            <param name="comment">
            Additional text for this test container. This will be displayed as detail under the activity name in the report.
            </param>
            <param name="executeType">Used to indicate the context the <see cref="T:Ranorex.Core.Reporting.TestContainerActivity"/> run in.</param>
            <param name="iterationIndex">The index of the iteration (starts at one by convention).</param>
            <param name="iterationLabel">The label of the iteration in report.</param>
            <param name="dataRowOrParams">The current 'data row' or 'params' of the 'smart folder'</param>
            <remarks>For each <see cref="M:Ranorex.Core.Reporting.TestReport.BeginSmartFolderContainer(System.String,System.String,Ranorex.Core.Reporting.ActivityExecType,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.String)"/> called, <see cref="M:Ranorex.Core.Reporting.TestReport.EndSmartFolderContainer"/> must be called, too.</remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestCaseContainer">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestContainerActivity" /> of type <see cref="F:Ranorex.Core.Reporting.TestContainerActivityType.TestCase"/> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />,
            with the result calculated from its child items.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestCaseContainer(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestContainerActivity" /> of type <see cref="F:Ranorex.Core.Reporting.TestContainerActivityType.TestCase"/> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" /> and updates its
            <see cref="T:Ranorex.Core.Testing.TestResult" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed test container.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndSmartFolderContainer">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestContainerActivity" /> of type <see cref="F:Ranorex.Core.Reporting.TestContainerActivityType.SmartFolder"/> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />,
            with the result calculated from its child items.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndSmartFolderContainer(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestContainerActivity" /> of type <see cref="F:Ranorex.Core.Reporting.TestContainerActivityType.SmartFolder"/> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" /> and updates its
            <see cref="T:Ranorex.Core.Testing.TestResult" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed test container.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestEntryContainer(System.Int32,System.String,Ranorex.Core.Reporting.ActivityExecType,Ranorex.Core.Reporting.TestEntryActivityType)">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.TestEntryContainerActivity" /> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <param name="iterationIndex">The index of the iteration (starts at one by convention).</param>
            <param name="entryName">The name of the <see cref="T:Ranorex.Core.Testing.TestSuiteEntry"/>.</param>
            <param name="executeType">The <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity.</param>
            <param name="entryActivityType">The <see cref="T:Ranorex.Core.Reporting.TestEntryActivityType"/> of this activity.</param>
            <remarks>For each BeginTestEntryContainer() called, EndTestEntryContainer() must be called, too.</remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestEntryContainer(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.ITestIterableActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" /> and updates its
            <see cref="T:Ranorex.Core.Testing.TestResult" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed test iteration.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestEntryContainer">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.ITestIterableActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />,
            with the result calculated from its child items.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestEntryIterationContainer(System.String,System.Int32,Ranorex.Core.Reporting.IterationExecType,Ranorex.Core.Reporting.TestEntryActivityType,System.String)">
             <summary>
             Creates a new <see cref="T:Ranorex.Core.Reporting.ITestEntryIterationContainerActivity" /> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
             </summary>
             <param name="entryName">The name of the entry that will be iterated over.</param>
             <param name="iterationCount">The data or run iteration count</param>
             <param name="iterationExecuteType">The <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity..</param>
             <param name="entryActivityType">The type of activity that will be iterated over</param>
             <param name="comment">
             Additional text for this test container. This will be displayed as detail under the activity name in the report.
             </param>
             <remarks>
             Call to <see cref="M:Ranorex.Core.Reporting.TestReport.BeginTestEntryIterationContainer(System.String,System.Int32,Ranorex.Core.Reporting.IterationExecType,Ranorex.Core.Reporting.TestEntryActivityType,System.String)"/> are normally followed by multiple calls to:
                 <see cref="M:Ranorex.Core.Reporting.TestReport.BeginSmartFolderContainer(System.String,System.String,Ranorex.Core.Reporting.ActivityExecType,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.String)"/>,
                 <see cref="M:Ranorex.Core.Reporting.TestReport.BeginTestCaseContainer(System.String,System.String,Ranorex.Core.Reporting.ActivityExecType,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.String)"/>,
                 <see cref="M:Ranorex.Core.Reporting.TestReport.BeginTestModule(System.String,System.Int32,Ranorex.Core.Reporting.ActivityExecType)"/>, or
                 <see cref="M:Ranorex.Core.Reporting.TestReport.BeginTestEntryContainer(System.Int32,System.String,Ranorex.Core.Reporting.ActivityExecType,Ranorex.Core.Reporting.TestEntryActivityType)"/>.
            
             For each BeginTestEntryIterationContainer() called, <see cref="M:Ranorex.Core.Reporting.TestReport.EndTestEntryIterationContainer"/> must be called, too.
              </remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestEntryIterationContainer">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestEntryIterationContainerActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />,
            with the result calculated from its child items.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestEntryIterationContainer(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestEntryIterationContainerActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" /> and updates its
            <see cref="T:Ranorex.Core.Testing.TestResult" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed test container.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestModule(System.String,System.Int32,Ranorex.Core.Reporting.ActivityExecType)">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.TestModuleActivity" /> and pushes it on the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <remarks>If a test module is already on top of the stack, it is removed first (with default status).</remarks>
            <param name="testModuleName">The name of the test module.</param>
            <param name="iterationIndex">The index of the iteration (starts at one by convention).</param>
            <param name="executeType">The <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestContainerSetup">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.Activity" /> of type <see cref="F:Ranorex.Core.Testing.ModuleExecType.Setup" /> container and pushes it on the
            <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestContainerSetup">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.Activity" /> of type <see cref="F:Ranorex.Core.Testing.ModuleExecType.Setup" /> from the
            <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestContainerSetup(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.Activity" /> of type <see cref="F:Ranorex.Core.Testing.ModuleExecType.Setup" /> from the
            <see cref="T:Ranorex.Core.Reporting.ActivityStack" /> and updates its <see cref="T:Ranorex.Core.Testing.TestResult" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed setup container.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.BeginTestContainerTeardown">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.Reporting.Activity" /> of type <see cref="F:Ranorex.Core.Testing.ModuleExecType.Teardown" /> container and pushes it on the
            <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestContainerTeardown">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.Activity" /> of type <see cref="F:Ranorex.Core.Testing.ModuleExecType.Teardown" /> from the
            <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestContainerTeardown(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.Activity" /> of type <see cref="F:Ranorex.Core.Testing.ModuleExecType.Teardown" /> from the
            <see cref="T:Ranorex.Core.Reporting.ActivityStack" /> and updates its <see cref="T:Ranorex.Core.Testing.TestResult" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed test container teardown.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestModule(Ranorex.Core.Testing.TestResult)">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestModuleActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> of the completed test module.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.EndTestModule">
            <summary>
            Removes the current <see cref="T:Ranorex.Core.Reporting.TestModuleActivity" /> from the <see cref="T:Ranorex.Core.Reporting.ActivityStack" />.
            The module is marked as 'Failed' if the module contains any 'Failure' level messages.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.SetCurrentTestResult(Ranorex.Core.Testing.TestResult)">
            <summary>
            Sets the test result for the currently active test container or test module.
            </summary>
            <param name="result">The <see cref="T:Ranorex.Core.Testing.TestResult" /> to set.</param>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.VideoRecording">
            <summary>
            Provides access to video recording functionality used by the test report
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestReport.ScreenshotMode">
            <summary>
            Determines if tracing screenshots are taken in the background (non-blocking) or foreground (blocking).
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.TestReport.ScreenshotMode.Foreground">
            <summary>
            Foreground (blocking) screenshots
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.TestReport.ScreenshotMode.Background">
            <summary>
            Background (non-blocking) screenshots
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.EnableTracingScreenshots">
            <summary>
            Determines whether screenshots should be made for every step.
            This provides a number of screenshots in case an error occurs.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.MinimumJUnitReportLevel">
            <summary>
            Gets or sets the minimum <see cref="T:Ranorex.ReportLevel"/> that a message
            needs to have to be included in the JUnit report.
            </summary>
            <remarks>The default level is <see cref="F:Ranorex.ReportLevel.Error"/>.</remarks>
            <value>The minimum report level that log entries need to have to be included in the JUnit report.</value>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.TracingScreenshotMode">
            <summary>
            Determines if tracing screenshots are taken in the background (non-blocking) or foreground (blocking).
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestReport.VideoRecordingMode">
            <summary>
            Determines whether video recording is enabled during test suite execution.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.TestReport.VideoRecordingMode.Off">
            <summary>
            Video recording is disabled.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.TestReport.VideoRecordingMode.KeepFailedTests">
            <summary>
            Video recording is enabled, but only failed test case videos are kept.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.TestReport.VideoRecordingMode.KeepAllTests">
            <summary>
            Video recording is enabled and all videos are kept.
            </summary>
            <remarks>
            Beware: Keeping videos for all tests can consume a large amount of storage.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.TracingScreenshotQuality">
            <summary>
            The JPEG quality for tracing screenshots (10-100, defaults to 40).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.ReportWriteInterval">
            <summary>
            The time interval for the current report to be saved to the target file.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.ReportFilename">
            <summary>
            The filename of the report file to to use.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.ReportEnvironment">
            <summary>
            Provides access to all filenames and path used by the report.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.ThumbImageWidth">
            <summary>
            The width (in pixels) of thumbnail images included in the report.
            </summary>
            <remarks>The default value is 150px.</remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.TracingScreenshotCountLocal">
            <summary>
            Gets or sets the number of tracing screenshots hold per module. The tracing
            screenshots are stored and shown in the report in case the module fails.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestReport.HasStatusPlaceholders">
            <summary>
            Gets a value indicating whether the <see cref="P:Ranorex.Core.Reporting.TestReport.ReportEnvironment"/> contains status placeholders.
            </summary>
            <value>
            <c>true</c> if the <see cref="P:Ranorex.Core.Reporting.TestReport.ReportEnvironment"/> contains status placeholders; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.Clear">
            <summary>
            Clears the current test report, removing all information logged up to this point.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.SaveLocalScreenshotBuffer">
            <summary>
            Saves all screenshots stored in the local screenshot buffer associated with the current test module activity.
            </summary>
            <remarks>
            Note that this only works within an active <see cref="T:Ranorex.Core.Reporting.TestModuleActivity"/> and that only <see cref="P:Ranorex.Core.Reporting.TestReport.TracingScreenshotCountLocal"/>
            screenshots are stored in the buffer and are discarded if new report items are added.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.Setup(Ranorex.ReportLevel,System.String,System.Boolean,System.Boolean,Ranorex.Duration)">
            <summary>
            Sets up the reporting environment.
            </summary>
            <param name="minLevel">The minimum <see cref="T:Ranorex.ReportLevel"/> for messages that are to be
            written to the report.</param>
            <param name="logToConsole">If set to <c>true</c>, logging to console is enabled.</param>
            <param name="fileName">Name of the XML log file, or null if XML logging should be disabled.</param>
            <param name="enableTracingScreenshots">Determines whether screenshots should be made for every step.
            This provides a number of diagnostic screenshots in case of an error.</param>
            <param name="writeInterval">The time interval for the current report to be saved to the target file.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.Setup(Ranorex.ReportLevel,System.String,System.Boolean,System.Boolean,Ranorex.Duration,System.String)">
            <summary>
            Sets up the reporting environment.
            </summary>
            <param name="minLevel">The minimum <see cref="T:Ranorex.ReportLevel"/> for messages that are to be
            written to the report.</param>
            <param name="logToConsole">If set to <c>true</c>, logging to console is enabled.</param>
            <param name="fileName">Name of the XML log file, or null if XML logging should be disabled.</param>
            <param name="enableTracingScreenshots">Determines whether screenshots should be made for every step.
            This provides a number of diagnostic screenshots in case of an error.</param>
            <param name="writeInterval">The time interval for the current report to be saved to the target file.</param>
            <param name="customReportFileLocation">Folder containing custom report files.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.Setup(Ranorex.ReportLevel,System.String,System.Boolean)">
            <summary>
            Sets up the reporting environment.
            </summary>
            <param name="minLevel">The minimum <see cref="T:Ranorex.ReportLevel"/> for messages that are to be
            written to the report.</param>
            <param name="logToConsole">If set to <c>true</c>, logging to console is enabled.</param>
            <param name="fileName">Name of the XML log file, or null if XML logging should be disabled.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.Setup(Ranorex.ReportLevel,System.String,System.Boolean,System.String)">
            <summary>
            Sets up the reporting environment.
            </summary>
            <param name="minLevel">The minimum <see cref="T:Ranorex.ReportLevel"/> for messages that are to be
            written to the report.</param>
            <param name="logToConsole">If set to <c>true</c>, logging to console is enabled.</param>
            <param name="fileName">Name of the XML log file, or null if XML logging should be disabled.</param>
            <param name="customReportFileLocation">File location for custom reports.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.HasTimePlaceholders(System.String)">
            <summary>
            Determines whether the specified path contains time-dependent placeholder values.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path contains time-dependent placeholder values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.SaveReport">
            <summary>
            Forces the current report to be saved to the configured file name.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.SetVideoRecordingProviderFactory(System.Func{Ranorex.Core.Reporting.IVideoRecordingProvider})">
            <summary>
            Override the default IVideoRecordingProvider to be used with the test report.
            </summary>
            <param name="factory">A function returning a IVideoRecordingProvider on demand.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.ResolvePlaceholders(System.String,System.DateTime)">
            <summary>
            Resolves the predefined placeholders for the test suite report filename.<br/>
            Note: This is done automatically when calling Setup()
            </summary>
            <param name="fileName">The input string.</param>
            <param name="timestamp">Timestamp used to resolve time placeholders.</param>
            <returns>The resolved string.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestReport.UpdateStatusPlaceholders(Ranorex.Core.Reporting.ActivityStatus)">
            <summary>
            Updates the status placeholders used in the <see cref="P:Ranorex.Core.Reporting.TestReport.ReportEnvironment"/> view and model filenames.
            Do not call this method anywhere (for internal use only).
            </summary>
            <param name="status">The <see cref="T:Ranorex.Core.Reporting.ActivityStatus"/> that will be used for replacement.</param>
            <returns>The resolved report view full filename.</returns>
        </member>
        <member name="T:Ranorex.Core.Reporting.IActivity">
            <summary>
            The public read-only interface of the Activity Class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.BeginTime">
            <summary>
            Returns the time the report activity started.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.EndTime">
            <summary>
            Returns the time the report activity ended or <see langword="null"/> if the activity is still running.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.Children">
            <summary>
            Returns the child activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.CustomProperties">
            <summary>
            Returns the custom properties of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.ElapsedTime">
            <summary>
            Returns the time elapsed since the <see cref="P:Ranorex.Core.Reporting.IActivity.BeginTime"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.ErrorMessage">
            <summary>
            Returns the error message of this activity if any.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.HasTimedOut">
            <summary>
            Returns if the activity has timed out.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.IsActive">
            <summary>
            Returns if this activity is active.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.Parent">
            <summary>
            Returns the parent of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.Status">
            <summary>
            Returns the status of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.Timeout">
            <summary>
            Returns the timeout of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalDuration">
            <summary>
            Returns the total duration of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> <see cref="T:Ranorex.Duration"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalErrorCount">
            <summary>
            Returns the total error count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> error count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalWarningCount">
            <summary>
            Returns the total warning count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> warning count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalBlockedTestCaseCount">
            <summary>
            Returns the total blocked (ignored/skipped) <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> test cases count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> blocked count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalFailedTestCaseCount">
            <summary>
            Returns the total failed <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> test cases count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> failed count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalSuccessTestCaseCount">
            <summary>
            Returns the total success <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> test cases count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> success count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalBlockedCount">
            <summary>
            Returns the total blocked (ignored/skipped) count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> blocked count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalFailedCount">
            <summary>
            Returns the total failed count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> failed count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalSuccessCount">
            <summary>
            Returns the total success count of this activity including its <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> success count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.TotalChildMaintenanceModeCount">
            <summary>
            Returns the total count of 'MaintenanceMode' category <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.ChildBlockedCount">
            <summary>
            Returns the count of blocked (ignored/skipped) <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.ChildFailedCount">
            <summary>
            Returns the count of failed <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.IActivity.ChildSuccessCount">
            <summary>
            Returns the count of successful <see cref="P:Ranorex.Core.Reporting.IActivity.Children"/> activities.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ITestContainerActivity">
            <summary>
            The public read-only interface of the <see cref="T:Ranorex.Core.Reporting.TestContainerActivity"/> Class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.ContainerName">
            <summary>
            Returns the 'test case' or 'smart folder' name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.TestContainer">
            <summary>
            Returns the 'test case' or 'smart folder' instance for this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.TotalIterationCount">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' total 'run' and 'data' iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.RunIterationCount">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' total 'run' iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.DataIterationCount">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' total 'data' iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.ExecuteType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.ContainerActivityType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.TestContainerActivityType"/> of the <see cref="T:Ranorex.Core.Testing.ITestContainer"/> for this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.ParentContainer">
            <summary>
            Returns the parent <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.FullDisplayName">
            <summary>
            Returns the container name including the run or data iteration info.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.AbsoluteDisplayName">
            <summary>
            Returns the container name including the run or data iteration info, concatenated with the parent/s FullDisplayName.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestContainerActivity.ResultSummary">
            <summary>
            Returns the err and or warning summary of <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/>
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ITestFolderActivity">
            <summary>
            The public read-only interface of the TestFolderActivity Class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestFolderActivity.FolderName">
            <summary>
            Returns the folder name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestIterableActivity.Data">
            <summary>
            Returns the current 'data row' or 'parameters'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestIterableActivity.Index">
            <summary>
            Returns the current iteration index (starts at one by convention).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestIterableActivity.EntryActivityType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.TestEntryActivityType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestIterableActivity.ExecuteType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestIterableActivity.FullDisplayName">
            <summary>
            Returns the container name including the run or data iteration info.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ITestModuleActivity">
            <summary>
            The public read-only interface of the TestModuleActivity Class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestModuleActivity.TestModuleName">
            <summary>
            Returns the test module name.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ITestModuleGroupActivity">
            <summary>
            The public read-only interface of the TestModuleGroupActivity Class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestModuleGroupActivity.ModuleGroupName">
            <summary>
            Returns the module group name.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ITestSuiteActivity">
            <summary>
            The public read-only interface of the TestSuiteActivity Class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ITestSuiteActivity.TestSuiteName">
            <summary>
            Returns the test suite name.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ReportEnvironment">
            <summary>
            Provides access to all files dependent to a specific report and allows to configure
            placement options for these files.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ReportEnvironment.ReportFileQualifier">
            <summary>
            Defines if dependent report file is shared among other reports
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.ReportEnvironment.ReportFileQualifier.Default">
            <summary>
            Indicate a standard report file which is not shared among other reports.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.ReportEnvironment.ReportFileQualifier.Shared">
            <summary>
            Indicate file is shared among other reports (e.g. RanorexReport.xsl)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportName">
            <summary>
            Report name created from pattern (e.g. TestReport_20121009_151258).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportFileDirectory">
            <summary>
            Directory which contains the report.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.CustomFilesDirectory">
            <summary>
            Directory which contains a custom report template.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportDataFileName">
            <summary>
            Filename of the report xml-Datafile.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportDataFilePath">
            <summary>
            Full path of the report xml-Datafile. (e.g. test.rxlog.data)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportZipFilePath">
            <summary>
            Full path of the zipped report. (e.g. test.rxzlog)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportViewFileName">
            <summary>
            Filename of the report View-File. (e.g. test.rxlog)
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportViewFilePath">
            <summary>
            Full path to the report View-File.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.HasReferenceFile">
            <summary>
            True if report has external referenced files.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.UseScreenshotFolder">
            <summary>
            This property is only needed for backwards
            compatibility with Automation Helpers.
            Since a screenshot folder is always used,
            this property is no longer settable and always returns true.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportScreenshotFolderName">
            <summary>
            Name of the folder where screenshots are placed.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportScreenshotRelativPath">
            <summary>
            Relative path of the screenshot folder.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportScreenshotFolderPath">
            <summary>
            Absolute path to the screenshot folder.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportVideoFolderName">
            <summary>
            Name of the folder where videos are placed.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.ReportVideoFolderPath">
            <summary>
            Absolute path to the video folder.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.UseSnapshotFolder">
            <summary>
            This property is only needed for backwards
            compatibility with Automation Helpers.
            Since a snapshot folder is always used,
            this property is no longer settable and always returns true.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ReportEnvironment.IsZippedReport">
            <summary>
            True if report is zipped
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.IsReportDataFile(System.String)">
            <summary>
            Checks if file has report data extension.
            </summary>
            <param name="filename">Path to file to check.</param>
            <returns>True if filename has report data file extension.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.Create(System.String,System.String,System.String)">
            <summary>
            Creates report environment from filename, path and path to report template.
            </summary>
            <param name="reportViewName">Name of the report View-File (.rxlog extension)</param>
            <param name="reportFileDirectory">Root directory containing the report.</param>
            <param name="customFilesDirectory">Path to report template. Use string.Empty if no template is used.</param>
            <returns>New instance of report environment.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.CreateFromViewFilename(System.String,System.String)">
            <summary>
            Creates report environment from full View-File path and path to report template.
            </summary>
            <param name="viewFilePath">Full path to the report View-File (.rxlog extension)</param>
            <param name="customFilesDirectory">Path to report template. Use string.Empty if no template is used.</param>
            <returns>New instance of report environment.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.CreateFromDataFilename(System.String,System.String)">
            <summary>
            Creates report environment from full Data-File path and path to report template.
            </summary>
            <param name="dataFilePath">Full path to the report Data-File (.data extension)</param>
            <param name="customFilesDirectory">Path to report template. Use string.Empty if no template is used.</param>
            <returns>New instance of report environment.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.IsLegacyReport">
            <summary>
            Checks if report environment points to legacy report.
            </summary>
            <returns> true if view-file defined by ReportEnvironment is a Ranorex 2.X report file.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.SaveExternals">
            <summary>
            Saves all external file to the report root directory. This covers default ranorex ressource files
            (e.g. View-File, XSL-Transformation file, png ressources or all files contained in the custom report
            file directory (if defined).
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.GetDependentFiles">
            <summary>
            Get a list of all files which belong to the report environment. This covers default ranorex ressource files
            (e.g. View-File, XSL-Transformation file, png ressources, all files referenced by the report data-file or
            explicit reference-file and all files contained in the custom report file directory (if defined).
            </summary>
            <returns>List of filepaths</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.ReportEnvironment.GetDependentFilesWithQualifiers">
            <summary>
            Get a list of all files which belong to the report environment. This covers default ranorex resource files
            (e.g. View-File, XSL-Transformation file, png resources, all files referenced by the report data-file or
            explicit reference-file and all files contained in the custom report file directory (if defined).
            </summary>
            <returns>Dictionary of filepath with ownership qualifiers</returns>
        </member>
        <member name="T:Ranorex.Core.Reporting.Activity">
            <summary>
            Represents a report activity that writes information in the test report.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalErrorCount">
            <summary>
            Returns the total error count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> error count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalWarningCount">
            <summary>
            Returns the total warning count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> warning count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalSuccessTestCaseCount">
            <summary>
            Returns the total success <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> test cases count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> success count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalBlockedCount">
            <summary>
            Returns the total blocked (ignored/skipped) count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> blocked count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalFailedCount">
            <summary>
            Returns the total failed count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> failed count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalSuccessCount">
            <summary>
            Returns the total success count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> success count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalFailedTestCaseCount">
            <summary>
            Returns the total failed <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> test cases count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> failed count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalBlockedTestCaseCount">
            <summary>
            Returns the total blocked (ignored/skipped) <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/> test cases count of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> blocked count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.ChildBlockedCount">
            <summary>
            Returns the count of blocked (ignored/skipped) <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalChildMaintenanceModeCount">
            <summary>
            Returns the total count of 'MaintenanceMode' category <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.ChildFailedCount">
            <summary>
            Returns the count of failed <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.ChildSuccessCount">
            <summary>
            Returns the count of successful <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.CustomProperties">
            <summary>
            Returns the custom properties of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.HasTimedOut">
            <summary>
            Returns if the activity has timed out.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.ElapsedTime">
            <summary>
            Returns the time elapsed since the <see cref="P:Ranorex.Core.Reporting.Activity.BeginTime"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.BeginTime">
            <summary>
            Returns the time the report activity started.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.EndTime">
            <summary>
            Returns the time the report activity ended or <see langword="null"/> if the activity is still running.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.Timeout">
            <summary>
            Returns the timeout of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.TotalDuration">
            <summary>
            Returns the total duration of this activity including its <see cref="P:Ranorex.Core.Reporting.Activity.Children"/> <see cref="T:Ranorex.Duration"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.Status">
            <summary>
            Returns the status of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.IsActive">
            <summary>
            Returns if this activity is active.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.Children">
            <summary>
            Returns the child activities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.Activity.ErrorMessage">
            <summary>
            Returns the error message of this activity if any.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ActivityContext">
            <summary>
            Provides structured reporting ActivityStack handling for Ranorex test suites.
            </summary>
            <remarks>
            This class is designed to be us within a using statement.
            This is to ensure the reporting activities are pushed and removed from the <see cref="T:Ranorex.Core.Reporting.ActivityStack"/> correct order.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityContext.Begin(Ranorex.Core.Reporting.Activity)">
            <summary>
            Creates a new ActivityContext and pushes the <see cref="T:Ranorex.Core.Reporting.Activity"/> on the <see cref="T:Ranorex.Core.Reporting.ActivityStack"/>.
            </summary>
            <param name="activity">The <see cref="T:Ranorex.Core.Reporting.Activity"/> to push onto the stack.</param>
            <returns>Use inside a using statement to ensure the <see cref="T:Ranorex.Core.Reporting.ActivityContext"/> is disposed and the <see cref="T:Ranorex.Core.Reporting.Activity"/> is properly removed from the <see cref="T:Ranorex.Core.Reporting.ActivityStack"/>.</returns>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityContext.Dispose">
            <summary>
            Ends the <see cref="T:Ranorex.Core.Reporting.Activity"/> and removes it from the <see cref="T:Ranorex.Core.Reporting.ActivityStack"/>.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ActivityException">
            <summary>
            Exception representing errors in the Ranorex Activity classes.
            </summary>
            <remarks>
            This type should only be used by the core, and not by plugins.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityException.#ctor">
            <summary>
            Creates a new Ranorex activity exception.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityException.#ctor(System.String)">
            <summary>
            Creates a new Ranorex activity exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new Ranorex activity exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new Ranorex activity exception.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestFolderActivity.FolderName">
            <summary>
            Returns the folder name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestFolderActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleGroupActivity.ModuleGroupName">
            <summary>
            Returns the module group name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleGroupActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestEntryIterationContainerActivity">
            <summary>
            Represents an <see cref="T:Ranorex.Core.Reporting.Activity"/>, used to contain child activities of type <see cref="T:Ranorex.Core.Reporting.ITestIterableActivity"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryIterationContainerActivity.EntryActivityType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.TestEntryActivityType"/> of the activity contained in this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryIterationContainerActivity.IterationExecuteType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.IterationExecType"/> of this Activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryIterationContainerActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryIterationContainerActivity.IterationCount">
            <summary>
            Returns the data or run iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryIterationContainerActivity.EntryName">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' name.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestEntryIterationContainerActivity.Ranorex#Core#Reporting#IIntegratableActivity#CreateResults">
            <summary>
            Creates a result from the test entry iteration container activity instance used by integration services.
            </summary>
            <returns> Single entry of Enumerable result. </returns>
        </member>
        <member name="T:Ranorex.Core.Reporting.ActivityStack">
            <summary>
            Represents a stack of report activities that is managed by an <see cref="T:Ranorex.Core.Reporting.ActivityContext"/>.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Reporting.ActivityStack.BeginActivity">
            <summary>
            Occurs after a report <see cref="T:Ranorex.Core.Reporting.IActivity"/> began.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Reporting.ActivityStack.UpdateActivity">
            <summary>
            Occurs after a report <see cref="T:Ranorex.Core.Reporting.IActivity"/> updated.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Reporting.ActivityStack.EndActivity">
            <summary>
            Occurs after a report <see cref="T:Ranorex.Core.Reporting.IActivity"/> ended.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Reporting.ActivityStack.Paused">
            <summary>
            Occurs before reporting of activities is paused.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Reporting.ActivityStack.Resumed">
            <summary>
            Occurs after reporting of activities resumed from pause.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.ActivityStack.Instance">
            <summary>
            Get the <see cref="T:Ranorex.Core.Reporting.ActivityStack"/> for the current thread.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityStack.RequestPause">
            <summary>
            Request to pause reporting of activities on next begin, end or update.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.ActivityStack.Resume">
            <summary>
            Resume reporting of activities on the stack.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.ActivityStatus">
            <summary>
            Status for test report activities.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.ActivityStatus.Success">
            <summary>
            Activity execution was completed successfully.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.ActivityStatus.Failed">
            <summary>
            Activity has been executed, resulting in errors.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Reporting.ActivityStatus.Ignored">
            <summary>
            Activity execution has been skipped because of previous errors.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.RootActivity.RunId">
            <summary>
            An optional identifier intended to be used for test run identification.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.RootActivity.SutVersion">
            <summary>
            An optional SUT version identifier for tracking SUT versions in reports.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.RootActivity.BeginTime">
            <summary>
            Returns the time the report activity started.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.RootActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestContainerActivity">
            <summary>
            Represents an <see cref="T:Ranorex.Core.Reporting.Activity"/> for the 'smart folder' and 'test case'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.FullDisplayName">
            <summary>
            Returns the container name including the run or data iteration info.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.AbsoluteDisplayName">
            <summary>
            Returns the container name including the run or data iteration info, concatenated with the parent/s FullDisplayName.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.ResultSummary">
            <summary>
            Returns the err and or warning summary of <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/>
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.ContainerName">
            <summary>
            Returns the 'test case' or 'smart folder' name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.TestContainer">
            <summary>
            Returns the 'test case' or 'smart folder' instance for this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.ExecuteType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.ContainerActivityType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.TestContainerActivityType" /> of the <see cref="T:Ranorex.Core.Testing.ITestContainer" /> for this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.ParentContainer">
            <summary>
            Returns the parent <see cref="T:Ranorex.Core.Reporting.ITestContainerActivity"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.TotalIterationCount">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' total 'run' and 'data' iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.RunIterationCount">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' total 'run' iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.DataIterationCount">
            <summary>
            Returns the 'test case', 'smart folder', or 'test module' total 'data' iteration count.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.Ranorex#Core#Reporting#ITestIterableActivity#Index">
            <summary>
            Returns the current ('test case', 'smart folder', or 'test module') iteration index (starts at one by convention).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.Ranorex#Core#Reporting#ITestIterableActivity#EntryActivityType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.TestEntryActivityType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestContainerActivity.Data">
            <summary>
                Returns the current 'data row' or 'parameters'.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Reporting.TestContainerActivity.Ranorex#Core#Reporting#IIntegratableActivity#CreateResults">
            <summary>
            Creates a result from the test container activity instance used by integration services.
            </summary>
            <returns> Single entry of Enumerable result. </returns>
        </member>
        <member name="T:Ranorex.Core.Reporting.TestEntryContainerActivity">
            <summary>
            An <see cref="T:Ranorex.Core.Reporting.Activity"/> to substitute or show iterations in the test report.
            It can also be used as a generic <see cref="T:Ranorex.Core.Reporting.Activity"/> to substitute an <see cref="T:Ranorex.Core.Reporting.Activity"/> of <see cref="T:Ranorex.Core.Reporting.TestEntryActivityType"/>
            </summary>
            <remarks>
            This is usually used to substitute <see cref="T:Ranorex.Core.Reporting.TestContainerActivity"/> of <see cref="F:Ranorex.Core.Reporting.TestEntryActivityType.TestCase"/> when preforming run iterations of data iterations;
            or, to wrap a <see cref="F:Ranorex.Core.Reporting.TestEntryActivityType.TestModule"/> when ran as a stand alone module.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryContainerActivity.FullDisplayName">
            <summary>
            Returns the container name including the run or data iteration info.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryContainerActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryContainerActivity.Ranorex#Core#Reporting#ITestIterableActivity#EntryActivityType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.TestEntryActivityType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryContainerActivity.Ranorex#Core#Reporting#ITestIterableActivity#Data">
            <summary>
            Returns the current data row or params of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryContainerActivity.Ranorex#Core#Reporting#ITestIterableActivity#ExecuteType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestEntryContainerActivity.Ranorex#Core#Reporting#ITestIterableActivity#Index">
            <summary>
            Returns the current iteration index (starts at one by convention).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleActivity.Ranorex#Core#Reporting#ITestIterableActivity#Data">
            <summary>
            Returns <c>null</c>, the <see cref="T:Ranorex.Core.Reporting.TestModuleActivity"/> does not have data.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleActivity.FullDisplayName">
            <summary>
            Returns the container name including the run or data iteration info.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleActivity.TestModuleName">
            <summary>
            Returns the test module name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleActivity.Ranorex#Core#Reporting#ITestIterableActivity#Index">
            <summary>
            Returns the current iteration index (starts at one by convention).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestModuleActivity.ExecuteType">
            <summary>
            Returns the <see cref="T:Ranorex.Core.Reporting.ActivityExecType"/> of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestSetupTeardownContainerActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestSuiteActivity.TestSuiteName">
            <summary>
            Returns the test suite name.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Reporting.TestSuiteActivity.DetailMessage">
            <summary>
            Returns the detailed message of this activity.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Repository.RepoGenBaseFolder">
            <summary>
            The base class for all generated repository folder classes.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Repository.RepoGenBaseFolder._selfInfo">
            <summary>
            A <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> instance containing information about this folder.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoGenBaseFolder.#ctor(System.String,System.String,Ranorex.Core.Repository.RepoGenBaseFolder,Ranorex.Duration,System.Nullable{System.Boolean},System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Repository.RepoGenBaseFolder"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="basePath">The base path.</param>
            <param name="parentFolder">The app folder.</param>
            <param name="folderSearchTimeout">The folder search timeout.</param>
            <param name="useEnsureVisible">The value set to <see cref="P:Ranorex.Adapter.UseEnsureVisible"/> of
            the adapter created for this folder.</param>
            <param name="useCache">if set to <c>true</c> use cache.</param>
            <param name="folderId">The id of the associated repository folder.</param>
            <param name="imageResourceFileName">The image resource file name of the associated repository.</param>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoGenBaseFolder.#ctor(System.String,System.String,Ranorex.Core.Repository.RepoGenBaseFolder,Ranorex.Duration,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Repository.RepoGenBaseFolder"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="basePath">The base path.</param>
            <param name="parentFolder">The app folder.</param>
            <param name="folderSearchTimeout">The folder search timeout.</param>
            <param name="useCache">if set to <c>true</c> use cache.</param>
            <param name="folderId">The id of the associated repository folder.</param>
            <param name="imageResourceFileName">The image resource file name of the associated repository.</param>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoGenBaseFolder.#ctor(System.String,System.String,Ranorex.Core.Repository.RepoGenBaseFolder,Ranorex.Duration,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Repository.RepoGenBaseFolder"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="basePath">The base path.</param>
            <param name="parentFolder">The app folder.</param>
            <param name="folderSearchTimeout">The folder search timeout.</param>
            <param name="useCache">if set to <c>true</c> use cache.</param>
            <param name="folderId">The id of the associated repository folder.</param>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoGenBaseFolder.#ctor(System.String,System.String,Ranorex.Core.Repository.RepoGenBaseFolder,Ranorex.Duration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Repository.RepoGenBaseFolder"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="basePath">The base path.</param>
            <param name="parentFolder">The app folder.</param>
            <param name="folderSearchTimeout">The folder search timeout.</param>
            <param name="useCache">if set to <c>true</c> use cache.</param>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.BasePath">
            <summary>
            The base path for the folder.
            </summary>
            <remarks>This value should not be changed by user code.</remarks>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.ParentFolder">
            <summary>
            The parent folder of this folder.
            </summary>
            <value>The parent folder of this folder or <c>null</c> if this folder
            does not have a parent.</value>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.AbsoluteBasePath">
            <summary>
            The absolute base path for the folder.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.BasePathString">
            <summary>
            The base path for the folder as string.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.SearchTimeout">
            <summary>
            Gets or sets the search timeout for the folder.
            </summary>
            <value>The search timeout value.</value>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.FolderElement">
            <summary>
            Gets the folder element.
            </summary>
            <value>The folder element.</value>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoGenBaseFolder.GetFolderElement(System.Boolean@)">
            <summary>
            Gets the folder element and a value indicating whether the folder element was cached.
            </summary>
            <param name="isCached">When this method returns, contains a value indicating whether
            the folder element was cached.</param>
            <returns>The folder element.</returns>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.FolderElementValid">
            <summary>
            Gets a value indicating whether the cached folder element is still valid.
            </summary>
            <value><c>true</c> if the cached folder element is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoGenBaseFolder.UseCache">
            <summary>
            Gets or sets a value indicating whether to cache the element corresponding to this folder.
            </summary>
            <value><c>true</c> if the folder should be cached; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoGenBaseFolder.ToString">
            <summary>
            Returns a string representation, i.e. the <see cref="P:Ranorex.Core.Repository.RepoGenBaseFolder.FullName"/>, of this instance.
            </summary>
            <returns>The <see cref="P:Ranorex.Core.Repository.RepoGenBaseFolder.FullName"/> of this instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoGenBaseFolder.GetMetaInfos">
            <summary>
            Returns a (non read-only!) dictionary of <see cref="T:System.String"/> key-value pairs
            specifying meta data for a report.
            </summary>
            <returns>
            A (non read-only!) dictionary of strings.
            </returns>
        </member>
        <member name="T:Ranorex.Core.Repository.RepoItemInfo">
            <summary>
            Contains information about a <see cref="T:Ranorex.Core.Repository.RepositoryItem"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.#ctor(Ranorex.Core.Repository.RepoGenBaseFolder,System.String,Ranorex.Core.RxPath,Ranorex.Duration,System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="parentFolder">The parent folder of the associated repository item.</param>
            <param name="name">The name of the associated repository item.</param>
            <param name="path">The path of the associated repository item.</param>
            <param name="searchTimeout">The search timeout of the associated repository item.</param>
            <param name="useEnsureVisible">The value set to <see cref="P:Ranorex.Adapter.UseEnsureVisible"/> of
            the adapter created for the associated repository item.</param>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.#ctor(Ranorex.Core.Repository.RepoGenBaseFolder,System.String,Ranorex.Core.RxPath,Ranorex.Duration,System.Nullable{System.Boolean},System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="parentFolder">The parent folder of the associated repository item.</param>
            <param name="name">The name of the associated repository item.</param>
            <param name="path">The path of the associated repository item.</param>
            <param name="searchTimeout">The search timeout of the associated repository item.</param>
            <param name="useEnsureVisible">The value set to <see cref="P:Ranorex.Adapter.UseEnsureVisible"/> of
            the adapter created for the associated repository item.</param>
            <param name="itemId">The id of the associated repository item.</param>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.#ctor(Ranorex.Core.Repository.RepoGenBaseFolder,System.String,Ranorex.Core.RxPath,Ranorex.Core.RxPath,Ranorex.Duration,System.Nullable{System.Boolean},System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="parentFolder">The parent folder of the associated repository item.</param>
            <param name="name">The name of the associated repository item.</param>
            <param name="path">The path of the associated repository item.</param>
            <param name="robustPath">The robust path of the associated repository item.</param>
            <param name="searchTimeout">The search timeout of the associated repository item.</param>
            <param name="useEnsureVisible">The value set to <see cref="P:Ranorex.Adapter.UseEnsureVisible"/> of
            the adapter created for the associated repository item.</param>
            <param name="itemId">The id of the associated repository item.</param>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.Name">
            <summary>
            Gets the name of the associated repository item.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.FullName">
            <summary>
            Gets the name of the associated repository item preceded by the names of all
            folders that are parents of this item in a namespace-like representation, i.e.
            "AppFolder.RootedFolder.Folder.Item".
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.Path">
            <summary>
            Gets the path of the associated repository item (relative to its parent folder).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.AbsolutePath">
            <summary>
            Gets the absolute path of the associated repository item.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.RobustPath">
            <summary>
            Gets the robust path of the associated repository item (relative to its parent folder).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.SearchTimeout">
            <summary>
            Gets the search timeout of the associated repository item (relative to its parent folder).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is negative.</exception>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.UseEnsureVisible">
            <summary>
            Gets the value set to <see cref="P:Ranorex.Adapter.UseEnsureVisible"/> of
            the adapter created for the associated repository item.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.ParentFolder">
            <summary>
            Gets the parent folder of the associated repository item.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Repository.RepoItemInfo.Children">
            <summary>
            Gets the children of this repository item.
            </summary>
            <value>
            A a read-only list containing the children of the repository item.
            </value>
            <remarks>You can use this property to traverse the repository at runtime.</remarks>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.WaitForNotExists(Ranorex.Duration)">
            <summary>
            Waits until the element for the associated repository item ceases to exist.
            </summary>
            <param name="waitTimeout">The time to wait for the element to cease to exist.</param>
            <exception cref="T:Ranorex.RanorexException">If the <paramref name="waitTimeout"/> is
            reached while waiting for the item to cease to exist.</exception>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.WaitForAttributeEqual(Ranorex.Duration,System.String,System.Object)">
            <summary>
            Waits until an element attribute of the associated repository item equals a specified value.
            </summary>
            <param name="waitTimeout">The time in ms to wait for the attribute to equal the specified value.</param>
            <param name="name">The name of the attribute to be validated.</param>
            <param name="value">The value that the attribute should equal.</param>
            <exception cref="T:Ranorex.RanorexException">If the associated item
            stops existing or if the timeout is reached.</exception>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.WaitForAttributeNotEqual(Ranorex.Duration,System.String,System.Object)">
            <summary>
            Waits until an element attribute of the associated repository item does not equal a specified value.
            </summary>
            <param name="waitTimeout">The time in ms to wait for the attribute to not equal the specified value.</param>
            <param name="name">The name of the attribute to be validated.</param>
            <param name="value">The value that the attribute should not equal.</param>
            <exception cref="T:Ranorex.RanorexException">If the associated item
            stops existing or if the timeout is reached.</exception>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.WaitForAttributeContains(Ranorex.Duration,System.String,System.Object)">
            <summary>
            Waits until an element attribute of the associated repository item contains a specified value.
            </summary>
            <param name="waitTimeout">The time in ms to wait for the attribute to contain the specified value.</param>
            <param name="name">The name of the attribute to be validated.</param>
            <param name="value">The value that the attribute should contain.</param>
            <exception cref="T:Ranorex.RanorexException">If the associated item
            stops existing or if the timeout is reached.</exception>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.WaitForAttributeNotContains(Ranorex.Duration,System.String,System.Object)">
            <summary>
            Waits until an element attribute of the associated repository item does not contain a specified value.
            </summary>
            <param name="waitTimeout">The time in ms to wait for the attribute to not contain the specified value.</param>
            <param name="name">The name of the attribute to be validated.</param>
            <param name="value"> The value that the attribute should not contain.</param>
            <exception cref="T:Ranorex.RanorexException">If the associated item
            stops existing or if the timeout is reached.</exception>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.WaitForExists(Ranorex.Duration)">
            <summary>
            Waits until the element for the associated repository item exists.
            </summary>
            <param name="waitTimeout">The time to wait for the element to exist.</param>
            <exception cref="T:Ranorex.RanorexException">If the timeout is
            reached while validating the attribute of the element or if the element does not exist.</exception>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.Exists">
            <summary>
            Returns a value specifying whether the element for the associated repository item exists.
            </summary>
            <returns><c>True</c> if the element for the associated repository item exists.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.Exists(Ranorex.Duration)">
            <summary>
            Returns a value specifying whether the element for the associated repository item exists
            within the specified timeout.
            </summary>
            <param name="waitTimeout">The timeout used to search/wait for the element. The value overrides the
            Effective Timeout for the repository item (for that call only).</param>
            <returns><c>True</c> if the element for the associated repository item exists.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.Exists``1(``0@)">
            <summary>
            Returns a value specifying whether the specified adapter for the associated
            repository item exists.
            </summary>
            <typeparam name="T">The type of adapter to create. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="adapter">When this method returns, the adapter instance for the associated repository
            item, if it could be created; otherwise a <c>null</c> reference.</param>
            <returns><c>True</c> if the specified adapter for the associated repository item exists.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.Exists``1(Ranorex.Duration,``0@)">
            <summary>
            Returns a value specifying whether the specified adapter for the associated
            repository item exists within the specified timeout.
            </summary>
            <typeparam name="T">The type of adapter to create. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="waitTimeout">The timeout used to search/wait for the element. The value overrides the
            Effective Timeout for the repository item (for that call only).</param>
            <param name="adapter">When this method returns, the adapter instance for the associated repository
            item, if it could be created; otherwise a <c>null</c> reference.</param>
            <returns><c>True</c> if the specified adapter for the associated repository item exists.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.FindAdapter``1">
            <summary>
            Finds and creates an adapter instance for the associated repository item.
            </summary>
            <typeparam name="T">The type of adapter to create. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>An adapter for the associated repository item </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">Throws exception if the element is not found.</exception>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.CreateAdapter``1(System.Boolean)">
            <summary>
            Creates an adapter instance for the associated repository item.
            </summary>
            <typeparam name="T">The type of adapter to create. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="throwException">A value indicating whether to throw an exception if creating
            an adapter failed.</param>
            <returns>An adapter for the associated repository item or <c>null</c> if creating an adapter
            failed and <paramref name="throwException"/> is <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.CreateAdapter``1(System.Boolean,Ranorex.Duration)">
            <summary>
            Creates an adapter instance for the associated repository item.
            </summary>
            <typeparam name="T">The type of adapter to create. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="throwException">A value indicating whether to throw an exception if creating
            an adapter failed.</param>
            <param name="waitTimeout">The timeout used to search/wait for the element. The value overrides the
            Effective Timeout for the repository item (for that call only).</param>
            <returns>An adapter for the associated repository item or <c>null</c> if creating an adapter
            failed and <paramref name="throwException"/> is <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.CreateAdapters``1">
            <summary>
            Creates adapter instances for all elements found for the associated repository item's path.
            </summary>
            <typeparam name="T">The type of adapters to create. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>A list of adapters for all elements found for the associated repository item's path.</returns>
            <remarks>The results of this method may depend on whether folders in the hierarchy use caching.</remarks>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.CreateAdapters``1(Ranorex.Duration)">
            <summary>
            Creates adapter instances for all elements found for the associated repository item's path.
            </summary>
            <typeparam name="T">The type of adapters to create. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="waitTimeout">The timeout used to search/wait for the elements. The value overrides the
            Effective Timeout for the repository item (for that call only).</param>
            <returns>A list of adapters for all elements found for the associated repository item's path.</returns>
            <remarks>The results of this method may depend on whether folders in the hierarchy use caching.</remarks>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.ToString">
            <summary>
            Returns a string representation, i.e. the <see cref="P:Ranorex.Core.Repository.RepoItemInfo.FullName"/>, of this instance.
            </summary>
            <returns>The <see cref="P:Ranorex.Core.Repository.RepoItemInfo.FullName"/> of this instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.GetMetaInfos">
            <summary>
            Returns a (non read-only!) dictionary of <see cref="T:System.String"/> key-value pairs
            specifying meta data for a report.
            </summary>
            <returns>
            A (non read-only!) dictionary of strings.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.GetImage(System.String)">
            <summary>
            Gets an image by ID.
            </summary>
            <param name="id">The ID of an image to get.</param>
            <returns>The image.</returns>
        </member>
        <member name="M:Ranorex.Core.Repository.RepoItemInfo.GetImage(System.String,System.Drawing.Rectangle)">
            <summary>
            Crops the given image by the specified ID and rectangle.
            </summary>
            <param name="id">The ID of an image to get.</param>
            <param name="cropRect">The bounds of the sub-image inside the image to return.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="T:Ranorex.Core.Repository.RepositoryFolderAttribute">
            <summary>
            Use to mark a property or class as a Ranorex repository folder.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Repository.RepositoryFolderAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Repository.RepositoryFolderAttribute.Guid"/>.</param>
        </member>
        <member name="P:Ranorex.Core.Repository.RepositoryFolderAttribute.Guid">
            <summary>
            The unique ID of the repository folder.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Repository.RepositoryItemAttribute">
            <summary>
            Use to mark a property as a Ranorex repository item.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Repository.RepositoryItemAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Repository.RepositoryItemAttribute.Guid"/>.</param>
        </member>
        <member name="P:Ranorex.Core.Repository.RepositoryItemAttribute.Guid">
            <summary>
            The unique ID of the repository item.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Repository.RepositoryItemInfoAttribute">
            <summary>
            Use to mark a property or class as a Ranorex repository element info item.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Repository.RepositoryItemInfoAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Repository.RepositoryItemInfoAttribute.Guid"/>.</param>
        </member>
        <member name="P:Ranorex.Core.Repository.RepositoryItemInfoAttribute.Guid">
            <summary>
            The unique ID of the repository item info.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Repository.RepositoryImageAttribute">
            <summary>
            Use to mark a property or method as a Ranorex repository element image item.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Repository.RepositoryImageAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Repository.RepositoryImageAttribute.Guid"/>.</param>
        </member>
        <member name="P:Ranorex.Core.Repository.RepositoryImageAttribute.Guid">
            <summary>
            The unique ID of the repository image item.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Tracing.CsvFileTraceWriter">
            <summary>
            PerfTrace writer which outputs to multiple CSV files.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Tracing.CsvFileTraceWriter.UnknownLogThresholdMs">
            <summary>
            Minimum time required for "unknown" event gaps to be added to the trace log.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.CsvFileTraceWriter.#ctor(System.String,System.String)">
            <summary>
            Creates a new CsvFileTraceWriter.
            </summary>
            <param name="outputDir">Base output directory or null for current dir.</param>
            <param name="separator">The separator character to use or null for comma.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.CsvFileTraceWriter.TraceRepoEntry(Ranorex.Core.Tracing.IPerfInterval,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Ranorex.Core.Tracing.CsvFileTraceWriter.TraceInput(Ranorex.Core.Tracing.IPerfInterval,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Ranorex.Core.Tracing.CsvFileTraceWriter.TraceMisc(Ranorex.Core.Tracing.IPerfInterval,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Ranorex.Core.Tracing.CsvFileTraceWriter.Initialize">
            <inheritdoc/>
        </member>
        <member name="T:Ranorex.Core.Tracing.IPerfInterval">
            <summary>
            Represents a performance timing interval.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Tracing.IPerfInterval.ElapsedMs">
            <summary>
            Number of milliseconds elapsed since the interval was started.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Tracing.IPerfInterval.EventStart">
            <summary>
            The start timestamp of the interval.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Tracing.IPerfInterval.RelatedActivity">
            <summary>
            The <see cref="T:Ranorex.Core.Reporting.Activity"/> related to this interval.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Tracing.ITraceWriter">
            <summary>
            Common interface for PerfTrace writers.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.ITraceWriter.Initialize">
            <summary>
            One-time lazy setup of the writer.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.ITraceWriter.TraceRepoEntry(Ranorex.Core.Tracing.IPerfInterval,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Trace repository timing information.
            </summary>
            <param name="interval">The event time interval.</param>
            <param name="name">Full repository entry name.</param>
            <param name="id">Repository entry id.</param>
            <param name="path">Absolute repository entry path.</param>
            <param name="timeout">Repository entry search timeout.</param>
            <param name="iters">Search iterations for repo searches with timeout.</param>
            <param name="lastSearchTime">Search time for last successful search iteration (ms).</param>
            <param name="success">Search success.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.ITraceWriter.TraceInput(Ranorex.Core.Tracing.IPerfInterval,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Trace input action information.
            </summary>
            <param name="interval">The event time interval.</param>
            <param name="device">The input device name (mouse, keyboard, touch, ..).</param>
            <param name="id">(Optional) Repository entry id.</param>
            <param name="name">(Optional) Repository entry name.</param>
            <param name="type">Input type (up, down, click, press, sequence, ..).</param>
            <param name="repeats">Number of input action repeats (if applicable).</param>
            <param name="inputTime">The nominal time for the input action.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.ITraceWriter.TraceMisc(Ranorex.Core.Tracing.IPerfInterval,System.String,System.String)">
            <summary>
            Trace misc action.
            </summary>
            <param name="interval">The event time interval.</param>
            <param name="type">Event type.</param>
            <param name="extra">Optional additional event information.</param>
        </member>
        <member name="T:Ranorex.Core.Tracing.PerfInterval">
            <summary>
            Represents a performance timing interval.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfInterval.Start">
            <summary>
            Creates and starts a new interval.
            </summary>
            <returns>The interval.</returns>
        </member>
        <member name="P:Ranorex.Core.Tracing.PerfInterval.ElapsedMs">
            <inheritdoc/>
        </member>
        <member name="P:Ranorex.Core.Tracing.PerfInterval.EventStart">
            <inheritdoc/>>
        </member>
        <member name="P:Ranorex.Core.Tracing.PerfInterval.RelatedActivity">
            <inheritdoc/>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfInterval.Restart">
            <summary>
            Restarts the interval timer and rebinds the current activity.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfInterval.Stop">
            <summary>
            Stops the interval timer.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfInterval.Resume">
            <summary>
             Resumes the interval timer, but does not rebind the current activity.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Tracing.PerfTimerContext">
            <summary>
            A nestable timer context where only the outermost context is timed.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTimerContext.#ctor">
            <summary>
            Creates a new PerfTimerContext. Intended to be used with 'using'.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTimerContext.Dispose">
            <summary>
            Disposes/Closes the current PerfTimerContext. Intended to be used with 'using'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Tracing.PerfTimerContext.IsActive">
            <summary>
            Returns <see langword="true"/> if a context is currently active.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Tracing.PerfTimerContext.LatestInterval">
            <summary>
            The current interval measured by this context. Use this with PerfTracing.TraceXXX() call to register timing information.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Tracing.PerfTracers">
            <summary>
            Enables/Disables PerfTracing for different categories.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Tracing.PerfTracing">
            <summary>
            Controls performance tracing settings for various Ranorex subsystems.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Tracing.PerfTracing.ActiveTracers">
            <summary>
            The currently active performance tracers.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTracing.SetupCsv(Ranorex.Core.Tracing.PerfTracers,System.String,System.String)">
            <summary>
            Setup and activate performance tracing using a CSV file.
            </summary>
            <param name="tracers">The tracers to activate.</param>
            <param name="baseDir">The base directory for the trace files.</param>
            <param name="csvSeparator">The separator character to use for CSV output.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTracing.Setup(Ranorex.Core.Tracing.ITraceWriter,Ranorex.Core.Tracing.PerfTracers)">
            <summary>
            Setup and activate performance tracing using a custom trace writer.
            </summary>
            <param name="customWriter">A custom trace writer implementing ITraceWriter.</param>
            <param name="tracers">The tracers to activate.</param>
        </member>
        <member name="P:Ranorex.Core.Tracing.PerfTracing.PreviousInterval">
            <summary>
            The most recent interval tracked by PerfTracing
            </summary>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTracing.TraceRepoItem(Ranorex.Core.Tracing.IPerfInterval,Ranorex.Core.Repository.RepoItemInfo,Ranorex.Duration,System.Int32,System.Boolean)">
            <summary>
            Traces performance information related to a repository item.
            </summary>
            <param name="interval">The performance interval to trace.</param>
            <param name="item">The repository item info to trace.</param>
            <param name="actualSearchTime">The actual time spent searching for item.</param>
            <param name="iters">Number of iterations needed for finding the item.</param>
            <param name="success">Whether the search operation was a success or not.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTracing.TraceRepoFolder(Ranorex.Core.Tracing.IPerfInterval,Ranorex.Core.Repository.RepoGenBaseFolder,Ranorex.Duration,System.Int32,System.Boolean)">
            <summary>
            Traces performance information related to a repository folder.
            </summary>
            <param name="interval">The performance interval to trace.</param>
            <param name="folder">The repository folder to trace.</param>
            <param name="actualSearchTime">The actual time spent searching for folder.</param>
            <param name="iters">Number of iterations needed for finding the folder.</param>
            <param name="success">Whether the search operation was a success or not.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTracing.TraceMouseInput(Ranorex.Core.Tracing.IPerfInterval,Ranorex.Core.IReportMetadata,System.String,System.Windows.Forms.MouseButtons,System.Int32,Ranorex.Duration)">
            <summary>
            Traces performance information related to a mouse input action.
            </summary>
            <param name="interval">The performance interval to trace.</param>
            <param name="reportMetadata">Report metadata related to to this input action
            (e.g. a <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> or <see cref="T:Ranorex.Core.Repository.RepoGenBaseFolder"/>.</param>
            <param name="type">The type of input action taken (e.g. click, down, move, ..)</param>
            <param name="buttons">The mouse buttons involved in the input action.</param>
            <param name="repeats">The number of repeats for this action (e.g. two for a double-click)</param>
            <param name="moveTime">The mouse move time configured for this action.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTracing.TraceKeyboardInput(Ranorex.Core.Tracing.IPerfInterval,Ranorex.Core.IReportMetadata,System.String,Ranorex.Duration)">
            <summary>
            Traces performance information related to a keyboard input action.
            </summary>
            <param name="interval">The performance interval to trace.</param>
            <param name="reportMetadata">Report metadata related to to this input action
            (e.g. a <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> or <see cref="T:Ranorex.Core.Repository.RepoGenBaseFolder"/>.</param>
            <param name="type">The type of input action taken (e.g. press, up, down, sequence, ..)</param>
            <param name="pressTime">The key press time configured for this action.</param>
        </member>
        <member name="M:Ranorex.Core.Tracing.PerfTracing.TraceMisc(Ranorex.Core.Tracing.IPerfInterval,System.String,System.String)">
            <summary>
            Traces performance information related to a generic action or event.
            </summary>
            <param name="interval">The performance interval to trace.</param>
            <param name="type">The type of action or event traced.</param>
            <param name="extra">Extra information pertaining to this event or action.</param>
        </member>
        <member name="T:Ranorex.Core.ScreenLocation">
            <summary>
            Needed to abstract the calculation of the actual screen coordinates from a location
            object in mouse and touch move operations.
            </summary>
            <remarks>
            E.g. locations involving image operations should only be evaluated once as the actual
            screenshot of an element could change when the mouse moves over it.
            For element locations, mouse/touch move operations may evaluate the screen position
            more than once to adapt for moving elements.
            </remarks>
        </member>
        <member name="T:Ranorex.Core.Path.PathBuildOptions">
            <summary>
            Settings which allow tweaking the PathBuildMode.StepCostReduce algorithm.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Path.PathBuildOptions.CostQuantile">
            <summary>
            Selects the quantile of elements which is chosen to be represented in a generated RxPath expression.
            Setting this to 1/2 means that the 'better' half of elements is used in the better.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Path.PathBuildOptions.CapCostFactor">
            <summary>
            Determines how strongly capability weights are factored into the cost calculation per element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Path.PathBuildOptions.SiblingCostFactor">
            <summary>
            Determines how strongly log(sibling count) is factored into the cost calculation per element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Path.PathBuildOptions.AttributeCostFactor">
            <summary>
            Determines how strongly attribute weights are factored into the cost calculation per element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Path.PathBuildOptions.DefaultCapCost">
            <summary>
            Default cost for capabilities with no costs defined.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Path.PathBuildOptions.CapCost">
            <summary>
            Individual cost per capability.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Path.PathBuildOptions.CreateFromXmlNode(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Ranorex internal use.
            </summary>
            <param name="node">XmlNode.</param>
            <returns>PathBuildOptions.</returns>
        </member>
        <member name="M:Ranorex.Core.Path.PathBuildOptions.CreateFromConfig(Ranorex.Core.Configuration)">
            <summary>
            Ranorex internal use.
            </summary>
            <param name="cfg">Configuration.</param>
            <returns>PathBuildOptions.</returns>
        </member>
        <member name="M:Ranorex.Core.Path.PathBuildOptions.CreateFromDefaults">
            <summary>
             Ranorex internal use.
            </summary>
            <returns>PathBuildOptions.</returns>
        </member>
        <member name="M:Ranorex.Core.Path.PathBuildOptions.ToXmlNode">
            <summary>
            Ranorex internal use.
            </summary>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:Ranorex.Core.Path.PathBuildOptions.SetToConfig(Ranorex.Core.Configuration)">
            <summary>
            Ranorex internal use.
            </summary>
            <param name="cfg">Configuration.</param>
        </member>
        <member name="T:Ranorex.Core.AttributeDescriptor">
            <summary>
            A descriptor for element attributes.
            </summary>
        </member>
        <member name="M:Ranorex.Core.AttributeDescriptor.#ctor(System.String,System.String,System.Type,System.Int32)">
            <summary>
            Creates a new (read-only) element attribute descriptor.
            </summary>
            <param name="name">The name of the attribute. This should be CamelCased.</param>
            <param name="description">A short description of the attribute.</param>
            <param name="valueType">The type of the attribute. This type should provide a useful ToString() implementation.</param>
            <param name="weight">The weight of this attribute in the context of the element.
            If the weight is &lt;100 it is not used in the RanorexPath. </param>
            <remarks>
            The created attribute descriptor is read-only and its <see cref="P:Ranorex.Core.AttributeDescriptor.TruncationLength"/> is set to <c>Int32.MaxValue</c>.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.AttributeDescriptor.#ctor(System.String,System.String,System.Type,System.Int32,System.Boolean)">
            <summary>
            Creates a new element attribute descriptor.
            </summary>
            <param name="name">The name of the attribute. This should be CamelCased.</param>
            <param name="description">A short description of the attribute.</param>
            <param name="valueType">The type of the attribute. This type should provide a useful ToString() implementation.</param>
            <param name="weight">The weight of this attribute in the context of the element.
            If the weight is &lt;100 it is not used in the RanorexPath. </param>
            <param name="readOnly">Specifies whether the attribute value is read-only.</param>
            <remarks>
            The <see cref="P:Ranorex.Core.AttributeDescriptor.TruncationLength"/> of the created attribute descriptor is set to <c>Int32.MaxValue</c>.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.AttributeDescriptor.#ctor(System.String,System.String,System.Type,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a new element attribute descriptor.
            </summary>
            <param name="name">The name of the attribute. This should be CamelCased.</param>
            <param name="description">A short description of the attribute.</param>
            <param name="valueType">The type of the attribute. This type should provide a useful ToString() implementation.</param>
            <param name="weight">The weight of this attribute in the context of the element.
            If the weight is &lt;100 it is not used in the RanorexPath. </param>
            <param name="readOnly">Specifies whether the attribute value is read-only.</param>
            <param name="truncationLength">Specifies the <see cref="P:Ranorex.Core.AttributeDescriptor.TruncationLength"/> for this instance.</param>
        </member>
        <member name="P:Ranorex.Core.AttributeDescriptor.ValueType">
            <summary>
            The type of the attribute value. The type should provide a useful ToString() implementation, and additionally,
            a useful explicit cast from <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.AttributeDescriptor.ResolveWeight(Ranorex.Core.Element)">
            <summary>
            Resolves the weight.
            </summary>
            <param name="elem">The element to resolve the weight for. Can be null.</param>
            <returns>The dynamic weight of the attribute.</returns>
            <remarks>
            A weight smaller than 100 is not used in RanorexPath and should be used for transient values.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.AttributeDescriptor.ReadOnly">
            <summary>
            Gets a value specifying if the attribute value is read-only.
            </summary>
        </member>
        <member name="P:Ranorex.Core.AttributeDescriptor.TruncationLength">
            <summary>
            Gets or sets the maximum length of the string representation of an attribute value
            when used in RxPaths. If the length of the string representation of the attribute value
            is greater than this value, the string representation is truncated at the next word boundary
            (extending truncation length up to 100% of the configured value) and converted to a StartsWith expression.
            </summary>
            <value>The maximum length of the string representation of the attribute value when
            used in RxPaths. Default is <c>int.MaxValue</c>, i.e. by default truncating is disabled.</value>
            <remarks>If you set this value to <c>-1</c>, the <see cref="P:Ranorex.Core.RxPath.MaxMatchTextLen"/> will
            be used as truncation length for this attribute.</remarks>
        </member>
        <member name="P:Ranorex.Core.AttributeDescriptor.Container">
            <summary>
            Gets the capability containing this attribute.
            </summary>
        </member>
        <member name="E:Ranorex.Core.AttributeDescriptor.WeightResolving">
            <summary>
            Occurs when the weight for this attribute needs to be resolved.
            Intended to be used by plugins to dynamically change weights based on context.
            </summary>
        </member>
        <member name="E:Ranorex.Core.AttributeDescriptor.GlobalWeightResolving">
            <summary>
            Occurs when the weight for any registered attribute needs to be resolved.
            Intended to be used by plugins to dynamically change weights based on context.
            </summary>
        </member>
        <member name="T:Ranorex.Core.AttributeDescriptor.WeightResolvingEventArgs">
            <summary>
            Event args for the WeightResolving event. The Weight property can be dynamically changed be the handler.
            </summary>
        </member>
        <member name="M:Ranorex.Core.AttributeDescriptor.WeightResolvingEventArgs.#ctor(Ranorex.Core.Element,Ranorex.Core.AttributeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.AttributeDescriptor.WeightResolvingEventArgs"/> class.
            </summary>
            <param name="elem">The element the weight for the given attribute descriptor needs to be resolved.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="P:Ranorex.Core.AttributeDescriptor.WeightResolvingEventArgs.Element">
            <summary>
            Gets the element.
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:Ranorex.Core.AttributeDescriptor.WeightResolvingEventArgs.Descriptor">
            <summary>
            Gets the descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:Ranorex.Core.AttributeDescriptor.WeightResolvingEventArgs.Weight">
            <summary>
            Gets or sets the weight.
            </summary>
            <value>The weight.</value>
        </member>
        <member name="T:Ranorex.Core.CodeGeneration">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_CodeModule_Replay_CS">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_CodeModule_Replay_VB">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Recording_CS">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Recording_UserCode_CS">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Recording_UserCode_VB">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Recording_UserCodeMethod_CS">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Recording_UserCodeMethod_VB">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Recording_VB">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Replay_CS">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Replay_VB">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Repository_CS">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.CodeGen_Repository_VB">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Ranorex.Core.CodeGeneration.Net40_Executable">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Ranorex.Core.CommandLine">
            <summary>
            Represents command line arguments passed to an application.
            </summary>
        </member>
        <member name="M:Ranorex.Core.CommandLine.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Ranorex.Core.CommandLine"/>, parsing the specified command line argument string.
            </summary>
            <param name="cmdLine">The command line string to parse.</param>
            <exception cref="T:Ranorex.RanorexException">If parsing the <paramref name="cmdLine"/> fails.</exception>
        </member>
        <member name="P:Ranorex.Core.CommandLine.EnvironmentCommandLine">
            <summary>
            Gets a command line instance for the <see cref="T:System.Environment"/>.<see cref="P:System.Environment.CommandLine"/>.
            </summary>
            <exception cref="T:Ranorex.RanorexException">If parsing the
            <see cref="T:System.Environment"/>.<see cref="P:System.Environment.CommandLine"/> fails.</exception>
        </member>
        <member name="P:Ranorex.Core.CommandLine.ParameterLists">
            <summary>
            A dictionary of lists of command line parameters.<br/>
            For example, the command line /include:a /include:b would result in the dictionary ["include" -> "a", "b"]
            </summary>
        </member>
        <member name="P:Ranorex.Core.CommandLine.Parameters">
            <summary>
            A name-value dictionary of command line parameters.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CommandLine.Arguments">
            <summary>
            A list of non-parameter command line arguments.
            </summary>
        </member>
        <member name="M:Ranorex.Core.CommandLine.ToString">
            <summary>
            Converts back to a command line string.
            Arguments are listed before parameters.
            Both sorted alphabetically to always produce deterministic result.
            </summary>
            <returns>Alphabetically sorted command line string.</returns>
        </member>
        <member name="T:Ranorex.Core.Distance">
            <summary>
            Represents an proportional or fixed distance in pixels.
            </summary>
            <remarks>
            A fixed distance specifies the distance in pixels. The proportional distance is specified as the percentage of an elements width
            or height. Proportional distances are only useful when they are used in conjunction with an <see cref="T:Ranorex.Core.Recorder.Touch.GestureDirection"/>
            to calculate the fixed distance based on some element rectangle.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Distance.FixedDistance">
            <summary>
            Gets the fixed distance in pixels. Throws an exception if the distance is a proportional distance.
            </summary>
            <value>The fixed distance.</value>
            <exception cref="T:System.InvalidOperationException">If the location is not a fixed location.</exception>
        </member>
        <member name="P:Ranorex.Core.Distance.ProportionalDistance">
            <summary>
            Gets the proportional distance. Throws an exception if the distance is a fixed distance.
            </summary>
            <value>The proportional distance.</value>
            <exception cref="T:System.InvalidOperationException">If the location is not a proportional location.</exception>
        </member>
        <member name="P:Ranorex.Core.Distance.IsFixedDistance">
            <summary>
            Gets a value indicating whether the this instance is a fixed e.g. has a fixed pixel value.
            </summary>
            <value><c>true</c> if this instance is fixed; otherwise <c>false</c></value>
        </member>
        <member name="M:Ranorex.Core.Distance.#ctor(System.Int32)">
            <summary>
            Creates a new fixed distance.
            </summary>
            <param name="fixedDistance">The fixed distance in pixels</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If fixedDistance is less than zero.</exception>
        </member>
        <member name="M:Ranorex.Core.Distance.#ctor(System.Double)">
            <summary>
            Creates a new proportional distance.
            </summary>
            <param name="proportionalDistance">The proportional distance. Can exceed 1.0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If proportionalDistance is less than zero.</exception>
        </member>
        <member name="M:Ranorex.Core.Distance.op_Equality(Ranorex.Core.Distance,Ranorex.Core.Distance)">
            <summary>
            Compares two distances if they are equal.
            </summary>
            <param name="d1">First distance</param>
            <param name="d2">Second distance</param>
            <returns><c>true</c> if both distances are equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:Ranorex.Core.Distance.op_Inequality(Ranorex.Core.Distance,Ranorex.Core.Distance)">
            <summary>
            Compares two distances if they are not equal.
            </summary>
            <param name="d1">First distance</param>
            <param name="d2">Second distance</param>
            <returns><c>true</c> if the distances are not equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:Ranorex.Core.Distance.Equals(System.Object)">
            <summary>
            Compares two distances if they are equal.
            </summary>
            <param name="obj">The second distance.</param>
            <returns><c>true</c></returns>
        </member>
        <member name="M:Ranorex.Core.Distance.GetHashCode">
            <summary>
            Returns a integer hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Ranorex.Core.Distance.ToString">
            <summary>
            Returns a string representation of the distance.
            </summary>
            <returns>Returns the fixed distance e.g. "200" or the proportional distance with format '#.0##' e.g. ".25".</returns>
        </member>
        <member name="M:Ranorex.Core.Distance.CalculateFixedDistance(System.Drawing.Rectangle,Ranorex.Core.Recorder.Touch.GestureDirection)">
            <summary>
            Calculates the fixed distance for the specified element rectangle and the given angle.
            </summary>
            <remarks>
            If the distance is already a fixed distance, simply the fixed distance value will be returned. The given element rectangle
            and the gesture angle will not affect the distance. These will only affect the distance, if the distance is a proportional
            distance. The function will determine by the given angle if the width or the height of the element rectangle will be used
            to calculate the distance. The height will be used if 225 &lt; angle &lt;= 315 or 45 &lt; angle &lt;= 135; otherwise the width
            will be used.
            </remarks>
            <param name="elementRectangle">The pixel based rectangle to calculate the fixed distance for.</param>
            <param name="angle">The angle that determines if width or height will be used for the calculation.</param>
            <returns>The fixed distance in pixels (rounded).</returns>
        </member>
        <member name="M:Ranorex.Core.Distance.Parse(System.String)">
            <summary>
            Converts a string representation of a distance to its distance equivalent.
            </summary>
            <param name="s">A string containing the distance to convert.</param>
            <returns>A new distance parsed from the given string</returns>
            <exception cref="T:System.ArgumentNullException">If the given string is null.</exception>
            <exception cref="T:System.ArgumentException">If the given string is not a numeric type (int or double).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given string is a negative number.</exception>
        </member>
        <member name="M:Ranorex.Core.Distance.TryParse(System.String,Ranorex.Core.Distance@)">
            <summary>
            Converts a string representation of a distance to its distance equivalent. The return value indicates whether the conversion
            succeeded.
            </summary>
            <param name="s">A string containing the distance to convert.</param>
            <param name="d">The parsed distance</param>
            <returns>
            When this method returns, 'd' contains the distance equivalent if the conversion succeeded, or
            Distance(0) if the conversion failed. The conversion fails if parameter 's' is null, <see cref="F:System.String.Empty" />,
            it has a invalid format or the given string represents a negative number.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the given string is null.</exception>
            <exception cref="T:System.ArgumentException">If the given string is not a numeric type (int or double).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given string is a negative number.</exception>
        </member>
        <member name="M:Ranorex.Core.Distance.op_Implicit(System.Int32)~Ranorex.Core.Distance">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to a <see cref="T:Ranorex.Core.Distance"/>.
            </summary>
            <param name="fixedDistance">The fixed distance in pixels.</param>
            <returns>A new fixed distance instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Distance.FromFixedDistance(System.Int32)">
            <summary>
            Converts from <see cref="T:System.Int32"/> to a <see cref="T:Ranorex.Core.Distance"/>.
            </summary>
            <param name="fixedDistance">The fixed distance in pixels.</param>
            <returns>A new fixed distance instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Distance.op_Implicit(System.Double)~Ranorex.Core.Distance">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to a <see cref="T:Ranorex.Core.Distance"/>.
            </summary>
            <param name="proportionalDistance">The proportional distance.</param>
            <returns>A new proportional distance instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Distance.FromProportionalDistance(System.Double)">
            <summary>
            Converts from <see cref="T:System.Double"/> to a <see cref="T:Ranorex.Core.Distance"/>.
            </summary>
            <param name="proportionalDistance">The proportional distance.</param>
            <returns>A new proportional distance instance.</returns>
        </member>
        <member name="T:Ranorex.Core.Distance.DistanceConverter">
            <summary>
            Converts <see cref="T:Ranorex.Core.Distance"/> instances from and to <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Distance.DistanceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Return <c>true</c> for <see cref="T:System.String"/> type.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Distance.DistanceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Creates a <see cref="T:Ranorex.Core.Distance"/> instance from a <see cref="T:System.String"/>.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Distance.DistanceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets standard <see cref="T:Ranorex.Core.Distance"/> values.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used
            to extract additional information about the environment from which this converter is invoked. This parameter or
            properties of this parameter can be null.
            </param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values,
            or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Distance.DistanceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns <c>true</c>.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <returns>
            <c>true</c> if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to
            find a common set of values the object supports; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Ranorex.Core.Testing.Interfaces.IRunnable">
            <summary>
            All TestSuiteEntry classes which can be executed implement this interface.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.Interfaces.IRunnable.Run(Ranorex.Core.Data.DataContext,System.Boolean)">
            <summary>
            The execution method.
            </summary>
            <param name="parentDataContext">The parent data context.</param>
            <param name="childSkip">if set to <c>true</c> child node execution is skipped.</param>
            <returns>TestResult.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.Interfaces.ISerializableToXmlNodeExtensions.ToXml(Ranorex.Core.Testing.Interfaces.ISerializableToXmlNode)">
             Needs to be TestSuiteNode name because of the weird implementation details of
             <see cref="T:Ranorex.Core.Testing.DataBindingManager"/>'s weird implementation of DeserializeFromXml.
             Maybe we can find a better non hacky way later.
        </member>
        <member name="T:Ranorex.Core.Testing.IIterable">
            <summary>
            Represents the run iteration interface of a <see cref="T:Ranorex.Core.Testing.TestSuiteEntry"/>
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.IIterable.RunIterationCount">
            <summary>
            The number of times to run the <see cref="T:Ranorex.Core.Testing.TestSuiteEntry"/>.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.SmartFolderNode">
            <summary>
            Provides functionality to create, load, and run a smart folder.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.TestCaseNode">
            <summary>
            Provides functionality to create, load, and run a test case.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.DataRange">
            <summary>
            Gets the current data range.
            </summary>
            <value>The current data range.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.DataContext">
            <summary>
            Gets the data context of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' data context.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.Parameters">
            <summary>
            Gets the parameters of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' parameters.</value>
        </member>
        <member name="M:Ranorex.Core.Testing.TestCaseNode.GetRangedDataRowCount">
            <summary>
            Gets the ranged row count of the current data range.
            </summary>
            <value>The ranged row count of the current data range.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.IsTestCase">
            <summary>
            Gets a value indicating whether this container is a 'test case'.
            </summary>
            <value>
                <c>true</c> if this container is a 'test case'; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.IsSmartFolder">
            <summary>
            Gets a value indicating whether this container is a 'smart folder'.
            </summary>
            <value>
                <c>true</c> if this container is a 'smart folder'; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.Checked">
            <summary>
            Gets or sets a value indicating whether this 'test case' or 'smart folder' is checked in the current run configuration.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.Status">
            <summary>
            Gets the current status of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' status.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.HasWarnings">
            <summary>
            Gets a value indicating whether this 'test case' or 'smart folder' has warnings.
            </summary>
            <value>
                <c>true</c> if this 'test case' or 'smart folder' has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.ParentContainer">
            <summary>
            Gets the parent <see cref="T:Ranorex.Core.Testing.ITestContainer"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.RunIterationCount">
            <summary>
            The number of time to run the <see cref="T:Ranorex.Core.Testing.ITestContainer"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.DisplayRetryCount">
            <summary>
            The number of time to retry a run.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestCaseNode.RunRetryCount">
            <summary>
            The number of time to retry a run.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.DataBindingManager.RefreshDataBindingsDomContentChanged">
            Data Binding related functions
        </member>
        <member name="P:Ranorex.Core.Testing.ReportSettings.PlaceScreenshotsInFolder">
            <summary>
            This property is only needed for backwards
            compatibility with Automation Helpers.
            Since a screenshot folder is always used,
            this property is no longer settable and always returns true.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.ReportSettings.ReportTime">
            <summary>
            Gets or sets a value specifying how timestamps are calculated in reports.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.TestSuite">
            <summary>
            Provides functionality to create, load, save, and run a test suite.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.Current">
            <summary>
            Gets the current test suite.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.CurrentTestContainer">
            <summary>
            Gets the current 'test case' or 'smart folder'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.WorkingDirectory">
            <summary>
            Gets or sets the working directory for the test suite.
            </summary>
            <value>
            The working directory.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.Ranorex#Core#Testing#ITestSuite#CurrentTestContainer">
            <summary>
            Gets the current 'test case' 'smart folder'.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.ReportSettings">
            <summary>
            Gets all the settings for the Report.
            </summary>
            <value>The report settings.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.ShowProgressDialog">
             Fields for report settings, which are stored on a per-testsuite base
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.RunConfigurations">
            <summary>
            Gets the run configurations of the test suite.
            </summary>
            <value>The run configurations.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.SelectedRunConfig">
            <summary>
            Gets the selected run configuration of the test suite.
            </summary>
            <value>The selected run configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.DataConnectorCaches">
            <summary>
            Gets the data connectors of the test suite.
            </summary>
            <value>The test suite data connectors.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.Parameters">
            <summary>
            Gets the parameters of the test suite.
            </summary>
            <value>The test suite parameters.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuite.RunLabel">
            <summary>
            Gets the run label of the test suite.
            </summary>
            <value>The test suite run label.</value>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuite.GetTestSuitesDirectory">
            <summary>
            Gets the default path for test suits.
            </summary>
            <returns>The default path for test suits.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuite.GetTestContainer(System.String)">
            <summary>
            Gets the 'test case' or 'smart folder' with the specified name from the test suite.
            </summary>
            <param name="name">The test 'test case' or 'smart folder'.</param>
            <returns>The 'test case' or 'smart folder' with the specified name or <c>null</c> if there is no
            test container with such a name within the test suite.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuite.GetAllTestSuiteEntries">
            misc functionality
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuite.ToXmlDoc">
            xml related functions
        </member>
        <member name="T:Ranorex.Core.Testing.TestSuite.TestSuitePostChildDeserializationHelpers">
            <summary>
            Hack class to work around some quirks of our test suite format (the test suite is not the root node of our test suite file)
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.DataRange">
            <summary>
            Specifies the minimum range and maximum range of the used <see cref="T:Ranorex.Core.Data.DataContext"/> instance.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Testing.DataRange"/>.class.
            </summary>
            <param name="minRange">The minimum range.</param>
            <param name="maxRange">The maximum range.</param>
        </member>
        <member name="P:Ranorex.Core.Testing.DataRange.FullRange">
            <summary>
            Returns a <see cref="T:Ranorex.Core.Testing.DataRange"/> instance that will select all available datarows.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.DataRange.MinRange">
            <summary>
            Gets or sets the minimum range.
            </summary>
            <value>The minimum range.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.DataRange.MaxRange">
            <summary>
            Gets or sets the maximum range.
            </summary>
            <value>The maximum range.</value>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.TryParse(System.String)">
            <summary>
            Tries to parse a DataRange from a given string. This method never throws an exception.
            </summary>
            <param name="s">The string to parse the datarange from.</param>
            <returns>The parsed <see cref="T:Ranorex.Core.Testing.DataRange"/> instance if parsing succeeded, null otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.TryCreateFromIndices(System.Int32[])">
            <summary>
            Creates a DataRange from a set of indices. The method will check if the indices represent
            a contineous range and if so will return this range. E.g. '10,11,12' will return the range
            '10-12' but the indices '10,12' will return null.
            </summary>
            <param name="indices">The indices that should be used to create the <see cref="T:Ranorex.Core.Testing.DataRange"/> instance.</param>
            <returns>A new <see cref="T:Ranorex.Core.Testing.DataRange"/> instance if the indices represent a contineous range, null otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Ranorex.Core.Testing.DataRange"/> from a given string.
            </summary>
            <param name="s">The string to parse the datarange from.</param>
            <returns>A new <see cref="T:Ranorex.Core.Testing.DataRange"/> instance if parsing succeeded, null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="s"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="s"/> is empty or has an invalid format that doesnt represent a <see cref="T:Ranorex.Core.Testing.DataRange"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.ToString">
            <summary>
            Create a string representation of the DataRange.
            </summary>
            <returns>The string represenation fo the DataRange, e.g. '10' or '10-22'</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.Equals(Ranorex.Core.Testing.DataRange)">
            <summary>
            Compares the <see cref="T:Ranorex.Core.Testing.DataRange"/> to another <see cref="T:Ranorex.Core.Testing.DataRange"/>.
            </summary>
            <param name="range">The <see cref="T:Ranorex.Core.Testing.DataRange"/> to compare to.</param>
            <returns>True if the instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Ranorex.Core.Testing.DataRange"/> to another object instance.
            </summary>
            <param name="obj">The <see cref="T:Ranorex.Core.Testing.DataRange"/> to compare to.</param>
            <returns>True if <paramref name="obj"/> is of type <see cref="T:Ranorex.Core.Testing.DataRange"/> and the instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRange.GetHashCode">
            <summary>
            Returnes a hashcode for this object instance.
            </summary>
            <returns>A hashcode for this object instance.</returns>
        </member>
        <member name="T:Ranorex.Core.Testing.DataRangeSet">
            <summary>
            A class that represents a collection of <see cref="T:Ranorex.Core.Testing.DataRange"/>. This class enables to
            specify a set of ranges e.g. '10-20,33,45-80,90'.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.#ctor">
            <summary>
            Instantiates a new <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> that will select all available rows.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.#ctor(System.Collections.Generic.IList{Ranorex.Core.Testing.DataRange})">
            <summary>
            Instantiates a new <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> with the given ranges.
            </summary>
            <param name="ranges">The ranges that will be contained in this set.</param>
            <exception cref="T:System.ArgumentNullException">If the ranges parameter is null.</exception>
        </member>
        <member name="P:Ranorex.Core.Testing.DataRangeSet.Ranges">
            <summary>
            The ranges this set contains.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.DataRangeSet.MinRange">
            <summary>
            The minimum value of any range contained in the set.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.DataRangeSet.MaxRange">
            <summary>
            The maximum value of any range contained in the set.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.TryParse(System.String)">
            <summary>
            Tries to parse a new <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> from a given string. This method never throws an exception.
            </summary>
            <param name="s">The string to parse the <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> from.</param>
            <returns>A new <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> if parsing succeeded, null otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.TryCreateFromIndices(System.Int32[])">
            <summary>
            Will create a new <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> from a list of given row indices. E.g. the indices '10,11,12,15,23,24' will
            result in the <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> '10-12,15,23-24'.
            </summary>
            <param name="indices">The indices to create the <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> from.</param>
            <returns>A new <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> if <paramref name="indices"/> represents a valid range set, null otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.Parse(System.String)">
            <summary>
            Parse a <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> from a given string. Valid strings are e.g. '10,20', '10-20,30-40' or '10,20,30,40-50,60-90,2'.
            </summary>
            <param name="s">The string to parse the <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> from.</param>
            <returns>A new <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> instance that contains the ranges parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="s"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="s"/> is empty or not a valid DataRangeSet string.</exception>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.Equals(Ranorex.Core.Testing.DataRangeSet)">
            <summary>
            Compares two data range sets if they are equal. Two range sets are equal if they contain the same ranges. The order of the ranges doesn't matter.
            </summary>
            <param name="drs">The <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> to compare to.</param>
            <returns>True if the ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> to another object instance. Two ranges are equal if the contain the same ranges. The order of the ranges doesn't matter.
            </summary>
            <param name="obj">The object instance to compare to.</param>
            <returns>True if the given object is an <see cref="T:Ranorex.Core.Testing.DataRangeSet"/> and it is equal to this instance, false otherwise.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.GetHashCode">
            <summary>
            Returns a hash code for the <see cref="T:Ranorex.Core.Testing.DataRangeSet" /> instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Ranorex.Core.Testing.DataRangeSet"/>, e.g. '10-20,32,54,60-920'.
            </summary>
            <returns>A string representation of the <see cref="T:Ranorex.Core.Testing.DataRangeSet"/>.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.DataRangeSet.Contains(System.Int32)">
            <summary>
            Tells if a given row is contained in the current <see cref="T:Ranorex.Core.Testing.DataRangeSet"/>.
            </summary>
            <param name="index">The row to check for.</param>
            <returns>True if the row is contained within one of the contained ranges, false otherwise.</returns>
        </member>
        <member name="T:Ranorex.Core.Testing.ITestContainer">
            <summary>
            Represents a 'test case' or 'smart folder' within a test suite (see <see cref="T:Ranorex.Core.Testing.ITestSuite"/>).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.Name">
            <summary>
            Gets the name of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' name.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.DataContext">
            <summary>
            Gets the data context of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' data context.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.Status">
            <summary>
            Gets the current status of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' status.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.Id">
            <summary>
            Gets the id of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' id.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.Parameters">
            <summary>
            Gets the parameters of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' parameters.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.HasWarnings">
            <summary>
            Gets a value indicating whether this 'test case' or 'smart folder' has warnings.
            </summary>
            <value>
            <c>true</c> if this 'test case' or 'smart folder' has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.DataRange">
            <summary>
            Gets the current data range.
            </summary>
            <value>The current data range.</value>
        </member>
        <member name="M:Ranorex.Core.Testing.ITestContainer.GetRangedDataRowCount">
            <summary>
            Gets the ranged row count of the current data range.
            </summary>
            <value>The ranged row count of the current data range.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.Checked">
            <summary>
            Gets or sets a value indicating whether this 'test case' or 'smart folder' is checked in the current run configuration.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.IsTestCase">
            <summary>
            Gets a value indicating whether this container is a 'test case'.
            </summary>
            <value>
            <c>true</c> if this container is a 'test case'; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.IsSmartFolder">
            <summary>
            Gets a value indicating whether this container is a 'smart folder'.
            </summary>
            <value>
            <c>true</c> if this container is a 'smart folder'; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestContainer.ParentContainer">
            <summary>
            Gets the parent <see cref="T:Ranorex.Core.Testing.ITestContainer"/>.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.IModule">
            <summary>
            Represents a module within a test (see <see cref="T:Ranorex.Core.Testing.ITestContainer"/>).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.IModule.Name">
            <summary>
            Gets the name of the module.
            </summary>
            <value>The module name.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.IModule.HasWarnings">
            <summary>
            Gets a value indicating whether this instance has warnings.
            </summary>
            <value>
                <c>true</c> if this instance has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ranorex.Core.Testing.ReportTimeOption">
            <summary>
            Defines how timestamps are calculated in reports.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Testing.ReportTimeOption.RelativeToTestSuiteStartTime">
            <summary>
            Relative to the time the test suite started
            </summary>
        </member>
        <member name="F:Ranorex.Core.Testing.ReportTimeOption.RelativeToTestModuleStartTime">
            <summary>
            Relative to the time the module started
            </summary>
        </member>
        <member name="F:Ranorex.Core.Testing.ReportTimeOption.WallClock">
            <summary>
            Wall clock time
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.ITestSuite">
            <summary>
            Represents a test suite.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.Name">
            <summary>
            Gets the name of the test suite.
            </summary>
            <value>The test suite name.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.RunConfigurations">
            <summary>
            Gets the run configurations of the test suite.
            </summary>
            <value>The run configurations.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.SelectedRunConfig">
            <summary>
            Gets the selected run configuration of the test suite.
            </summary>
            <value>The selected run configuration.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.DataConnectorCaches">
            <summary>
            Gets the data connectors of the test suite.
            </summary>
            <value>The test suite data connectors.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.Parameters">
            <summary>
            Gets the parameters of the test suite.
            </summary>
            <value>The test suite parameters.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.RunLabel">
            <summary>
            Gets the run label of the test suite.
            </summary>
            <value>The test suite run label.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.ReportSettings">
            <summary>
            Gets all the settings for the Report.
            </summary>
            <value>The report settings.</value>
        </member>
        <member name="M:Ranorex.Core.Testing.ITestSuite.GetTestContainer(System.String)">
            <summary>
            Gets the 'test case' or 'smart folder' with the specified name from the test suite.
            </summary>
            <param name="name">The test 'test case' or 'smart folder'.</param>
            <returns>The 'test case' or 'smart folder' with the specified name or <c>null</c> if there is no
            test container with such a name within the test suite.</returns>
        </member>
        <member name="P:Ranorex.Core.Testing.ITestSuite.CurrentTestContainer">
            <summary>
            Gets the current test case.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.TestModuleActivator">
            <summary>
            Provides functionality to register and resolve factory methods to create
            <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances with a specific unique ID and/or name from
            assemblies.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.TestModuleActivator.TestModuleFactoryMethod">
            <summary>
            A delegate to a factory method returning a new <see cref="T:Ranorex.Core.Testing.ITestModule"/> instance.
            </summary>
            <returns>A new <see cref="T:Ranorex.Core.Testing.ITestModule"/> instance.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleActivator.IsSystemOrRanorexAssembly(System.String)">
            <summary>
            Determines whether the path to an assembly is a System or Ranorex assembly.
            </summary>
            <param name="assemblyPath">The path to the assembly to inspect.</param>
            <returns><c>true</c> if the <paramref name="assemblyPath"/> is a System or Ranorex assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleActivator.Register(System.String,Ranorex.Core.Testing.TestModuleActivator.TestModuleFactoryMethod)">
            <summary>
            Registers a new factory method that creates <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances
            with the specified module GUID.
            </summary>
            <param name="moduleGuid">The module GUID of the <see cref="T:Ranorex.Core.Testing.ITestModule"/> instance
            created by the specified factory method.</param>
            <param name="factoryMethod">The factory method that creates <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances
            with the specified <paramref name="moduleGuid"/>.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleActivator.Register(System.String,Ranorex.Core.Testing.TestModuleActivator.TestModuleFactoryMethod,Ranorex.Core.Testing.ModuleType)">
            <summary>
            Registers a new factory method that creates <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances
            with the specified module GUID.
            </summary>
            <param name="moduleGuid">The module GUID of the <see cref="T:Ranorex.Core.Testing.ITestModule"/> instance
            created by the specified factory method.</param>
            <param name="factoryMethod">The factory method that creates <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances
            with the specified <paramref name="moduleGuid"/>.</param>
            <param name="moduleType">The type of the module created by the factory method.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleActivator.Register(System.String,Ranorex.Core.Testing.TestModuleActivator.TestModuleFactoryMethod,Ranorex.Core.Testing.ModuleType,System.Int32)">
            <summary>
            Registers a new factory method that creates <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances
            with the specified module GUID.
            </summary>
            <param name="moduleGuid">The module GUID of the <see cref="T:Ranorex.Core.Testing.ITestModule"/> instance
            created by the specified factory method.</param>
            <param name="factoryMethod">The factory method that creates <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances
            with the specified <paramref name="moduleGuid"/>.</param>
            <param name="moduleType">The type of the module created by the factory method.</param>
            <param name="iteration">A number specifying the repeat count for the module
            created by the factory method.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleActivator.ResolveFactoryMethod(Ranorex.Core.CaseInsensitiveString,System.String,System.Type,System.Collections.Generic.IList{System.String},Ranorex.Core.Testing.TestModuleAttribute@)">
            <summary>
            Resolves the factory method that creates <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances with the specified
            module GUID and/or module.
            </summary>
            <param name="moduleGuid">The GUID of the module created by the returned factory method.</param>
            <param name="moduleName">The name of the module created by the returned factory method.</param>
            <param name="containerType">A <see cref="T:System.Type"/> that resides in the same assembly as the
            searched test module.</param>
            <param name="assemblyPathsToSearch">The paths to assemblies that are searched for the test module.</param>
            <param name="moduleAttribute">When this methods returns contains the <see cref="T:Ranorex.Core.Testing.TestModuleAttribute"/> that
            the found test module is marked with or <c>null</c> if no test module was found.</param>
            <returns>A factory method that can be used to create the specified <see cref="T:Ranorex.Core.Testing.ITestModule"/>
            instance or <c>null</c> if no test module satisfying the specified arguments was found.</returns>
        </member>
        <member name="T:Ranorex.Core.Testing.TestModuleLeaf">
            <summary>
            Represents a module in a test suite.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleLeaf.Current">
            <summary>
            Gets the currently executed test module.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleLeaf.IsDescendantOfSetupNode">
            <summary>
            Gets a value indicating whether this instance is a descendant of a setupNode.
            </summary>
            <value><c>true</c> if this instance is a setup module; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleLeaf.IsDescendantOfTearDownNode">
            <summary>
            Gets a value indicating whether this instance is a descendant of a TearDownNode.
            </summary>
            <value>
                <c>true</c> if this instance is a descendant of a TearDownNode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleLeaf.HasWarnings">
            <summary>
            Gets a value indicating whether this instance has warnings.
            </summary>
            <value>
                <c>true</c> if this instance has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleLeaf.RunIterationCount">
            <summary>
            The number of time to run the <see cref="T:Ranorex.Core.Testing.IModule"/>.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.TestSuiteRunConfig">
            <summary>
            Represents a test suite run configuration.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.#ctor(System.String,Ranorex.Core.Testing.TestSuite)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/> class.
            </summary>
            <param name="name">The name of the run configuration.</param>
            <param name="testSuite">The test suite.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.#ctor(Ranorex.Libs.Xml.XmlNode,Ranorex.Core.Testing.TestSuite)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/> class.
            </summary>
            <param name="node">An XML node containing the definition of this run configuration.</param>
            <param name="testSuite">The test suite.</param>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuiteRunConfig.Name">
            <summary>
            Gets or sets the run configuration name.
            </summary>
            <value>The run configuration name.</value>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.GetRunConfigFixName(System.String)">
            <summary>
            Gets a valid run configuration name.
            </summary>
            <param name="name">The run configuration name to fix.</param>
            <returns>The valid run configuration name</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.AddTestContainer(Ranorex.Core.CaseInsensitiveString)">
            <summary>
            Adds a test container to the run configuration.
            </summary>
            <param name="testContainerId">The test container id.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.CreateCopy">
            <summary>
            Creates a deep copy of this run configuration.
            </summary>
            <returns>A new run configuration that is a copy of this run configuration.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.RefreshCheckStates">
            <summary>
            Refreshes the run configuration check states.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.ContainsActiveTestContainer(Ranorex.Core.Testing.ITestContainer)">
            <summary>
            Determines whether this run configuration contains a <see cref="T:Ranorex.Core.Testing.ITestContainer"/> with
            the specified <paramref name="testContainer"/>.
            </summary>
            <param name="testContainer">The test container.</param>
            <returns>
            <c>true</c> if this run configuration contains a <see cref="T:Ranorex.Core.Testing.ITestContainer"/> with
            the specified <paramref name="testContainer"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.GetActiveTestContainers">
            <summary>
            Gets all run configuration test containers which are actually in the test suite run configeration.
            </summary>
            <returns>A list containing the active test containers.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.GetXMLNode(Ranorex.Libs.Xml.XmlNode)">
            <summary>
            Gets an XML node containing the definition of this run configuration.
            </summary>
            <param name="parent">The parent XML node.</param>
            <returns>An XML node containing the definition of this run configuration.</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the name of this instance.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunConfig.CompareTo(Ranorex.Core.Testing.TestSuiteRunConfig)">
            <summary>
            Compares the current <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/> with another <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/>.
            </summary>
            <param name="other">An <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/> to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The sorting is ascending by name.
            The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/> is less than the <paramref name="other"/> parameter.
            Zero
            This <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/> is equal to <paramref name="other"/>.
            Greater than zero
            This <see cref="T:Ranorex.Core.Testing.TestSuiteRunConfig"/> is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuiteRunConfig.TestContainers">
            <summary>
            Gets the run configuration test containers.
            </summary>
            <value>The run configuration test containers.</value>
        </member>
        <member name="T:Ranorex.Core.Testing.TestSuiteRunner">
            <summary>
            Provides functionality to execute Ranorex test suites.
            </summary>
        </member>
        <member name="E:Ranorex.Core.Testing.TestSuiteRunner.TestRunCompleted">
            <summary>
            Occurs when the test run for a test suite is about to complete.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuiteRunner.RunAborted">
            <summary>
            Gets or sets a value indicating whether the current run has been aborted.
            If <c>true</c>, the test suite is currently in a tear-down phase.
            </summary>
            <value>
              <c>true</c> if the current test run has been aborted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunner.Run(System.Type,System.String)">
            <summary>
            Runs the test suite which is contained in the same directory with the same name as
            the assembly containing the specified container type, or a file explicitly specified in the command line arguments.
            For example 'MyTestProject1.exe' tries to load 'MyTestProject1.rxtst'.
            </summary>
            <param name="containerType">Specifies a type which must be located in the main test suite assembly.</param>
            <param name="cmdLineArgs">The command line arguments.</param>
            <returns>An error code which can be used as a return value for command line execution (0 = Success, -1 = Failure)</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteRunner.Run(System.Type,System.String,System.String)">
            <summary>
            Runs the test suite which is passed as an XML string.
            </summary>
            <param name="containerType">Specifies a type which must be located in the main test suite assembly.</param>
            <param name="cmdLineArgs">The command line arguments.</param>
            <param name="testSuiteXml">A string containing the test suite data in XML format.</param>
            <returns>An error code which can be used as a return value for command line execution (0 = Success, -1 = Failure)</returns>
        </member>
        <member name="T:Ranorex.Core.Testing.ITestModule">
            <summary>
            A test module that can be executed by calling the <see cref="M:Ranorex.Core.Testing.ITestModule.Run"/> method.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.ITestModule.Run">
            <summary>
            Executes the module.
            </summary>
            <remarks>You should not call this method directly, instead pass the module
            instance to the <see cref="M:Ranorex.Core.Testing.TestModuleRunner.Run(Ranorex.Core.Testing.ITestModule)"/> method
            that will in turn invoke the <see cref="M:Ranorex.Core.Testing.ITestModule.Run"/> method.</remarks>
        </member>
        <member name="T:Ranorex.Core.Testing.ModuleType">
            <summary>
            Specifies the type of the test module, i.e. if it is created by the
            Ranorex Recorder or a user defined module.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Testing.ModuleType.Unknown">
            <summary>
            The type of the test module is unknown.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Testing.ModuleType.Recording">
            <summary>
            The test module is a recording, i.e. created by the Ranorex Recorder.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Testing.ModuleType.UserCode">
            <summary>
            The test module is created by user coder.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Testing.ModuleType.Group">
            <summary>
            The test module is a group of modules.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.TestModuleAttribute">
            <summary>
            Use to mark a class as a Ranorex test module. The marked class needs to implement
            the <see cref="T:Ranorex.Core.Testing.ITestModule"/> interface.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleAttribute.#ctor(System.String)">
            <summary>
            Creates a new TestModuleAttribute instance of type UserCode.
            The iterationCount is set to default of 1 to run the module once.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Testing.TestModuleAttribute.Guid"/>.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleAttribute.#ctor(System.String,Ranorex.Core.Testing.ModuleType)">
            <summary>
            Creates a new TestModuleAttribute instance.
            The iterationCount is set to default of 1 to run the module once.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Testing.TestModuleAttribute.Guid"/>.</param>
            <param name="moduleType">The type of module.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleAttribute.#ctor(System.String,Ranorex.Core.Testing.ModuleType,System.Int32)">
            <summary>
            Creates a new TestModuleAttribute instance.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Testing.TestModuleAttribute.Guid"/>.</param>
            <param name="moduleType">The type of module.</param>
            <param name="iterationCount">The number of times to run the module.</param>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleAttribute.Guid">
            <summary>
            The unique ID of the test module.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleAttribute.ModuleType">
            <summary>
            Gets or sets the type of the module.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Testing.TestModuleAttribute.IterationCount">
            <summary>
            Gets or sets the iteration count.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Testing.TestModuleRunner">
            <summary>
            Provides functionality to execute <see cref="T:Ranorex.Core.Testing.ITestModule"/> instances.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.#ctor(Ranorex.Core.Testing.ITestModule)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Testing.TestModuleRunner"/> class with a specified test module instance.
            </summary>
            <param name="testModule">The test module instance to to use for the newly created runner.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.Run(Ranorex.Core.Testing.ITestModule,Ranorex.Core.CommandLine)">
            <summary>
            Runs the specified test module instance,
            providing its public properties marked with the <see cref="T:Ranorex.Core.Testing.TestVariableAttribute"/>
            as variables for data binding.
            Additionally, parameters are parsed from the specified <see cref="T:Ranorex.Core.CommandLine"/> and matching public properties are set.
            </summary>
            <param name="testModule">The test module instance to run.</param>
            <param name="commandLine">The command line object to use for setting parameter values to instance properties.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.Run(Ranorex.Core.Testing.ITestModule)">
            <summary>
            Runs the specified test module instance,
            providing its public properties marked with the <see cref="T:Ranorex.Core.Testing.TestVariableAttribute"/>
            as variables for data binding.
            </summary>
            <param name="testModule">The test module instance to run.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.SetupStandalone(System.String)">
            <summary>
            Sets up a standalone module run.
            Assembly names can be passed for additionally needed references, separated by a pipe ('|') character.
            </summary>
            <param name="assemblyLocations">A list of additionally referenced assembly names.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.RunStandalone(Ranorex.Core.Testing.ITestModule,System.String,System.Boolean)">
            <summary>
            Runs the specified module instance in a standalone context and sets up reporting.
            </summary>
            <param name="module">The module instance to run.</param>
            <param name="reportFilename">The report filename to use.</param>
            <param name="generateReport">if set to <c>true</c>, generate the report file specified in 'filename'.</param>
            <returns>An error code which can be used as a return value for command line execution (0 = Success, -1 = Failure).</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.RunStandalone(Ranorex.Core.Testing.ITestModule,System.String,System.Boolean,System.String,Ranorex.Core.CaseInsensitiveString)">
            <summary>
            Runs the specified module instance in a standalone context. For Ranorex internal use only.
            </summary>
            <param name="module">The module instance.</param>
            <param name="reportFilename">The report filename.</param>
            <param name="generateReport">if set to <c>true</c>, generate report.</param>
            <param name="standaloneModuleName">Name of the standalone module.</param>
            <param name="guid">The GUID of the standalone module.</param>
            <returns>An error code which can be used as a return value for command line execution (0 = Success, -1 = Failure).</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.SetReferencedAssemblies(System.String[])">
            <summary>
            Sets a list of additionally referenced assemblies.
            </summary>
            <param name="assemblyLocations">The referenced list of assemblies to use.</param>
        </member>
        <member name="M:Ranorex.Core.Testing.TestModuleRunner.Run">
            <summary>
            Runs the configured test module instance,
            providing its public properties marked with the <see cref="T:Ranorex.Core.Testing.TestVariableAttribute"/>
            as variables for data binding.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteEntryExtensions.IsDescendantOfSetupNode(Ranorex.Core.Testing.TestSuiteEntry)">
            <summary>
            Returns whether the entry is a descendant of a SetupNode
            </summary>
            <returns>true if any of the ancestors is a SetupNode, or false otherwise</returns>
        </member>
        <member name="M:Ranorex.Core.Testing.TestSuiteEntryExtensions.IsDescendantOfTearDownNode(Ranorex.Core.Testing.TestSuiteEntry)">
            <summary>
            Returns whether the entry is a descendant of a TearDownNode
            </summary>
            <returns>true if any of the ancestors is a TearDownNode, or false otherwise</returns>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuiteEntry.Name">
            <summary>
            Gets the name of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' name.</value>
        </member>
        <member name="P:Ranorex.Core.Testing.TestSuiteEntry.Id">
            <summary>
            Gets the id of the 'test case' or 'smart folder'.
            </summary>
            <value>The 'test case' or 'smart folder' id.</value>
        </member>
        <member name="T:Ranorex.Core.Testing.TestVariableAttribute">
            <summary>
            Use to mark a property as a Ranorex test variable.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Testing.TestVariableAttribute.#ctor(System.String)">
            <summary>
            Creates a new TestVariableAttribute instance.
            </summary>
            <param name="guid">The <see cref="P:Ranorex.Core.Testing.TestVariableAttribute.Guid"/>.</param>
        </member>
        <member name="P:Ranorex.Core.Testing.TestVariableAttribute.Guid">
            <summary>
            The unique ID of the test module.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Utils.Credentials.Resources.ExceptionLocalization">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Credentials.Resources.ExceptionLocalization.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Credentials.Resources.ExceptionLocalization.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Credentials.Resources.ExceptionLocalization.CredentialsManagerHasSameTarget">
            <summary>
              Looks up a localized string similar to Credential manager already contains credentials with the same target..
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Credentials.Resources.ExceptionLocalization.CredentialsNull">
            <summary>
              Looks up a localized string similar to The credentials cannot be null..
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Credentials.Resources.ExceptionLocalization.PasswordIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to Enter a password..
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Credentials.Resources.ExceptionLocalization.UserNameIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to Enter a username..
            </summary>
        </member>
        <member name="T:Ranorex.Core.Utils.DisplaySettings.CcdWrapper">
             <summary>
             API to query "physical" display bounds, i.e. the bounds set for a display in the
             operating system settings, not including any scale factor.
             API is available in Windows 7 and later.
             https://github.com/regueiro/CCDWrapper
            
             LICENSE:
            
             The MIT License (MIT)
             Copyright(c) 2013-2014 Erti-Chris Eelmaa
            
             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files(the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:
            
             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.
            
             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             </summary>
        </member>
        <member name="T:Ranorex.Core.Utils.Domain.AppNames">
            <summary>
            Collection of common used mobile app names
            </summary>
        </member>
        <member name="F:Ranorex.Core.Utils.Domain.AppNames.RxBrowser">
            <summary>
            Name of Ranorex Web Testing app (RxBrowser)
            </summary>
        </member>
        <member name="F:Ranorex.Core.Utils.Domain.AppNames.IosService">
            <summary>
            Name of ios service app
            </summary>
        </member>
        <member name="F:Ranorex.Core.Utils.Domain.AppNames.AndroidService">
            <summary>
            Name of android service app
            </summary>
        </member>
        <member name="F:Ranorex.Core.Utils.Domain.AppNames.AndroidServiceMainActivity">
            <summary>
            Name of the android service startup activity
            </summary>
        </member>
        <member name="T:Ranorex.Core.Utils.Threading.UiTask`1">
             <summary>
             Helper class for async execution with sync on ui thread.
            
             Usage e.g.:
             UiTask&lt;string&gt;Create(this)
                 .Do( () => { return SomeWorkThatRetrunsString(); } )
                 .Succeeded( (result) => { PrintMessage("Done: " + result); } )
                 .Failed( () => { ShowError("Failed"); } )
                 .Start();
             </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Threading.UiTask`1.OnSuccess">
            <summary>
            Task to execute on success
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Threading.UiTask`1.OnFailed">
            <summary>
            Task to execute if the async task failed
            </summary>
        </member>
        <member name="P:Ranorex.Core.Utils.Threading.UiTask`1.Task">
            <summary>
            The task to execute async.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Utils.Threading.UiTask`1.Create(System.Windows.Forms.Control)">
            <summary>
            Creates a UiTask with result parameter of type T
            </summary>
            <param name="control">Control to invoke outcome actions (OnSuccess/OnFailed) on.</param>
            <returns>new UITask</returns>
        </member>
        <member name="M:Ranorex.Core.Utils.Threading.UiTask`1.Succeeded(System.Action{`0})">
            <summary>
            Sets OnSuccess
            </summary>
        </member>
        <member name="M:Ranorex.Core.Utils.Threading.UiTask`1.Do(System.Func{`0})">
            <summary>
            Sets Task
            </summary>
        </member>
        <member name="M:Ranorex.Core.Utils.Threading.UiTask`1.Failed(System.Action{System.Exception})">
            <summary>
            Sets OnFailed
            </summary>
        </member>
        <member name="M:Ranorex.Core.Utils.Threading.UiTask`1.Cancel">
            <summary>
            Cancels the async task
            </summary>
        </member>
        <member name="M:Ranorex.Core.Utils.Threading.UiTask`1.Start">
            <summary>
            Starts the execution of the async task
            </summary>
        </member>
        <member name="T:Ranorex.Core.Utils.Xml.SerializableDictionary`2">
            <summary>
            Needed in .Net 2.0 since XmlSerializer cannot handle dictionaries and DataContractSerializer is not available.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Paths.TryGetUiaLauncherPath(System.Boolean,System.String@)">
            <summary>
            Tries to get the path to the UiaLauncher component.
            </summary>
            <param name="x86">A value specifying whether to get the x86 (= 32bit) version of
            the UiaLauncher.</param>
            <param name="uiaLauncherPath">When the method returns, contains the path to the UiaLauncher
            component or <c>null</c> if UiaLauncher could not be found.</param>
            <returns><c>True</c> if the path could successfully be computed; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Ranorex.Core.RanorexCoreException">
            <summary>
            Exception representing errors in the Ranorex core.
            </summary>
            <remarks>
            This type should only be used by the core, and not by plugins.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.RanorexCoreException.#ctor">
            <summary>
            Creates a new Ranorex core exception.
            </summary>
        </member>
        <member name="M:Ranorex.Core.RanorexCoreException.#ctor(System.String)">
            <summary>
            Creates a new Ranorex core exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.Core.RanorexCoreException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new Ranorex core exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.Core.RanorexCoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RanorexException"/> class.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.GetRawProperty(Ranorex.Core.Proxy.RemoteObject.PropertyInfo)">
            <summary>
            Returns the property value.
            </summary>
            <param name="prop">The info object of the property to return.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.GetRawListItem(System.Int32)">
            <summary>
            Returns an item if the objects represents a list.
            </summary>
            <param name="idx">The zero-based list index.</param>
            <returns>The list item. </returns>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.SetRawProperty(Ranorex.Core.Proxy.RemoteObject.PropertyInfo,System.Object)">
            <summary>
            Sets the property to a value. Throws an exception if setting value fails or is not supported.
            </summary>
            <param name="prop">The info object of the property to set.</param>
            <param name="value">The value of the property to set.</param>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.InvokeRawMethod(Ranorex.Core.Proxy.RemoteObject.MethodInfo,System.Object[])">
            <summary>
            Invokes a method with the supplied name and arguments. Throws if method invocation fails.
            </summary>
            <param name="method">The info object of the method to call.</param>
            <param name="args">A list to arguments.</param>
            <returns>The return value of the method, if any.</returns>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.GetTechName">
            <summary>
            A human-readable technology name (e.g. "WinForms")
            </summary>
            <returns>.</returns>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.GetTypeLineage">
            <summary>
            Returns a list of ancestor types for this objects, with the objects type/class name being the first item.
            If the target technology does not support this concept, return a list with at least one generic name.
            </summary>
            <returns>.</returns>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.GetMethodAndPropertyInfos(System.Collections.Generic.List{Ranorex.Core.Proxy.RemoteObject.PropertyInfo},System.Collections.Generic.List{Ranorex.Core.Proxy.RemoteObject.MethodInfo})">
            <summary>
            Populates the supplied lists with object property and method metadata.
            Methods with get/set semantics should be mapped as properties.
            </summary>
            <param name="props">The list of properties to populate.</param>
            <param name="methods">The list of properties to populate.</param>
        </member>
        <member name="M:Ranorex.Core.Proxy.RemoteObject.Dispose(System.Boolean)">
            <summary>
            Releases resources or references acquired by the remote object. Get/Set/Invoke will no longer be called/callable on this instance.
            </summary>
        </member>
        <member name="M:Ranorex.Core.DwmCapture.CheckDisplayConfig(System.IntPtr)">
            <summary>
            Checks if there is more than one display adapter.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Geometry">
            <summary>
            Helper class for geometry related methods.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Geometry.Normalize(System.Drawing.Rectangle)">
            <summary>
            Normalizes the specified rectangle, i.e. ensures that both width and height are positive.
            </summary>
            <param name="rect">A rectangle.</param>
            <returns>The normalized rectangle, i.e. a rectangle with positive width and height.</returns>
        </member>
        <member name="M:Ranorex.Core.Geometry.CalculateEnsureVisibleScrollPixelsOnScreen(System.Drawing.Rectangle)">
            <summary>
            Calculates scroll pixels for EnsureVisible operations in order to make the
            <paramref name="item"/> visible on the screen.
            </summary>
            <param name="item">An item rectangle.</param>
            <returns>The pixels a container needs to be scrolled in order to make the item visible
            on the screen. Note that if you move the container of the item (instead of scrolling),
            you have to subtract the returned point from the current location of the container.</returns>
        </member>
        <member name="M:Ranorex.Core.Geometry.CalculateEnsureVisibleScrollPixels(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Calculates scroll pixels for EnsureVisible operations.
            </summary>
            <param name="container">A container rectangle.</param>
            <param name="item">An item rectangle.</param>
            <returns>The pixels the containers needs to be scrolled in order to make the item visible.</returns>
        </member>
        <member name="M:Ranorex.Core.Geometry.CalculateEnsureVisibleScrollPixels(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Calculates scroll pixels for EnsureVisible operations.
            </summary>
            <param name="container">A container rectangle.</param>
            <param name="item">An item rectangle.</param>
            <param name="favorTopLeft">If set to <c>true</c>, the top-left corner of the item is made visible
            if the whole item cannot be made visible.</param>
            <returns>The pixels the containers needs to be scrolled in order to make the item visible.</returns>
        </member>
        <member name="M:Ranorex.Core.Geometry.MDist(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Calculates the Manhattan distance between two points.
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:Ranorex.Core.ExtensionMethods">
            <summary>
            Provides common "extension" methods that are available in higher .NET Frameworks but not
            in the 2.0 Framework.
            </summary>
        </member>
        <member name="T:Ranorex.Core.ExtensionMethods.MapDelegate`2">
            <summary>
            A delegate representing a function which maps objects of type T to type S.
            </summary>
            <typeparam name="T">Input type.</typeparam>
            <typeparam name="S">Output type.</typeparam>
            <param name="src">Input object.</param>
            <returns>Mapped output object.</returns>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each item returned by <paramref name="enumerable"/>.
            </summary>
            <typeparam name="T">The type of the items returned by <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each item
            returned by <paramref name="enumerable"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerable"/> or <paramref name="action"/>
            is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines whether every item returned by <paramref name="enumerable"/> matches the conditions
            defined by the specified predicate.
            </summary>
            <typeparam name="T">The type of the items returned by <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions
            to check against the items.</param>
            <returns><c>true</c> if every item returned by <paramref name="enumerable"/> matches the
            conditions defined by the specified predicate; otherwise, <c>false</c>. If the enumerable
            returns no items, the return value is <c>true</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumerable"/> or <paramref name="match"/>
            is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the items of the specified enumerable to the end of the collection.
            </summary>
            <typeparam name="T">The type of the items in the <paramref name="collection"/>.</typeparam>
            <param name="collection">An <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</param>
            <param name="items">The items to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="items"/>
            is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Converts the items returned by <paramref name="enumerable"/> to another type,
            and returns a list containing the converted elements.
            </summary>'
            <typeparam name="T">The type of the items returned by <paramref name="enumerable"/>.</typeparam>
            <typeparam name="TOutput">The type of the converted items in the returned list.</typeparam>
            <param name="enumerable">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance.</param>
            <param name="converter">A delegate that converts each element to another type.</param>
            <returns>A list containing the converted items.</returns>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.SequenceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether two lists are equal by comparing their elements.
            </summary>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="a">The first list.</param>
            <param name="b">The second list.</param>
            <returns><c>True</c> if the two lists contain the same elements in the
            same order; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.RemoveDuplicates``2(System.Collections.Generic.ICollection{``0},Ranorex.Core.ExtensionMethods.MapDelegate{``0,``1})">
            <summary>
            Removes duplicates from a list using the provided identity mapping function.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <typeparam name="S">The type of the item identity.</typeparam>
            <param name="srcCollection">The collection to remove the duplicates from.</param>
            <param name="identFunc">The identity mapping function to apply to the items in the collection.</param>
            <returns>A new list containing all elements from the source collection, without duplicates.</returns>
        </member>
        <member name="T:Ranorex.Core.ExtensionMethods.CastingEnumerable`1">
            <summary>
            Converts a non-generic <see cref="T:System.Collections.IEnumerable"/> instance to a generic
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> by casting each element to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to cast the items in the non-generic enumerable to.</typeparam>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.CastingEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.ExtensionMethods.CastingEnumerable`1"/> class.
            </summary>
            <param name="nonGenericEnumerable">The non generic enumerable.</param>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.CastingEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that returns the items in the original non-generic enumerator
            casted to <typeparamref name="T"/>.
            </summary>
            <returns>
            A generic enumerator returning the items from the original non-generic enumerator.
            </returns>
        </member>
        <member name="M:Ranorex.Core.ExtensionMethods.CastingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the original non-generic enumerator used to create this instance.
            </summary>
            <returns>
            The original non-generic enumerator used to create this instance
            </returns>
        </member>
        <member name="T:Ranorex.Core.IPluginControl">
            <summary>
            Plugins can implement this class to add their own user controls into the ranorex core system. The plugin controls
            will be added in the plugins pad in the UserInterface of Ranorex Studio.
            </summary>
        </member>
        <member name="E:Ranorex.Core.IPluginControl.ShowChangedEvent">
            <summary>
            This event is triggered whenever the conrol changes its <see cref="P:Ranorex.Core.IPluginControl.Show"/> property.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IPluginControl.Control">
            <summary>
            The control that shall be embedded in the Core UI.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IPluginControl.DisplayName">
            <summary>
            A Title for the control. This title will also be displayed in the core UI as a header.
            </summary>
        </member>
        <member name="P:Ranorex.Core.IPluginControl.Show">
            <summary>
            Indicates if this control shall be displayed in the UI. If set to false the Ranorex core UI will hide the control
            otherwise it will be shown.
            </summary>
        </member>
        <member name="M:Ranorex.Core.IPluginControl.UpdateControl">
            <summary>
            This method will be called by the Ranorex core sytem when a control update is required. The implementation
            has to update itself in this operation if appplicable.
            </summary>
        </member>
        <member name="T:Ranorex.Core.ISelfHighlight">
            <summary>
            FlavorElements implementing this interface will be treated as elements that know how they can
            highlight them self and thereby will not be highlighted by Ranorex's standard highlight mechanism.
            This is primarily required for elements that do not reside on the machine the test runner
            is executed on because in such cases special handling (e.g. network commands) are required.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ISelfHighlight.Highlight(System.Int32)">
            <summary>
            Highlights the element for the specified amount of time. The implementation should be asynchronous.
            </summary>
            <param name="msTimeout">
            Duration the element shall be highlighted in milliseconds. 0 means the implementation should use it's default
            duration.
            </param>
        </member>
        <member name="T:Ranorex.Core.CacheSessionContext">
            <summary>
            Represents a scope wherein a <see cref="T:Ranorex.Libs.CacheSession"/> is active.
            </summary>
        </member>
        <member name="M:Ranorex.Core.CacheSessionContext.#ctor(System.Boolean)">
            <summary>
            Creates a new context for a <see cref="T:Ranorex.Libs.CacheSession"/>.
            </summary>
            <param name="forceNew">If set to <c>true</c>, the creation of a new <see cref="T:Ranorex.Libs.CacheSession"/> is forced.</param>
            <remarks>All element operations from calling the constructor of a <see cref="T:Ranorex.Core.CacheSessionContext"/>
            to calling the <see cref="M:Ranorex.Core.CacheSessionContext.Dispose"/> method are cached in a <see cref="T:Ranorex.Libs.CacheSession"/>.
            <para>If <paramref name="forceNew"/> is <c>false</c>, a new <see cref="T:Ranorex.Libs.CacheSession"/> is
            only constructed if there is no active <see cref="T:Ranorex.Libs.CacheSession"/> yet.</para></remarks>
        </member>
        <member name="M:Ranorex.Core.CacheSessionContext.#ctor">
            <summary>
            Creates a new context for a <see cref="T:Ranorex.Libs.CacheSession"/>.
            </summary>
            <remarks>All element operations from calling the constructor of a <see cref="T:Ranorex.Core.CacheSessionContext"/>
            to calling the <see cref="M:Ranorex.Core.CacheSessionContext.Dispose"/> method are cached in a <see cref="T:Ranorex.Libs.CacheSession"/>.
            <para>A new <see cref="T:Ranorex.Libs.CacheSession"/> is
            only constructed if there is no active <see cref="T:Ranorex.Libs.CacheSession"/> yet.</para></remarks>
        </member>
        <member name="M:Ranorex.Core.CacheSessionContext.Finalize">
            <summary>
            Disposes this context on finalize if <see cref="M:Ranorex.Core.CacheSessionContext.Dispose"/> has not been called yet.
            </summary>
        </member>
        <member name="P:Ranorex.Core.CacheSessionContext.IsActive">
            <summary>
            Gets a value indicating whether the current cache session is active.
            </summary>
            <value>
              <c>true</c> if the current cache session is active; otherwise, <c>false</c>.
            </value>
            <remarks>Currently, only the default cache session is not active; i.e. this property
            only returns <c>false</c> if you currently not within a cache session context.</remarks>
        </member>
        <member name="M:Ranorex.Core.CacheSessionContext.Set(System.Object,System.Object)">
            <summary>
            Sets the specified value in the cache for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ranorex.Core.CacheSessionContext.TryGetValue(System.Object,System.Object@)">
            <summary>
            Tries to get the value for the specified key from the cache.
            </summary>
            <param name="key">The key.</param>
            <param name="value">When this method returns, contains the cached value for the specified key
            or <c>null</c> if the cache does not contain the specified key or the cache session is not active.</param>
            <returns><c>true</c> if the cache contained the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.CacheSessionContext.Dispose">
            <summary>
            Disposes the current <see cref="T:Ranorex.Core.CacheSessionContext"/>. If this context is the currently
            active <see cref="T:Ranorex.Core.CacheSessionContext"/>, the new current context will be the context that has
            been replaced by this context.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Capability">
            <summary>
            A capability is a logical grouping of actions and attributes which belong together.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Capability.DynamicCapabilityDisplayName">
            <summary>
            Defines the name for the "Dynamic" capability, providing dynamic attributes and actions
            of an element.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Capability.Checkable">
            <summary>
            Represents a check box that allows the user to select a true or false condition.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Capability.#ctor(System.String,System.String,System.String,System.Drawing.Image,System.Boolean,System.Collections.Generic.IList{Ranorex.Core.ActionDescriptor},System.Collections.Generic.IList{Ranorex.Core.AttributeDescriptor})">
            <summary>
            Creates a new capability.
            </summary>
            <param name="displayName">The name of the capability. This should be CamelCased.</param>
            <param name="description">A short description of the capability.</param>
            <param name="actions">A list of actions provided by this capability.</param>
            <param name="attributes">A list of attributes provided by this capability.</param>
            <param name="shortName">The shorthand name of the capability. This is not required to be unique.</param>
            <param name="icon">An icon which represents the capability, or <c>null</c> to use the default icon.</param>
            <param name="isUsefulContainer">If true, the capability represents, from a user interface perspective, a useful/logical container.
            and is used alternatively to the name in RxPath.</param>
        </member>
        <member name="M:Ranorex.Core.Capability.#ctor(System.String,System.String,System.Drawing.Image,System.Boolean,System.Collections.Generic.IList{Ranorex.Core.ActionDescriptor},System.Collections.Generic.IList{Ranorex.Core.AttributeDescriptor},System.String,System.String)">
            <summary>
            Creates a new capability.
            </summary>
            <param name="displayName">The name of the capability. This should be CamelCased.</param>
            <param name="icon">An icon which represents the capability, or <c>null</c> to use the default icon.</param>
            <param name="isUsefulContainer">If true, the capability represents, from a user interface perspective, a useful/logical container.
            and is used alternatively to the name in RxPath.</param>
            <param name="description">A short description of the capability.</param>
            <param name="actions">A list of actions provided by this capability.</param>
            <param name="attributes">A list of attributes provided by this capability.</param>
            <param name="labelAttributeName">Name of the attribute which acts as a label (can be null).</param>
            <param name="contentAttributeName">Name of the attribute which represents the content of an element (can be null).</param>
        </member>
        <member name="M:Ranorex.Core.Capability.#ctor(System.String,System.String,System.String,System.Drawing.Image,System.Boolean,System.Collections.Generic.IList{Ranorex.Core.ActionDescriptor},System.Collections.Generic.IList{Ranorex.Core.AttributeDescriptor},System.String,System.String)">
            <summary>
            Creates a new capability.
            </summary>
            <param name="displayName">The name of the capability. This should be CamelCased.</param>
            <param name="shortName">The shorthand name of the capability. This is not required to be unique.</param>
            <param name="icon">An icon which represents the capability, or <c>null</c> to use the default icon.</param>
            <param name="isUsefulContainer">If true, the capability represents, from a user interface perspective, a useful/logical container.
            and is used alternatively to the name in RxPath.</param>
            <param name="description">A short description of the capability.</param>
            <param name="actions">A list of actions provided by this capability.</param>
            <param name="attributes">A list of attributes provided by this capability.</param>
            <param name="labelAttributeName">Name of the attribute which acts as a label (can be null).</param>
            <param name="contentAttributeName">Name of the attribute which represents the content of an element (can be null).</param>
        </member>
        <member name="P:Ranorex.Core.Capability.Actions">
            <summary>
            A list of actions, provided as a by-name dictionary.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Capability.Attributes">
            <summary>
            A list of attributes, provided as a by-name dictionary.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Capability.ShortName">
            <summary>
            The shorthand name of this capability.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Capability.ShortDisplayName">
            <summary>
            The shorthand display name of this capability.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Capability.Icon">
            <summary>
            An icon representing the capability. Should be 16x16 pixels.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Capability.LabelAttributeName">
            <summary>
            The name of the attribute for this capability which acts as a label for an element.
            or <c>null</c> if the capability has no label attribute.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Capability.ContentAttributeName">
            <summary>
            The name of the attribute for this capability which represents the content of an element.
            or <c>null</c> if the capability has no content attribute.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Capability.IsUsefulContainer">
            <summary>
            If true, the capability represents, from a user interface perspective, a useful/logical container.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Capability.op_Equality(Ranorex.Core.Capability,Ranorex.Core.Capability)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="c1">Capability 1.</param>
            <param name="c2">Capability 2.</param>
            <returns><c>True</c> if the two <see cref="T:Ranorex.Core.Capability"/> instances have
            the same <see cref="P:Ranorex.Core.Descriptor.Name"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Capability.op_Inequality(Ranorex.Core.Capability,Ranorex.Core.Capability)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="c1">Capability 1.</param>
            <param name="c2">Capability 2.</param>
            <returns><c>True</c> if the two <see cref="T:Ranorex.Core.Capability"/> instances do not
            have the same <see cref="P:Ranorex.Core.Descriptor.Name"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Capability.GetPredefinedCapabilities">
            <summary>
            Returns a list of predefined capabilites.
            </summary>
            <returns>A list of predefined capabilites.</returns>
        </member>
        <member name="M:Ranorex.Core.Capability.ToString">
            <summary>
            To string.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:Ranorex.Core.Capability.Equals(Ranorex.Core.Capability)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Capability.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Capability.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Ranorex.Core.OriginalDisplayNameAttribute">
            <summary>
            Specifies the original display name for a class or member.
            </summary>
            <remarks>This attribute is usually applied to a property or method of an adapter
            if the generated property or method name is different from the original display
            name of the corresponding attribute or action.</remarks>
        </member>
        <member name="M:Ranorex.Core.OriginalDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="originalDisplayName">The original display name.</param>
        </member>
        <member name="P:Ranorex.Core.OriginalDisplayNameAttribute.DisplayName">
            <summary>
            Gets the original display name for the class or member.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Descriptor">
            <summary>
            The base descriptor used by many classes in the core.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Creates a new descriptor.
            </summary>
            <param name="displayName">The name of the instance the descriptor refers to.</param>
            <param name="description">The description of the instance the descriptor refers to.</param>
        </member>
        <member name="P:Ranorex.Core.Descriptor.Name">
            <summary>
            The name of the instance the descriptor refers to. This is enforced to be lower-case.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Descriptor.DisplayName">
            <summary>
            The name of the instance the descriptor refers to, with arbitrary casing.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Descriptor.Description">
            <summary>
            The description of instance the descriptor refers to.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Descriptor.CreateCaseInsensitiveIdentifier(System.String)">
            <summary>
            Creates a case insensitive identifier out of a display name.
            </summary>
            <param name="displayName">The display name.</param>
            <returns>A case insensitive identifier for the display name.</returns>
        </member>
        <member name="M:Ranorex.Core.Descriptor.op_Equality(Ranorex.Core.Descriptor,Ranorex.Core.Descriptor)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="d1">Descriptor 1.</param>
            <param name="d2">Descriptor 2.</param>
            <returns><c>True</c> if the two <see cref="T:Ranorex.Core.Descriptor"/> instances have
            the same <see cref="P:Ranorex.Core.Descriptor.Name"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Descriptor.op_Inequality(Ranorex.Core.Descriptor,Ranorex.Core.Descriptor)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="d1">Descriptor 1.</param>
            <param name="d2">Descriptor 2.</param>
            <returns><c>True</c> if the two <see cref="T:Ranorex.Core.Descriptor"/> instances do not
            have the same <see cref="P:Ranorex.Core.Descriptor.Name"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Descriptor.ToString">
            <summary>
            Creates a string representation.
            </summary>
            <returns>The displayname.</returns>
        </member>
        <member name="M:Ranorex.Core.Descriptor.Equals(Ranorex.Core.Descriptor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Descriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Descriptor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Descriptor.CompareTo(Ranorex.Core.Descriptor)">
            <summary>
            Compares the current descriptor with another descriptor.
            </summary>
            <param name="other">A descriptor to compare with this descriptor.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            <list type="table">
            <listheader><term>Value</term><term>Meaning</term></listheader>
            <item><term>Less than zero</term><term>This object is less than the <paramref name="other"/> parameter.</term></item>
            <item><term>Zero</term><term>This object is equal to <paramref name="other"/>.</term></item>
            <item><term>Greater than zero</term><term>This object is greater than <paramref name="other"/>.</term></item>
            </list>
            </returns>
        </member>
        <member name="T:Ranorex.Core.Element">
            <summary>
            Represents an UI item in the global UI tree. Instances of this class dynamically implement a Role and optional Capabilities,
            as well as numerous standard properties.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.#ctor(Ranorex.Core.Element,Ranorex.Core.FlavorElement,Ranorex.Core.Role,System.Collections.Generic.IList{Ranorex.Core.Capability},Ranorex.Core.Capability,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new element. This internal constructor is used by the CreateElement() factory method in the ElementEngine.
            </summary>
            <param name="parent">The parent element.</param>
            <param name="flavorElement">The flavor element bound to this element.</param>
            <param name="role">The element role.</param>
            <param name="capabilities">The list of capabilities this element has.</param>
            <param name="preferredCapability">The preferred capability for this element. This can either be one of the caps or the role itself.</param>
            <param name="initialValues">The initial values.</param>
        </member>
        <member name="M:Ranorex.Core.Element.#ctor(Ranorex.Libs.CacheId,Ranorex.Core.Element,Ranorex.Core.FlavorElement,Ranorex.Core.Role,System.Collections.Generic.IList{Ranorex.Core.Capability},Ranorex.Core.Capability,System.String,Ranorex.Libs.CacheSession,System.Int32,Ranorex.Core.TechnologyLimitationList,Ranorex.Core.Capability,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new Element. This constructor is used for cloning.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.#ctor(Ranorex.Libs.CacheId,Ranorex.Core.Element,Ranorex.Core.Role,System.Collections.Generic.IList{Ranorex.Core.Capability},Ranorex.Core.Capability,System.String,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Collections.Generic.IList{Ranorex.Core.Element},Ranorex.Libs.CacheSession,System.Int32,Ranorex.Core.TechnologyLimitationList,Ranorex.Core.Capability)">
            <summary>
            Creates a new Element. This constructor is used for creating snapshots.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For Ranorex internal use only.
            Initializes a new instance of the <see cref="T:Ranorex.Core.Element"/> class.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Ranorex.Core.Element.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For Ranorex internal use only.
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:Ranorex.Core.Element.Cache">
            <summary>
            Gets the cache session (for snapshots).
            </summary>
            <value>The cache.</value>
        </member>
        <member name="P:Ranorex.Core.Element.Screenshot">
            <summary>
            Gets the screenshot from the cache, if anything is there.
            </summary>
            <value>The screenshot.</value>
        </member>
        <member name="P:Ranorex.Core.Element.ChildIndex">
            <summary>
            The index of this element in the parent's child list. Is '-1' if the index is unknown.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Role">
            <summary>
            The role of the element (= main capability).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Capabilities">
            <summary>
            The list of the capabilities the element has.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.FlavorName">
            <summary>
            The name of the flavor this element belongs to.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.PreferredCapability">
            <summary>
            The preferred capability of the element.
            </summary>
            <remarks>
            Usually, this is the role, but it can be any of the capabilities. This property is used when building RxPaths.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Element.Children">
            <summary>
            The list of children the element has.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.GetChildren(Ranorex.Libs.CacheSession)">
            <summary>
            The list of children the element has.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Parent">
            <summary>
            The parent of the element.
            </summary>
            <remarks>
            Is null if the element is a root element.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Element.TopLevelAncestor">
            <summary>
            The top-level ancestor of the element.
            </summary>
            <remarks>
            Is null if the element is a root element.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Element.Item(System.String)">
            <summary>
            Indexer for attribute access.
            </summary>
            <param name="name">Name of the attribute to return.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="P:Ranorex.Core.Element.Actions">
            <summary>
            A list of actions the element supports. This list is aggregated from the role and the capabilities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Attributes">
            <summary>
            A list of attributes the element supports. This list is aggregated from the role and the capabilities.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.DynamicCapability">
            <summary>
            Gets a capability providing dynamic attributes and actions that the element supports.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.ClientRectangle">
            <summary>
            The bounding rectangle of the element, relative to the parent.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.ScreenRectangle">
            <summary>
            The bounding rectangle of the element in screen coordinates.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.GetScreenRectangle(Ranorex.Libs.CacheSession)">
            <summary>
            The bounding rectangle of the element in screen coordinates.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Size">
            <summary>
            The (x,y) size of element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Location">
            <summary>
            The location of the element, relative to its parent.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.ScreenLocation">
            <summary>
            The location of the element in screen coordinates.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Screen">
            <summary>
            Returns the screen object the element is on (e.g desktop or device screen).
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Visible">
            <summary>
            True if the element is visible.
            </summary>
            <remarks>
            Note that even if the element is visible, it might be covered by another visible element.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Element.GetVisible(Ranorex.Libs.CacheSession)">
            <summary>
            True if the element is visible.
            </summary>
            <remarks>
            Note that even if the element is visible, it might be covered by another visible element.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Element.FlavorElement">
            <summary>
            The flavor element associated with the element. This can be <c>null</c>, for example when using static snapshots.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.HasFocus">
            <summary>
            True if the element has the focus.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.GetHasFocus(Ranorex.Libs.CacheSession)">
            <summary>
            True if the element has the focus.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Enabled">
            <summary>
            True if the element is enabled.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.GetEnabled(Ranorex.Libs.CacheSession)">
            <summary>
            True if the element is enabled.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.DontCache">
            <summary>
            Indicates that the element should not be cached. Defaults to false.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.GetDontCache(Ranorex.Libs.CacheSession)">
            <summary>
            True if the element is should bit be cached.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.MinPathAttributes">
            <summary>
            Indicates the minimum number of attributes to be used for identification of this element with RxPath. Defaults to 0.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.GetMinPathAttributes(Ranorex.Libs.CacheSession)">
            <summary>
            The number of attributes to use when building the RxPath location step for this element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Element.Valid">
            <summary>
            Returns true if the element is believed to be valid.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.GetValid(Ranorex.Libs.CacheSession)">
            <summary>
            True if the element is valid.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.Focus">
            <summary>
            Tries to set the focus on the element.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.InvokeAction(System.String,System.Object[])">
            <summary>
            Invokes an action on the element.
            </summary>
            <param name="name">The name of the action to invoke.</param>
            <param name="args">The list of parameters for the action.</param>
            <returns>The invocation result.</returns>
            <remarks>The types of the parameters and return value are as defined by the <see cref="T:Ranorex.Core.ActionDescriptor"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.InvokeActionWithText(System.String,System.String[])">
            <summary>
            Invokes an action on the element.
            </summary>
            <param name="name">The name of the action to invoke.</param>
            <param name="args">The list of parameters for the action, as strings.</param>
            <returns>The invocation result.</returns>
            <remarks>The string values of the parameters are converted to the types defined by the <see cref="T:Ranorex.Core.ActionDescriptor"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed, or argument type conversion failed.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.GetAttributeValue(System.String)">
            <summary>
            Returns the value of an attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.GetAttributeValueText(System.String)">
            <summary>
            Returns the value of an attribute converted to its string representation.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute converted to its string representation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <remarks>This method internally calls <see cref="M:Ranorex.Core.Element.GetAttributeValue(System.String)"/> and converts
            the returned value to its string representation using the <see cref="T:Ranorex.Core.ValueConverter"/>.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.GetAttributeValueText(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the value of an attribute converted to its string representation. If a <paramref name="regex"/>
            is provided, only the part of the string representation matching the regular
            expression is returned.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="regex">A regular expression that defines which part of the attribute value
            string representation should be returned. If more than a single group (= whole match) is
            captured by the regex, the second group (mark using "(?&lt;1&gt;expression)") is returned.</param>
            <returns>The value of the attribute converted to its string representation and optionally
            matched by the provided <paramref name="regex"/> regular expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <remarks>This method internally calls <see cref="M:Ranorex.Core.Element.GetAttributeValue(System.String)"/> and converts
            the returned value to its string representation using the <see cref="T:Ranorex.Core.ValueConverter"/>.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.SetAttributeValue(System.String,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of an attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set as string.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed or the string value could not be converted to the attribute's type.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.FlushCache(Ranorex.Libs.CacheSession)">
            <summary>
            Flushes the attribute and children cache.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.FlushCache">
            <summary>
            Flushes the attribute and children cache.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.FillCache(System.Boolean)">
            <summary>
            Recursively fills the cache.
            </summary>
            <param name="flush">If true, the cache is flushed before filling to prevent stale values.</param>
        </member>
        <member name="M:Ranorex.Core.Element.FillAttributeCache(Ranorex.Libs.CacheSession,System.Boolean,System.Boolean)">
            <summary>
            Fills the attribute cache using a given cache session.
            </summary>
            <param name="session">The cache session to use.</param>
            <param name="flush">If true, the cache is flushed before filling to prevent stale values.</param>
            <param name="includeDynamicAttributeValues">Specifies whether to store values from dynamic attributes.</param>
        </member>
        <member name="M:Ranorex.Core.Element.FillAttributeCache(System.Boolean)">
            <summary>
            Fills the attribute cache using the elements own cache session.
            </summary>
            <param name="flush">If true, the cache is flushed before filling to prevent stale values.</param>
        </member>
        <member name="M:Ranorex.Core.Element.FillAttributeCache">
            <summary>
            Fills the attribute cache using the elements own cache session without flushing.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.FillCache">
            <summary>
            Fills the cache recursively without flushing it first.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.FindSingle(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The first element found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.FindSingle(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <returns>The first element found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found within the timeout.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element is found.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/>,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Duration,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element is found within
            the timeout.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/> within the
            specified <paramref name="timeout"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.TryFindInternal(Ranorex.Core.RxPath,Ranorex.Duration,System.Boolean,System.Collections.Generic.IList{Ranorex.Core.Element}@,Ranorex.Libs.CacheSession@,Ranorex.Duration@,System.Int32@)">
            <summary>
            Provides common functionality for Find and FindSingle with and without timeout
            </summary>
            <remarks>A returned exception (not equal to <c>null</c>) signals an argument exception
            or contains an <see cref="T:Ranorex.ElementNotFoundException"/> if no element is found.
            <paramref name="foundElements"/> is not null if the path was searched, and contains
            zero elements if no elements were found for the path.
            Consequently, the following implications are true when the method returns:
            returned exception == null => foundElements != null AND foundElement.Count > 0
            foundElements == null => returned exception is argument exception
            foundElements != null => no argument exception, but foundElements may contain 0 elements
            foundElements != null AND foundElements.Count == 0 => returned exception is ElementNotFoundException</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.TryFindInternal(Ranorex.Core.RxPath,Ranorex.Core.RxPath,Ranorex.Duration,System.Boolean,System.Collections.Generic.IList{Ranorex.Core.Element}@,Ranorex.Libs.CacheSession@,Ranorex.Duration@,System.Int32@,System.Boolean@,System.Boolean)">
            <summary>
            Provides common functionality for Find and FindSingle with and without timeout
            </summary>
            <remarks>A returned exception (not equal to <c>null</c>) signals an argument exception
            or contains an <see cref="T:Ranorex.ElementNotFoundException"/> if no element is found.
            <paramref name="foundElements"/> is not null if the path was searched, and contains
            zero elements if no elements were found for the path.
            Consequently, the following implications are true when the method returns:
            returned exception == null => foundElements != null AND foundElement.Count > 0
            foundElements == null => returned exception is argument exception
            foundElements != null => no argument exception, but foundElements may contain 0 elements
            foundElements != null AND foundElements.Count == 0 => returned exception is ElementNotFoundException</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.Find(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The list of elements found for that path.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.Find(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the element.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for at least one element matching the path.</param>
            <returns>The list of elements found for that path.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.FindFromUid(System.String,Ranorex.Core.Element@)">
            <summary>
            Finds a descendant element by its unique identifier attribute (defined by the owner flavor UidAttribute name).
            </summary>
            <param name="uidValue">The unique id value.</param>
            <param name="result">The result element, if anything was found.</param>
            <returns>Returns <c>true</c> if an element was found for the given unique id value.</returns>
            <remarks>For this to work, the underlying flavor element has to implement GetChildLineageFromUid()
            and has to set IsUidDomainRoot properly.
            </remarks>
        </member>
        <member name="T:Ranorex.Core.Element.ElementFoundCallback">
            <summary>
            Callback for FindFromPoint
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.FindFromPoint(System.Drawing.Point,Ranorex.Core.RxPath@,Ranorex.Core.Element.ElementFoundCallback)">
            <summary>
            Find an element by screen location and build its RxPath. The found element is a descendant of this
            instance or this instance itself.
            </summary>
            <param name="screenLocation">The location where the element is located.</param>
            <param name="resultPath">The result RxPath.</param>
            <param name="callback">The callback is called with the found element after it was found but before a path is built.</param>
            <returns>The element at the specified location or null if nothing was found.</returns>
            <remarks>This method requires a Ranorex Professional/Premium license.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.FindFromPoint(System.Drawing.Point,Ranorex.Core.RxPath@)">
            <summary>
            Find an element by screen location and build its RxPath. The found element is a descendant of this
            instance or this instance itself.
            </summary>
            <param name="screenLocation">The location where the element is located.</param>
            <param name="resultPath">The result RxPath.</param>
            <returns>The element at the specified location or null if nothing was found.</returns>
            <remarks>This method requires a Ranorex Professional/Premium license.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.FindFromPoint(System.Drawing.Point)">
            <summary>
            Find an element by screen location. The found element is a descendant of this
            instance or this instance itself.
            </summary>
            <param name="screenLocation">The location where the element is located.</param>
            <returns>The element at the specified location or null if nothing was found.</returns>
            <remarks>This method requires a Ranorex Professional/Premium license.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.IsAncestor(Ranorex.Core.Element)">
            <summary>
            Determines whether the current element is an ancestor of the specified child element.
            </summary>
            <param name="child">The child element to test.</param>
            <returns>
                <c>true</c> if the this element is an ancestor; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Element.FindChildFromPointByRectangle(System.Drawing.Point,System.Boolean)">
            <summary>
            Find a child of this element by screen location, by searching the element tree for a best-fitting rectangle.
            </summary>
            <param name="screenLocation">The location where the child is located.</param>
            <param name="searchAll">If <c>true</c>, all children are searched and the first containing the specified
            point is returned; if <c>false</c>, it is assumed that the hierarchical element relationship is also
            reflected by the geometric structure of the corresponding elements. This way the best fitting
            element is returned.
            <para>Generally said, one should set this parameter to <c>true</c> if the hierarchical relationship
            between elements is not reflected by their geometric structure.</para></param>
            <returns>The element found at the specified location.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.FindFromRemainingElementsFromPoint(System.Drawing.Point,System.Int32)">
            <summary>
            Find the Element containing the location and start searching elements only after index
            </summary>
            <param name="screenLocation"></param>
            <param name="childIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Ranorex.Core.Element.FindChildOrSelfFromPointByRectangle(System.Drawing.Point,System.Boolean)">
            <summary>
            Find a child of this element by screen location, or the element itself.
            </summary>
            <param name="screenLocation">The location to search for.</param>
            <param name="searchAll">If <c>true</c>, all children are searched and the first containing the specified
            point is returned; if <c>false</c>, it is assumed that the hierarchical element relationship is also
            reflected by the geometric structure of the corresponding elements. This way the best fitting
            element is returned.
            <para>Generally said, one should set this parameter to <c>true</c> if the hierarchical relationship
            between elements is not reflected by their geometric structure.</para></param>
            <returns>The element at the specified location.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.GetPath(Ranorex.Core.PathBuildMode,Ranorex.Core.Element)">
            <summary>
            Builds an RxPath to the element, relative to another element.
            </summary>
            <param name="buildMode">Specifies how the path should be built. (optimization vs. runtime tradeoff)</param>
            <param name="relativeToElement">The element to which the path is relative to.</param>
            <returns>The path of the element.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.GetPath(Ranorex.Core.PathBuildMode)">
            <summary>
            Builds an absolute RxPath to the element.
            </summary>
            <param name="buildMode">Specifies how the path should be built. (optimization vs. runtime tradeoff)</param>
            <returns>The path of the element.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.GetRobustPath">
            <summary>
            Builds an absolute RxPath to the element.
            </summary>
            <returns>The path of the element.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.HasCapability(System.String)">
            <summary>
            Tests if the element possesses a certain capability (or role), by name.
            </summary>
            <param name="capName">The name of the capability to look for.</param>
            <returns>True if the element has the capability or role.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.Equals(Ranorex.Core.Element,Ranorex.Core.Element)">
            <summary>
            Returns <c>true</c> if the two instances are considered equal.
            </summary>
            <param name="a">An instance.</param>
            <param name="b">Another instance.</param>
            <returns><c>True</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.IsEqual(Ranorex.Core.Element)">
            <summary>
            Compares two elements by comparing their flavor elements or their screen rectangles if no flavor comparison is possible.
            </summary>
            <param name="elem">The element to compare to.</param>
            <returns>True if the elements are equal.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.Equals(System.Object)">
            <summary>
            Compares the element to an object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if obj and the element are the same.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.GetHashCode">
            <summary>
            Default implementation override.
            </summary>
            <returns>The object hash code.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.EnsureVisible">
            <summary>
            Tries to make the element visible to the user.
            This is usually accomplished by bringing the element or one of its ancestors to foreground.
            </summary>
            <returns>True if the operation has succeeded.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.CaptureCompressedImage">
            <summary>
            Captures a PNG image of the element.
            </summary>
            <returns>A compressed image of the element.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.As``1">
            <summary>
            Returns an adapter of the specified type for the element.
            </summary>
            <typeparam name="T">The adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The specified adapter for the element or <c>null</c> if the
            element does not provide the capabilities required for the adapter.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.CreateSnapshot(Ranorex.Libs.CacheSession,System.Int32,Ranorex.Core.Element,System.Action{Ranorex.Core.Element})">
            <summary>
            Creates a recursive snapshot clone of this element and all its children.
            </summary>
            <param name="depth">The depth to use for creating the snapshot. (0 = only element itself, Int.Max = all)</param>
            <param name="session">The cache session to use for storing the element values.</param>
            <param name="parentElement">The parent to set for the newly created element.</param>
            <param name="elementCallback"> The callback to get the current element</param>
            <returns>
            The snapshot clone. Note that this clone does not support any "live" behaviors.
            </returns>
            <remarks>If the subtree is large, this can take a very long time.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.CreateSnapshot(Ranorex.Libs.CacheSession,System.Int32,Ranorex.Core.Element,System.Boolean,System.Boolean,System.Action{Ranorex.Core.Element})">
            <summary>
            Creates a recursive snapshot clone of this element and all its children.
            </summary>
            <param name="depth">The depth to use for creating the snapshot. (0 = only element itself, Int.Max = all)</param>
            <param name="session">The cache session to use for storing the element values.</param>
            <param name="parentElement">The parent to set for the newly created element.</param>
            <param name="includeDynamicAttributeValues">Specifies whether to store values from dynamic attributes.</param>
            <param name="includeDynamicCapability">Specifies whether to get and store the dynamic capability.</param>
            <param name="elementCallback"> The callback to get the current element</param>
            <returns>
            The snapshot clone. Note that this clone does not support any "live" behaviors.
            </returns>
            <remarks>If the subtree is large, this can take a very long time.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.CreateSnapshot(Ranorex.Libs.CacheSession,System.Boolean,Ranorex.Core.Element@,System.Action{Ranorex.Core.Element})">
            <summary>
            Creates a recursive snapshot clone of this element, all its children, and optionally
            the parent lineage of the element.
            </summary>
            <param name="session">The <see cref="T:Ranorex.Libs.CacheSession"/> to store data in.</param>
            <param name="includeParents">Determines if the parents are included</param>
            <param name="root">Returns the root element of the created snapshot.</param>
            <param name="elementCallback"> The callback to get the current element</param>
            <returns>
            The snapshot clone. Note that this clone does not support any "live" behaviors.
            </returns>
            <remarks>If the subtree is large, this can take a very long time.</remarks>
        </member>
        <member name="P:Ranorex.Core.Element.IsSnapshot">
            <summary>
            Gets a value indicating whether this instance is a snapshot.
            </summary>
            <value>
                <c>true</c> if this instance is a snapshot; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Element.IsRemote">
            <summary>
            Gets a value indicating whether the element resides on a remote device.
            </summary>
            <value>
                <c>true</c> if this instance resides on a remote device; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.Element.Limitations">
            <summary>
            Gets a list of technology specify limitations that are associated with this element.
            </summary>
            <remarks>The list implementation checks for duplicates and <c>null</c> entries and does not
            add/insert such entries.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.op_Implicit(System.String)~Ranorex.Core.Element">
            <summary>
            Implicitly converts a string to an element instance by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The result element.</returns>
            <remarks>The <see cref="P:Ranorex.Core.RxPath.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.FromPath(System.String)">
            <summary>
            Converts a string to an element instance by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The result element.</returns>
            <remarks>The <see cref="P:Ranorex.Core.RxPath.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
        </member>
        <member name="M:Ranorex.Core.Element.EnsureDynamicTypeCachesCreated">
            <summary>
            Creates dynamic capability type caches for use in SetAttributeValue(string,string) and InvokeAction(string, string[])
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.EnsureTypeCachesCreated">
            <summary>
            Creates type caches for use in SetAttributeValue(string,string) and InvokeAction(string, string[])
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.AddCapabilityToTypeCaches(Ranorex.Core.Capability)">
            <summary>
            Adds capability list to the type caches for use in SetAttributeValue(string,string) and InvokeAction(string, string[])
            </summary>
            <remarks>Make sure to lock typeCacheLockObject.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.AddAttributesAndActionsToTypeCaches(System.Collections.Generic.ICollection{Ranorex.Core.AttributeDescriptor},System.Collections.Generic.ICollection{Ranorex.Core.ActionDescriptor})">
            <summary>
            Adds attribute/action lists to the type caches for use in SetAttributeValue(string,string) and InvokeAction(string, string[])
            </summary>
            <remarks>Make sure to lock typeCacheLockObject.</remarks>
        </member>
        <member name="M:Ranorex.Core.Element.RefreshDescriptorCache">
            <summary>
            Renews the descriptor cache.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Element.AddDescriptors(Ranorex.Core.Capability,System.Collections.Generic.List{Ranorex.Core.AttributeDescriptor},System.Collections.Generic.List{Ranorex.Core.ActionDescriptor})">
            <summary>
            Helper for building the descriptor cache.
            </summary>
            <param name="capability">.</param>
            <param name="attributes">.</param>
            <param name="actions">.</param>
        </member>
        <member name="M:Ranorex.Core.Element.GetFromAttributeCache(System.String,System.Object@)">
            <summary>
            Helper for cache lookup.
            </summary>
            <param name="name">.</param>
            <param name="value">.</param>
            <returns>.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.SetInAttributeCache(System.String,System.Object)">
            <summary>
            Helper for cache lookup.
            </summary>
            <param name="name">.</param>
            <param name="value">.</param>
        </member>
        <member name="M:Ranorex.Core.Element.IsChild(Ranorex.Core.Element,Ranorex.Core.Element@)">
            <summary>
            Returns whether <paramref name="element"/> is a child of <paramref name="parentElement"/>.
            </summary>
            <param name="parentElement">.</param>
            <param name="element">.</param>
            <remarks>IF true, the element is replaced by the corresponding element get via
            the <see cref="P:Ranorex.Core.Element.Children"/> property.</remarks>
            <returns>.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.CalcFlavorElementRect">
            <summary>
            Calculates the screen rectangle from the flavor element rectangle which can optionally be in client coordinates.
            </summary>
            <returns>The screen rectangle of the flavor element.</returns>
        </member>
        <member name="M:Ranorex.Core.Element.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Ranorex.Core.ElementEngine">
            <summary>
            The ElementEngine is a singleton which controls element tree construction, element lifecycle, and manages all flavors and capabilities
            registered by the plugins.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.Initialize">
            <summary>
            Performs low-level static initialization without checking license or loading plugins.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.#ctor">
            <summary>
            Private ctor.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.GetProductFeatures">
            <summary>
            Gets the features supported by the currently used license.
            </summary>
            <returns>The features supported by the currently used license.</returns>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.IsLicensed">
            <summary>
            Gets a value indicating whether a valid Ranorex license has already been acquired
            for this process.
            </summary>
            <value>
                <c>true</c> if a valid Ranorex license has already been acquired; otherwise, <c>false</c>.
            </value>
            <remarks>This method will return <c>false</c> if no node-locked license is installed
            and no floating license was yet acquired by this process, even if the trial period
            is not yet over.</remarks>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.GetCurrentlyUsedLicense">
            <summary>
            Gets the currently used license (which is checked to be valid).
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.WaitForValidLicense">
            <summary>
            Waits for valid license to become available.
            </summary>
            <remarks>This method works both with floating and node-locked licenses being configured
            on the local machine. If no license is configured, this method will instantly return
            whether the evaluation period is still valid (the evaluation dialog will be displayed,
            when the <see cref="P:Ranorex.Core.ElementEngine.Instance"/> property is first accessed).
            <para>No dialogs or error messages will be shown by this method.</para></remarks>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.WaitForValidLicense(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Waits for valid license to become available.
            </summary>
            <param name="timeout">The maximum time the method should wait for a license to become available.</param>
            <param name="checkInterval">The interval between individual checks for a valid
            license to become available.</param>
            <returns><c>true</c> if a valid license becomes available within the timeout;
            <c>false</c> otherwise.</returns>
            <remarks>This method works both with floating and node-locked licenses being configured
            on the local machine. If no license is configured, this method will instantly return
            whether the evaluation period is still valid (the evaluation dialog will be displayed,
            when the <see cref="P:Ranorex.Core.ElementEngine.Instance"/> property is first accessed).
            <para>No dialogs or error messages will be shown by this method.</para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="timeout"/> is
            or <paramref name="checkInterval"/> is negative.</exception>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.Instance">
            <summary>
            Retrieves the instance of the element engine.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.TimeoutEpsilon">
            <summary>
            Gets or sets the time used for internal sleep operations in between find operations
            using a timeout.
            </summary>
            <value>
            The timeout epsilon; the default value is 50 milliseconds.
            </value>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.RootElement">
            <summary>
            The root element of the element tree.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.Flavors">
            <summary>
            All flavors registered by plugins, retrievable by their <see cref="P:Ranorex.Core.Flavor.Name"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.Capabilities">
            <summary>
            All capabilities registered by plugins including all standard roles,
            retrievable by their <see cref="P:Ranorex.Core.Descriptor.Name"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.CapabilityLookup">
            <summary>
            A lookup table that provides a mapping from a capability's <see cref="P:Ranorex.Core.Descriptor.Name"/>,
            <see cref="P:Ranorex.Core.Descriptor.DisplayName"/>, <see cref="P:Ranorex.Core.Capability.ShortName"/>, and
            <see cref="P:Ranorex.Core.Capability.ShortDisplayName"/> to the corresponding capability.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.AdapterTypes">
            <summary>
            All adapater types registered by plugins, retrievable by the <see cref="P:Ranorex.Core.Descriptor.Name"/>
            of their corresponding <see cref="T:Ranorex.Core.Capability"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementEngine.GlueRules">
            <summary>
            The complete list of tree construction rules registered by the plugins.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.Register(Ranorex.Core.Flavor)">
            <summary>
            Registers a new flavor with the element engine.
            </summary>
            <param name="flavor">The flavor to register.</param>
            <remarks>Note that the flavor names must be unique. This should only be used by the <see cref="T:Ranorex.Core.PluginManager"/>.</remarks>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If registering fails.</exception>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.Register(Ranorex.Core.Capability)">
            <summary>
            Registers a capability with the element engine.
            </summary>
            <param name="capability">The capability to register.</param>
            <remarks>Note that the capability names must be unique. This should only be used by the <see cref="T:Ranorex.Core.PluginManager"/>.</remarks>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If registering fails.</exception>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.Register(Ranorex.Core.LineageGlueRule)">
            <summary>
            Registers a tree construction rule with the element engine.
            </summary>
            <param name="rule">The name of the rule.</param>
            <remarks>Note that the rule names must be unique. This should only be used by the <see cref="T:Ranorex.Core.PluginManager"/>.</remarks>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If registering fails.</exception>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.Register(System.String,System.Type)">
            <summary>
            Registers an adapter type for a given capability name with the element engine.
            </summary>
            <param name="capabilityName">The name of the capability for which the adapter is registered.</param>
            <param name="adapterType">The type of the adapter to be registered.</param>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If registering fails.</exception>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.CreateElement(Ranorex.Core.Role,System.Collections.Generic.IList{System.String},System.String,Ranorex.Core.FlavorElement,Ranorex.Core.Element,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new element.
            </summary>
            <param name="role">The role for the new element.</param>
            <param name="capabilityNames">The capability names which are supported by the element.</param>
            <param name="preferredCapName">The name of elements preferred capability.</param>
            <param name="flavorElement">The instance of the flavor element associated with the new element.</param>
            <param name="parent">The parent of the new element or null if it is a root element.</param>
            <param name="initialValues">The initial values.</param>
            <returns>
            The newly constructed element.
            </returns>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.ApplyGlueRules(Ranorex.Core.Element,System.Boolean)">
            <summary>
            Applies all applicable glue rules on a given element.
            </summary>
            <param name="element">The element to which the rules are applied.</param>
            <param name="includeRemotes">Include remote hosts when applying glue rules. Default is <b>true</b>.</param>
            <returns></returns>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.SortGlueRules">
            <summary>
            Sort glue rules by topological dependency, per flavor
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementEngine.CheckFlavorRegistered(Ranorex.Core.Flavor)">
            <summary>
            Sanity check for flavor names.
            </summary>
            <param name="flavor">.</param>
        </member>
        <member name="T:Ranorex.Core.ElementEngine.RootFlavor">
            <summary>
            Dummy, invisible, all-important root flavor.
            </summary>
        </member>
        <member name="T:Ranorex.Core.ElementInfo">
            <summary>
            Represents a container for a single captured element and some additional information.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementInfo.#ctor(Ranorex.Core.Element,Ranorex.Core.RxPath,System.Drawing.Image,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.ElementInfo"/> class.
            </summary>
            <param name="capturedElement">A snapshot of an element.</param>
            <param name="path">The path of the element.</param>
            <param name="screenshot">An screenshot of the element's UI representation (can be null).</param>
            <param name="sourceName">A logical name of the source which created the element info.</param>
            <param name="id">A unique id for identifying the element info.</param>
        </member>
        <member name="M:Ranorex.Core.ElementInfo.#ctor(Ranorex.Core.Element,Ranorex.Core.RxPath,Ranorex.Core.RxPath,System.Drawing.Image,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.ElementInfo"/> class.
            </summary>
            <param name="capturedElement">A snapshot of an element.</param>
            <param name="path">The path of the element.</param>
            <param name="robustPath">The robust path of the element.</param>
            <param name="screenshot">An screenshot of the element's UI representation (can be null).</param>
            <param name="sourceName">A logical name of the source which created the element info.</param>
            <param name="id">A unique id for identifying the element info.</param>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.Element">
            <summary>
            The snapshot of the element contained in the element info.
            </summary>
            <value>An element snapshot.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.LiveElementOrSnapshot">
            <summary>
            The live reference element if available, otherwhise the clone of the element contained in the element info.
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.SourceName">
            <summary>
            The logical name of the source which created this element info.
            </summary>
            <value>The name of the source.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.Path">
            <summary>
            The path of the element contained in the element info.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.RobustPath">
            <summary>
            The robust path of the element contained in the element info.
            </summary>
            <value>The robust path.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.RelativePath">
            <summary>
            The relative path of the element contained in the element info, if a root element was specified when creating the ElementInfo.
            </summary>
            <value>The relative path.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.ScreenShot">
            <summary>
            Gets or sets the screen shot of the element.
            </summary>
            <value>The screen shot.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.Id">
            <summary>
            Gets or sets the unique identifier for the element info.
            </summary>
            <value>The Guid.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.PathElementMap">
            <summary>
            Gets the path element map.
            </summary>
            <value>The path element map.</value>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.ReferencePath">
            <summary>
            The full-length reference path if the path was built with StepCostReduce, null otherwise
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.LiveReferenceElement">
            <summary>
            The instance of the live element this element info was created from.
            </summary>
            <value>The live reference element.</value>
            <remarks>This is not persisted, and is allowed to be null.</remarks>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.ReferenceImage">
            <summary>
            A bitmap for reference information (not for image-based, but for reference screenshots)
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementInfo.Parent">
            <summary>
            Gets or sets the parent of this instance.
            </summary>
            <value>The parent of this instance.</value>
        </member>
        <member name="M:Ranorex.Core.ElementInfo.Create(Ranorex.Core.Element,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new element info from a given element.
            </summary>
            <param name="target">The target element to create the info from.</param>
            <param name="captureImage">Set to true if an image should be captured.</param>
            <param name="captureLineage">if set to <c>true</c> also capture all parents.</param>
            <param name="sourceName">An arbitrary source name.</param>
            <returns>The created ElementInfo.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementInfo.Create(Ranorex.Core.Element,Ranorex.Core.RxPath,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new element info given an element and a path.
            </summary>
            <param name="target">The target element to create the info from.</param>
            <param name="path">The already constructed element path.</param>
            <param name="refPath">The reference path for the element. Can be null.</param>
            <param name="captureLineage">if set to <c>true</c> also capture all parents.</param>
            <param name="captureImage">Specifies whether to capture a screenshot for the element.</param>
            <param name="sourceName">An arbitrary source name.</param>
            <returns>The created ElementInfo.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementInfo.Create(Ranorex.Core.Element,Ranorex.Core.RxPath,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new element info given an element and a path.
            </summary>
            <param name="target">The target element to create the info from.</param>
            <param name="path">The already constructed element path.</param>
            <param name="captureLineage">if set to <c>true</c> also capture all parents.</param>
            <param name="captureImage">Specifies whether to capture a screenshot for the element.</param>
            <param name="sourceName">An arbitrary source name.</param>
            <param name="refPath">The reference path for the element. Can be null.</param>
            <param name="includeDynamicAttributeValues">Specifies whether to include values from dynamic
             attributes in the <see cref="P:Ranorex.Core.ElementInfo.Element"/> snapshot.</param>
            <returns>The created ElementInfo.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementInfo.Create(Ranorex.Core.Element,Ranorex.Core.Element,Ranorex.Core.RxPath,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new element info given an element and a path.
            </summary>
            <param name="target">The target element to create the info from.</param>
            <param name="rootElement">The root element to create an additonal relative path to the target.</param>
            <param name="path">The already constructed element path.</param>
            <param name="captureLineage">if set to <c>true</c> also capture all parents.</param>
            <param name="captureImage">Specifies whether to capture a screenshot for the element.</param>
            <param name="sourceName">An arbitrary source name.</param>
            <param name="refPath">The reference path for the element. Can be null.</param>
            <param name="includeDynamicAttributeValues">Specifies whether to include values from dynamic
             attributes in the <see cref="P:Ranorex.Core.ElementInfo.Element"/> snapshot.</param>
            <returns>The created ElementInfo.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementInfo.Clone">
            <summary>
            Creates a deep clone of the ElementInfo instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:Ranorex.Core.GlueRuleRegisteredEventHandler">
            <summary>
            An event handler delegate for the GlueRuleRegistered event.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Flavor">
            <summary>
            Represents a flavor.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Flavor.#ctor(System.String,System.String)">
            <summary>
            Creates a new flavor.
            </summary>
            <param name="displayName">The display name of the flavor.</param>
            <param name="description">A short description of the flavor.</param>
        </member>
        <member name="M:Ranorex.Core.Flavor.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new flavor.
            </summary>
            <param name="displayName">The display name of the flavor.</param>
            <param name="description">A short description of the flavor.</param>
            <param name="baseFlavorName">The name of the flavor the flavor derives from or null.</param>
        </member>
        <member name="E:Ranorex.Core.Flavor.GlueRuleRegistered">
            <summary>
            Occurs when a glue rule is registered.
            </summary>
            <remarks>This event usually occurs when a plugin is loaded.</remarks>
        </member>
        <member name="P:Ranorex.Core.Flavor.Enabled">
            <summary>
            Enables or disables the flavor.
            </summary>
            <remarks>
            If the flavor is disabled, no glue rules for this flavor are executed.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.Flavor.Name">
            <summary>
            The name of the flavor.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Flavor.DisplayName">
            <summary>
            The name of instance the descriptor refers to, with arbitrary casing.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Flavor.BaseFlavorName">
            <summary>
            The name of the flavor this flavor derives from.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Flavor.BaseFlavor">
            <summary>
            Gets the instance of the flavor this flavor derives from. (Or null if this is not the case).
            </summary>
            <value>The base flavor.</value>
        </member>
        <member name="P:Ranorex.Core.Flavor.Description">
            <summary>
            The optional descritpion of the flavor.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Flavor.GlueRules">
            <summary>
            The list of glue rules for the flavor.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Flavor.UseDesktopImageCapture">
            <summary>
            Defines whether capturing screenshots from elements of this flavor should use the desktop capturing method.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Flavor.UidAttributeName">
            <summary>
            The name of the attribute for this flavor which acts as a unique identifier for an element
            or <c>null</c> if the flavor has no uid attribute.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Flavor.InheritsFrom(System.String)">
            <summary>
            Test whether the current flavor inherits from a flavor with the given name.
            </summary>
            <param name="flavorName">Name of the flavor.</param>
            <returns>True if the current flavor derives from the flavor with name <paramref name="flavorName"/>.</returns>
        </member>
        <member name="M:Ranorex.Core.Flavor.ToString">
            <summary>
            The name of the flavor.
            </summary>
            <returns>Name string.</returns>
        </member>
        <member name="M:Ranorex.Core.Flavor.Register(Ranorex.Core.LineageGlueRule)">
            <summary>
            Registers a new glue rule with the flavor.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Flavor.SortGlueRules">
            <summary>
            Topologically sorts the glue rules.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Flavor.OnGlueRuleRegistered(Ranorex.Core.GlueRuleRegisteredEventArgs)">
            <summary>
            Raises the <see cref="E:Ranorex.Core.Flavor.GlueRuleRegistered"/> event.
            </summary>
            <param name="args">The <see cref="T:Ranorex.Core.GlueRuleRegisteredEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Ranorex.Core.Flavor.TopoNode">
            <summary>
            Helper for topological sorting closure.
            </summary>
        </member>
        <member name="T:Ranorex.Core.GlueRuleRegisteredEventArgs">
            <summary>
            EventArgs for the GlueRuleRegistered event.
            </summary>
        </member>
        <member name="M:Ranorex.Core.GlueRuleRegisteredEventArgs.#ctor(Ranorex.Core.LineageGlueRule)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.GlueRuleRegisteredEventArgs"/> class.
            </summary>
            <param name="glueRule">The glue rule.</param>
        </member>
        <member name="P:Ranorex.Core.GlueRuleRegisteredEventArgs.GlueRule">
            <summary>
            Gets the glue rule which was registered.
            </summary>
            <value>The glue rule.</value>
        </member>
        <member name="T:Ranorex.Core.FindRefineMode">
            <summary>
            Mode for <see cref="M:Ranorex.Core.FlavorElement.GetChildLineageFromPoint(System.Drawing.Point,Ranorex.Core.FindRefineMode@)"/> search postprocessing.
            </summary>
        </member>
        <member name="F:Ranorex.Core.FindRefineMode.None">
            <summary>
            No additional search is needed.
            </summary>
        </member>
        <member name="F:Ranorex.Core.FindRefineMode.SearchHierarchy">
            <summary>
            An additional search is needed and the assumption should be made that the hierarchical
            relationship of elements in the search is reflected by their geometric structure.
            </summary>
        </member>
        <member name="F:Ranorex.Core.FindRefineMode.SearchAll">
            <summary>
            An additional search is needed and no assumption should be made regarding the relationship
            of the elements in the search and their geometric structure.
            </summary>
        </member>
        <member name="F:Ranorex.Core.FindRefineMode.ContinueForeignChildren">
            <summary>
            Indicates that the found lineage/element is unusable and that the search should instead
            be continued on children of the current flavor element that have a foreign flavor.
            </summary>
        </member>
        <member name="F:Ranorex.Core.FindRefineMode.SearchForElement">
            <summary>
            Specifies that the returned lineage <see cref="T:Ranorex.Core.FlavorElement"/> at the specified point
            should be searched in the flavor subtree by using the <see cref="M:Ranorex.Core.FlavorElement.CanReplace(Ranorex.Core.FlavorElement)"/>
            method.
            </summary>
        </member>
        <member name="T:Ranorex.Core.UidFindResult">
            <summary>
            Represents the result status after searching for a unique id.
            </summary>
        </member>
        <member name="F:Ranorex.Core.UidFindResult.Found">
            <summary>
            An element was found for the given unique id.
            </summary>
        </member>
        <member name="F:Ranorex.Core.UidFindResult.NotFound">
            <summary>
            No element was found for the given unique id.
            </summary>
        </member>
        <member name="F:Ranorex.Core.UidFindResult.Failed">
            <summary>
            The underlying flavor implementation was not able to find something by unique id because of an internal error.
            </summary>
        </member>
        <member name="F:Ranorex.Core.UidFindResult.NotSupported">
            <summary>
            The underlying flavor does not support search by unique id. (Default)
            </summary>
        </member>
        <member name="T:Ranorex.Core.EnsureVisibleBehaviorType">
            <summary>
            Describes how <see cref="M:Ranorex.Core.Element.EnsureVisible"/> calls are forwarded to a FlavorElement.
            </summary>
        </member>
        <member name="F:Ranorex.Core.EnsureVisibleBehaviorType.Always">
            <summary>
            <see cref="M:Ranorex.Core.FlavorElement.EnsureVisible"/> is always called if the flavor element is the target or part of the lineage of an <see cref="M:Ranorex.Core.Element.EnsureVisible"/>  call.
            </summary>
        </member>
        <member name="F:Ranorex.Core.EnsureVisibleBehaviorType.TargetOnly">
            <summary>
            <see cref="M:Ranorex.Core.FlavorElement.EnsureVisible"/> is only called if the flavor element is the target of an <see cref="M:Ranorex.Core.Element.EnsureVisible"/> call.
            </summary>
        </member>
        <member name="F:Ranorex.Core.EnsureVisibleBehaviorType.Never">
            <summary>
            <see cref="M:Ranorex.Core.FlavorElement.EnsureVisible"/> is never called on the flavor element.
            </summary>
        </member>
        <member name="T:Ranorex.Core.FlavorElement">
            <summary>
            A container for flavor-specific element data which handles the default element properties.
            </summary>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.#ctor(Ranorex.Core.Flavor)">
            <summary>
            For internal use only. Needed to create <see cref="T:Ranorex.Core.ElementEngine.FallbackRoot"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.#ctor(System.String)">
            <summary>
            Creates a new flavor element.
            </summary>
            <param name="flavorName">The flavor name for this flavor element.</param>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.Flavor">
            <summary>
            The flavor of the flavor element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.FlavorName">
            <summary>
            The flavor name of the flavor element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.Valid">
            <summary>
            True if the flavor element is still valid.
            </summary>
            <remarks>
            To be implemented by the deriving class.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.ElementRectangle">
            <summary>
            The client or screen rectangle of the flavor element depending on the value
            returned by <see cref="P:Ranorex.Core.FlavorElement.IsClientRectangle"/>.
            </summary>
            <remarks>
            To be implemented by the deriving class.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.IsClientRectangle">
            <summary>
            Determines if the ElementRectangle property returns client or screen coordinates.
            </summary>
            <remarks>
            To be implemented by the deriving class.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.ForceGeometricSearchAll">
            <summary>
            Determines if the ElementRectangle is expected to be outside the bounds of its parent rectangle, and might be invisible.
            Forces FindChildFromPointByRectangle() to switch to 'search all' behavior.
            </summary>
            <remarks>
            To be overridden by the deriving class. Returns false by default.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.Visible">
            <summary>
            True if the element is visible.
            </summary>
            <remarks>
            To be implemented by the deriving class.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.HasFocus">
            <summary>
            True if the element has the focus.
            </summary>
            <remarks>
            To be implemented by the deriving class.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.Enabled">
            <summary>
            True if the element is enabled.
            If the element cannot be enabled or disabled, return true.
            </summary>
            <remarks>
            To be implemented by the deriving class.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.IsUidDomainRoot">
            <summary>
            Gets a value indicating whether this flavor element can act as a unique id domain root.
            </summary>
            <value>
                <c>true</c> if this instance is uid domain root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.SupportsNativePathSearch">
            <summary>
            Indicates whether this flavor element supports searching for native RxPaths
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.EnsureVisibleBehavior">
            <summary>
            Describes how <see cref="M:Ranorex.Core.Element.EnsureVisible"/> calls are forwarded to a <see cref="T:Ranorex.Core.FlavorElement"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.Screen">
            <summary>
            Returns the screen object the element is on (e.g desktop or device screen).
            </summary>
            <remarks>
            To be overridden by the deriving class if the element is not on the desktop screen.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.Token">
            <summary>
            Gets the runtime token associated with the flavor element.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.DontCache">
            <summary>
            Indicates that the element should not be cached. Defaults to false.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.MinPathAttributes">
            <summary>
            Indicates that the minimum number of attributes to use when creating an RxPath location step for this element. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorElement.EvaluateExpensiveAttributes">
            <summary>
            Gets a value indicating whether expensive attributes should be evaluated.
            </summary>
            <value>
                <c>true</c> if expensive attributes should be evaluated; otherwise, <c>false</c>.
            </value>
            <remarks>This property checks whether <see cref="P:Ranorex.Libs.RanorexEnvironment.IsRanorexApplication"/> is enabled
            and if expensive attributes are disabled when running in tools.</remarks>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetChildLineageFromUid(System.String,Ranorex.Core.UidFindResult@)">
            <summary>
            Gets the child lineage from the current element to the element with the given unique id.
            </summary>
            <param name="uidValue">The uid value to search for.</param>
            <param name="result">The result status. This defaults to FindStatus.NotSupported if the flavor does not support unique id search.</param>
            <returns>A lineage of elements or null if nothing was found or the method is not supported.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetChildLineagesFromPath(Ranorex.Core.RxPath,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Gets the child lineages from the current element to the elements with the given RxPath.
            </summary>
            <remarks>
            Implementations are allowed to not process the whole path by specifying a consumedSteps length shorter
            than the complete path suffix length (from startIndex).
            </remarks>
            <param name="path">The relative RxPath to search for.</param>
            <param name="startIndex">The index to start searching from in the supplied RxPath.</param>
            <param name="consumedSteps">The number of steps consumed in the RxPath by the search operation.</param>
            <param name="findSingle">Indicates whether the search should complete after matching one element.</param>
            <returns>Lineages of elements or an empty list if nothing was found, or null if the operation failed for some reason.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetChildLineageFromPoint(System.Drawing.Point,Ranorex.Core.FindRefineMode@)">
            <summary>
            Returns a list of flavor elements that is the lineage to the flavor element
            at the specified screen location.
            </summary>
            <returns>The lineage to the flavor element at the specified point as a list.</returns>
            <param name="screenLocation">The screen location to search at.</param>
            <param name="refineMode">Can be set to indicate that further searching is required.</param>
            <remarks>
            The first element in the returned list is the direct child of this flavor element,
            the k-th element is the parent of the (k+1)-th element, and the last element is
            the actual flavor element at the specified screen location. Consequently, an empty list
            is to be returned if this element is the best fitting element at the requested point.
            <para>
            Returns <c>null</c> if the specified <paramref name="screenLocation"/> is not within this
            or one of its descendant elements.
            </para>
            </remarks>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetElementCapabilities(Ranorex.Core.Element,Ranorex.Core.Role@,System.String[]@,System.String@)">
            <summary>
            Supplies the role, a list of capabilities and a preferred capability names to the caller.
            This method called when building a new element from the flavor element.
            </summary>
            <param name="parent">The parent element of the element to be constructed. (for reference only)</param>
            <param name="role">The role the element should have.</param>
            <param name="capabilities">The list of capabilities the element should have.</param>
            <param name="preferredCap">The preferred capability the element should have.</param>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetDynamicDescriptors(System.Collections.Generic.IList{Ranorex.Core.AttributeDescriptor}@,System.Collections.Generic.IList{Ranorex.Core.ActionDescriptor}@)">
            <summary>
            Gets the descriptors for the dynamic attributes and actions that the element supports.
            </summary>
            <param name="attributes">The dynamic attributes that the element supports.</param>
            <param name="actions">The dynamic actions that the element supports.</param>
            <remarks>The default implementation returns empty lists for <paramref name="attributes"/> and
            <paramref name="actions"/>. Any overriding method should fill the returned lists.</remarks>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetInitialValues">
            <summary>
            Gets the initial cacheable values which are then stored in the active cache session, if any.
            </summary>
            <returns>A list of key/value pairs with initial values.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.Focus">
            <summary>
            Focuses the flavor element, if possible.
            </summary>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetAttributeValue(Ranorex.Core.Element,System.String)">
            <summary>
            Needs to be implemented for attribute value read access.
            </summary>
            <param name="element">The element instance used.</param>
            <param name="name">The name of the attribute (lowercased).</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.InvokeAction(Ranorex.Core.Element,System.String,System.Object[])">
            <summary>
             Needs to be implemented for element action invocation.
            </summary>
            <param name="element">The element instance used.</param>
            <param name="name">The name of the action (lowercased).</param>
            <param name="args">A list of invocation parameters.</param>
            <returns>The invocation result. Can be null if the return type is <see cref="T:System.Void"/>.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.SetAttributeValue(Ranorex.Core.Element,System.String,System.Object)">
            <summary>
            Needs to be implemented for attribute value write access.
            </summary>
            <param name="element">The element instance used.</param>
            <param name="name">The name of the attribute (lowercased).</param>
            <param name="value">The attribute value to be set.</param>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.EnsureVisible">
            <summary>
            Ensures that the flavor element is visible.
            </summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.CanReplace(Ranorex.Core.FlavorElement)">
            <summary>
            Returns a value specifying if this flavor element can replace <paramref name="elem"/>.
            </summary>
            <param name="elem">The element to replace.</param>
            <returns><c>True</c> if this flavor element can replace <paramref name="elem"/>,
            otherwise <c>false</c>.</returns>
            <remarks>
            The base method returns <c>true</c> if this flavor element <see cref="M:Ranorex.Core.FlavorElement.IsEqual(Ranorex.Core.FlavorElement)"/>
            to <paramref name="elem"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.IsEqual(Ranorex.Core.FlavorElement)">
            <summary>
            Compares to flavor elements. This should be implemented using the best comparison method available.
            </summary>
            <param name="flavorElem">The flavor element to compare to.</param>
            <returns>True if the flavor elements are equal.</returns>
            <remarks>
            The base method compares the token values returned by <see cref="M:Ranorex.Core.FlavorElement.GetRuntimeTokenValues"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.CreateElement(Ranorex.Core.Element)">
            <summary>
            Helper used by the <see cref="T:Ranorex.Core.ElementEngine"/> to create an <see cref="T:Ranorex.Core.Element"/> out of the flavor element.
            </summary>
            <param name="parentElement">The parent element of the element to be created, for reference.</param>
            <returns>The newly created element.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.HitTest(System.Drawing.Point)">
            <summary>
            Performs an optional hit test on a point within the element's rectangle.
            The default implementation returns 'true'.
            </summary>
            <remarks>
            This should return 'false' if the point is transparent regarding to mouse clicks.
            </remarks>
            <param name="localPoint">The point in local coordinates.</param>
            <returns>Returns true if the point is within the element, otherwise false.</returns>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.AssertArgumentTypes(System.Type[],System.Object[])">
            <summary>
            Validates a list of argument objects against a list of types.
            </summary>
            <param name="types">The list of types.</param>
            <param name="args">The list of argument instances.</param>
            <exception cref="T:System.ArgumentException">Thrown if the argument count or argument types do not match.</exception>
            <remarks><c>null</c> is not considered a valid argument.</remarks>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.AssertArgumentTypes(System.Type[],System.Object[],System.Boolean[])">
            <summary>
            Validates a list of argument objects against a list of types.
            </summary>
            <param name="types">The list of types.</param>
            <param name="args">The list of argument instances.</param>
            <param name="allowNull">A list of values specifying whether <c>null</c> is a valid argument.</param>
            <exception cref="T:System.ArgumentException">Thrown if the argument count or argument types do not match.</exception>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.AssertArgumentType(System.Type,System.Object)">
            <summary>
            Validates the type of an argument.
            </summary>
            <param name="type">The asserted type.</param>
            <param name="arg">The object to be asserted.</param>
            <exception cref="T:System.ArgumentException">Thrown if the types do not match.</exception>
            <remarks><c>null</c> is not considered a valid argument.</remarks>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.AssertArgumentType(System.Type,System.Object,System.Boolean)">
            <summary>
            Validates the type of an argument.
            </summary>
            <param name="type">The asserted type.</param>
            <param name="arg">The object to be asserted.</param>
            <param name="allowNull">A value specifying whether <c>null</c> is a valid argument.</param>
            <exception cref="T:System.ArgumentException">Thrown if the types do not match.</exception>
        </member>
        <member name="M:Ranorex.Core.FlavorElement.GetRuntimeTokenValues">
            <summary>
            Gets the runtime token values. This must be implemented by the flavors.
            </summary>
            <returns>A collection of objects representing a runtime token.</returns>
        </member>
        <member name="T:Ranorex.Core.FlavorPlugin">
            <summary>
            Represents a plugin which provides new flavors and capabilities.
            </summary>
        </member>
        <member name="M:Ranorex.Core.FlavorPlugin.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Ranorex.Core.Capability},System.Collections.Generic.IList{Ranorex.Core.Flavor},System.Collections.Generic.IList{Ranorex.Core.LineageGlueRule},System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Type}})">
            <summary>
            Constructs a flavor plugin.
            </summary>
            <param name="name">The name of this plugin.</param>
            <param name="description">A short description for this plugin.</param>
            <param name="url">An optional URL for a website containing plugin information.</param>
            <param name="capabilites">A list of capabilities that the plugin provides.</param>
            <param name="flavors">A list of flavors that the plugin provides.</param>
            <param name="glueRules">A list of glue rules that the plugin provides.</param>
            <param name="adapterTypes">A list of adapter types that the plugin provides.</param>
        </member>
        <member name="M:Ranorex.Core.FlavorPlugin.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Ranorex.Core.Capability},System.Collections.Generic.IList{Ranorex.Core.Flavor},System.Collections.Generic.IList{Ranorex.Core.LineageGlueRule},System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.Collections.Generic.IList{Ranorex.Core.Configuration.CustomConfigurationParam})">
            <summary>
            Constructs a flavor plugin.
            </summary>
            <param name="name">The name of this plugin.</param>
            <param name="description">A short description for this plugin.</param>
            <param name="url">An optional URL for a website containing plugin information.</param>
            <param name="capabilites">A list of capabilities that the plugin provides.</param>
            <param name="flavors">A list of flavors that the plugin provides.</param>
            <param name="glueRules">A list of glue rules that the plugin provides.</param>
            <param name="adapterTypes">A list of adapter types that the plugin provides.</param>
            <param name="configurationParams">A list of configuration parameters that the plugin provides.</param>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.Capabilites">
            <summary>
            The list of capabilities provided by the plugin.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.Flavors">
            <summary>
            The list of flavors provided by the plugin.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.GlueRules">
            <summary>
            The list of glue rules provided by the plugin.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.AdapterTypes">
            <summary>
            The list of adapter types provided by the plugin.
            </summary>
            <remarks>This list maps capability names to types that represent adapters for
            the corresponding capability.</remarks>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.ConfigurationParams">
            <summary>
            The list of configuration parameters provided by the plugin.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.RequiredFlavorNames">
            <summary>
            The list of flavors required as a dependency by the plugin.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.PluginControls">
            <summary>
            Controls that the plugin requires to embed in the hosting application (Spy, Recorder, Wizard, Studio). It is not
            guaranteed to the plugin that these controls will always be visible in the UI, e.g. users could hide/disable them.
            </summary>
        </member>
        <member name="P:Ranorex.Core.FlavorPlugin.Enabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled, that is whether all
            its <see cref="T:Ranorex.Core.Flavor"/>s are enabled.
            </summary>
            <value>
              <c>true</c> if all <see cref="T:Ranorex.Core.Flavor"/>s are enabled or the plugin has no flavors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ranorex.Core.FlavorPlugin.Initialize">
            <summary>
            Initializes the plugin. This automatically registers all flavors, caps, cap handlers and rules with the <see cref="T:Ranorex.Core.ElementEngine"/>.
            </summary>
        </member>
        <member name="T:Ranorex.Core.RolesPlugin">
            <summary>
            Pseudo plugin to expose roles as plugin capabilities. Needed to generate role adapters --> DO NOT DELETE!
            </summary>
        </member>
        <member name="M:Ranorex.Core.GlueRuleExecutionStateImpl.IsSkipped(Ranorex.Core.LineageGlueRule)">
            <summary>
            Checks if a specific rule is to be skipped by the engine.
            </summary>
            <param name="rule">.</param>
            <returns>.</returns>
        </member>
        <member name="T:Ranorex.Core.NullableBoolTypeConverter">
            <summary>
            Converts from nullable <see cref="T:System.Boolean"/> to <see cref="T:System.String"/> and vice versa.
            </summary>
        </member>
        <member name="M:Ranorex.Core.NullableBoolTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the Ranorex.Core.NullableBoolTypeConverter class.
            </summary>
        </member>
        <member name="M:Ranorex.Core.NullableBoolTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Creates a nullable <see cref="T:System.Boolean"/> instance from a <see cref="T:System.String"/>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>A nullable <see cref="T:System.Boolean"/> that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Ranorex.Core.NullableBoolTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a nullable <see cref="T:System.Boolean"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>A <see cref="T:System.String"/> representation of the nullable <see cref="T:System.Boolean"/> if
            <paramref name="destinationType"/> is type <see cref="T:System.String"/>; otherwise the value
            returned by the base method.</returns>
        </member>
        <member name="M:Ranorex.Core.NullableBoolTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets standard values for the nullable <see cref="T:System.Boolean"/> type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>A set of default values for the nullable <see cref="T:System.Boolean"/> type.</returns>
        </member>
        <member name="T:Ranorex.Core.IReportMetadata">
            <summary>
            If implemented provides meta data for report generation.
            </summary>
        </member>
        <member name="M:Ranorex.Core.IReportMetadata.GetMetaInfos">
            <summary>
            Returns a (non read-only!) dictionary of <see cref="T:System.String"/> key-value pairs
            specifying meta data for a report.
            </summary>
            <returns>A (non read-only!) dictionary of strings.</returns>
        </member>
        <member name="T:Ranorex.Core.SimpleReportMetadata">
            <summary>
            A simple implementation of the <see cref="T:Ranorex.Core.IReportMetadata"/> interface
            allowing an easy construction of report meta data.
            </summary>
        </member>
        <member name="M:Ranorex.Core.SimpleReportMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.SimpleReportMetadata"/> class.
            </summary>
        </member>
        <member name="M:Ranorex.Core.SimpleReportMetadata.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.SimpleReportMetadata"/> class
            with a single meta data key-value pair.
            </summary>
            <param name="key">The key of the key-value pair.</param>
            <param name="value">The value of the key-value pair.</param>
        </member>
        <member name="M:Ranorex.Core.SimpleReportMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.SimpleReportMetadata"/> class
            containing the specified meta data.
            </summary>
            <param name="metaInfos">A dictionary containing the meta data.</param>
        </member>
        <member name="M:Ranorex.Core.SimpleReportMetadata.Add(System.String,System.String)">
            <summary>
            Adds the specified key-value pair to the meta data of this instance.
            </summary>
            <param name="key">The key of the key-value pair.</param>
            <param name="value">The value of the key-value pair.</param>
            <returns>A reference to this instance so one can chain multiple calls
            of this method together.</returns>
        </member>
        <member name="M:Ranorex.Core.SimpleReportMetadata.GetMetaInfos">
            <summary>
            Returns a (non read-only!) dictionary of <see cref="T:System.String"/> key-value pairs
            specifying meta data for a report.
            </summary>
            <returns>
            A (non read-only!) dictionary of strings.
            </returns>
        </member>
        <member name="T:Ranorex.Core.LineageGlueRule">
            <summary>
            Represents a tree element creation rule.
            </summary>
        </member>
        <member name="M:Ranorex.Core.LineageGlueRule.#ctor(System.String,System.String,System.String,System.String,Ranorex.Core.LineageGlueRule.Action,System.String[],System.String[])">
            <summary>
            Creates a new rule.
            </summary>
            <param name="displayName">The name of rule.</param>
            <param name="description">A short description of the rule.</param>
            <param name="sourceFlavorName">The name of the flavor this rule applies to.</param>
            <param name="outputFlavorName">The name of the flavor to which the created elements belong to.</param>
            <param name="after">A list of rule names which are required to be executed before this rule.
            Only rules registered for the same source flavor can be specified
            (topological sorting within source flavor).</param>
            <param name="before">A list of rule names which are required to be executed after this rule.
            Only rules registered for the same source flavor can be specified
            (topological sorting within source flavor).</param>
            <param name="action">The action this glue rule performs.</param>
        </member>
        <member name="M:Ranorex.Core.LineageGlueRule.#ctor(System.String,System.String,System.String,System.String,Ranorex.Core.LineageGlueRule.Action)">
            <summary>
            Creates a new rule (with no before/after dependencies).
            </summary>
            <param name="displayName">The name of rule.</param>
            <param name="description">A short description of the rule.</param>
            <param name="sourceFlavorName">The name of the flavor this rule applies to.</param>
            <param name="outputFlavorName">The name of the flavor to which the created elements belong to.</param>
            <param name="action">The action performed by the glue rule upon execution.</param>
        </member>
        <member name="T:Ranorex.Core.LineageGlueRule.Action">
            <summary>
            Specifies the action to be performed on source elements by applicable glue rules.
            </summary>
        </member>
        <member name="F:Ranorex.Core.LineageGlueRule.Action.Create">
            <summary>
            Instructs  a glue rule to spawn new elements from the source element.
            </summary>
        </member>
        <member name="F:Ranorex.Core.LineageGlueRule.Action.Replace">
            <summary>
            Instructs a glue rule to replace existing elements in the bucket with (possibly) better ones.
            </summary>
        </member>
        <member name="P:Ranorex.Core.LineageGlueRule.After">
            <summary>
            A list of rule names which are required to be executed before this rule.
            </summary>
            <remarks>Only rules registered for the same source flavor will be considered
            (topological sorting within source flavor).</remarks>
        </member>
        <member name="P:Ranorex.Core.LineageGlueRule.Before">
            <summary>
            A list of rule names which are required to be executed after this rule.
            </summary>
            <remarks>Only rules registered for the same source flavor will be considered
            (topological sorting within source flavor).</remarks>
        </member>
        <member name="P:Ranorex.Core.LineageGlueRule.SourceFlavor">
            <summary>
            The name of the flavor this rule applies to.
            </summary>
        </member>
        <member name="P:Ranorex.Core.LineageGlueRule.OutputFlavor">
            <summary>
            The name of the flavor to which the created elements belong to.
            </summary>
        </member>
        <member name="P:Ranorex.Core.LineageGlueRule.ExecutionAction">
            <summary>
            Gets the action this glue rule performs on the source element and/or element bucket upon execution.
            </summary>
            <value>The execution action.</value>
        </member>
        <member name="M:Ranorex.Core.LineageGlueRule.Execute(Ranorex.Core.GlueRuleExecutionState)">
            <summary>
            Executes the rule.
            </summary>
            <param name="state">The current rule execution state.</param>
            <remarks>
            This has to be implemented by the rule classes.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.LineageGlueRule.BindFlavorNames">
            <summary>
            Helper
            </summary>
        </member>
        <member name="T:Ranorex.Core.Constants">
            <summary>
            API to expose various Ranorex constants to test project code.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Constants.CodeGenVersion">
            <summary>
            Constant string representing the tool version used to generate the code. Mainly used by Ranorex code
            generation tools to create version agnostic generated code to reduce source changes.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Variables.VariableService.SetupRanorexContext">
            <summary>
            Ranorex internal context with variables we can evaluate on demand or do not change during
            application lifetime. This context is more local than the user context and so overrides
            variables from the user context.
            </summary>
        </member>
        <member name="T:Ranorex.Core.FastXml.XmlDocException">
            <summary>
            Exception used by <see cref="T:Ranorex.Libs.Xml.XmlDoc"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Core.FastXml.XmlDocException.#ctor">
            <summary>
            Creates a new XML document exception.
            </summary>
        </member>
        <member name="M:Ranorex.Core.FastXml.XmlDocException.#ctor(System.String)">
            <summary>
            Creates a new XML document exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.Core.FastXml.XmlDocException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new XML document exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Ranorex.Core.FastXml.XmlDocException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new XML document exception.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="F:Ranorex.Core.Validation.ValidationResult.NoValidationErrors">
            <summary>
            A constant IValidationResult that contains not errors and no warnings.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Validation.IValidationMessage.ErrorMessage">
            <summary>
            Gets the error or warning part of the IValidationMessage. I.e. 'No repository item is linked'
            </summary>
        </member>
        <member name="P:Ranorex.Core.Validation.IValidationMessage.ResolveMessage">
            <summary>
            Gets the resolve part of the IValidationMessage. I.e. Select \"No Item\" or restore the item
            </summary>
        </member>
        <member name="P:Ranorex.Core.Validation.IValidationMessage.LinkIndex">
            <summary>
            Gets the index that can be used to link back (find) the source of the IValidationMessage. I.e. item #
            </summary>
        </member>
        <member name="P:Ranorex.Core.Validation.IValidationMessage.Level">
            <summary>
            Gets the MessageLevel of the IValidationMessage
            </summary>
        </member>
        <member name="P:Ranorex.Core.Validation.IValidationMessage.DisplayMessage">
            <summary>
            Gets a formatted string representation of the IValidationMessage. I.e. "&lt;Level&gt; - Action # &lt;Link&gt; : &lt;ErrorMessage&gt;. &lt;ResolveMessage&gt;."
            </summary>
        </member>
        <member name="P:Ranorex.Core.Validation.IValidationMessage.DisplayIndex">
            <summary>
            Gets the displayed index of the source of the IValidationMessage. I.e. the item # shown for the item in a list view. (LinkIndex is 0 but 1 is displayed for the item)
            </summary>
        </member>
        <member name="T:Ranorex.Core.SkipScope">
            <summary>
            Provides a task skip mechanism on an abortable thread if an abort key is set.
            </summary>
        </member>
        <member name="T:Ranorex.Core.RxPath">
            <summary>
            Represents a RanoreXPath.
            </summary>
            <remarks>
            RanoreXPath is modeled after <a href="http://www.w3.org/TR/xpath">W3C XPath</a> and allows easy
            identification/searching/filtering of web elements and navigation in web documents.
            For detailed usage, please refer to the user guide and to the RanoreXPath examples.
            </remarks>
        </member>
        <member name="F:Ranorex.Core.RxPath.DefaultWeightFilterThreshold">
            <summary>
            The weight threshold which determines whether an attribute is used in generated RxPaths.
            </summary>
        </member>
        <member name="F:Ranorex.Core.RxPath.LabelWeightFilterThreshold">
            <summary>
            The weight threshold which determines whether an attribute is used in element labels.
            </summary>
        </member>
        <member name="P:Ranorex.Core.RxPath.BuildOptions">
            <summary>
            Settings which allow tweaking the PathBuildMode.StepCostReduce algorithm.
            </summary>
        </member>
        <member name="M:Ranorex.Core.RxPath.BuildElementPath(Ranorex.Core.Element,Ranorex.Core.Element,Ranorex.Core.PathBuildMode)">
            <summary>
            Builds a RanoreXPath for a given element.
            </summary>
            <param name="element">The node to build the path for.</param>
            <param name="mode">The path building mode. This basically controls the degree of optimization applied to the path.</param>
            <param name="relativeParent">The ancestor element to which the path should be relative to. If this parameter is null, an absolute path is built.</param>
            <returns>The path of the specified element relative to the specified parent element.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.BuildElementPath(Ranorex.Core.Element,Ranorex.Core.Element,Ranorex.Core.PathBuildMode,System.Boolean)">
            <summary>
            Builds a RanoreXPath for a given element.
            </summary>
            <param name="element">The node to build the path for.</param>
            <param name="mode">The path building mode. This basically controls the degree of optimization applied to the path.</param>
            <param name="forceRobustPath">Specifies if building robuts path sholub be forced.</param>
            <param name="relativeParent">The ancestor element to which the path should be relative to. If this parameter is null, an absolute path is built.</param>
            <returns>The path of the specified element relative to the specified parent element.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.CalcElementScore(Ranorex.Core.Element,Ranorex.Core.RxPath.CostInfo@)">
            <summary>
            Calculates a score for an individual element used for determining the best RxPath layer/step selection.
            </summary>
            <param name="e">The element.</param>
            <param name="rawCost">Detailed cost values.</param>
            <returns>The cost value, higher is better.</returns>
        </member>
        <member name="T:Ranorex.Core.RxPath.CostInfo">
            <summary>
            Represents cost/scoring information for elements when creating RxPaths.
            </summary>
        </member>
        <member name="P:Ranorex.Core.RxPath.CostInfo.Cap">
            <summary>
            Capability score
            </summary>
        </member>
        <member name="P:Ranorex.Core.RxPath.CostInfo.Sib">
            <summary>
            Sibling score
            </summary>
        </member>
        <member name="P:Ranorex.Core.RxPath.CostInfo.Attr">
            <summary>
            Attribute score
            </summary>
        </member>
        <member name="F:Ranorex.Core.RxPath.Root">
            <summary>
            Represents the <see cref="T:Ranorex.Core.RxPath"/> for the root element.
            </summary>
        </member>
        <member name="M:Ranorex.Core.RxPath.#ctor(System.String)">
            <summary>
            Creates a new RanoreXPath instance, using the supplied path.
            </summary>
            <param name="path">The path to be represented by this instance.</param>
            <exception cref="T:Ranorex.RxPathException">Thrown if the path is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Ranorex.Core.RxPath.LocationSteps">
            <summary>
            Gets or sets the location steps of this path.
            </summary>
            <value>The location steps.</value>
        </member>
        <member name="M:Ranorex.Core.RxPath.Clone">
            <summary>
            Creates a clone of the path.
            </summary>
            <returns>The cloned path.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.TryCreate(System.String,Ranorex.Core.RxPath@)">
            <summary>
            Tries to create an <see cref="T:Ranorex.Core.RxPath"/> instance.
            </summary>
            <param name="path">The path to be represented by the <paramref name="rxPath"/> instance.</param>
            <param name="rxPath">When this method returns, contains the created <see cref="T:Ranorex.Core.RxPath"/>
            instance or a <c>null</c> reference if creating the <see cref="T:Ranorex.Core.RxPath"/> failed.</param>
            <returns><c>true</c> if creating the <see cref="T:Ranorex.Core.RxPath"/> instance succeeded, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Ranorex.Core.RxPath.MaxMatchTextLen">
            <summary>
            The maximum length to use for attribute values that have a <see cref="P:Ranorex.Core.AttributeDescriptor.TruncationLength"/>
            of <c>-1</c> when building paths. Longer attribute values are truncated at the next word boundary (if available)
            using StartsWith expressions.
            </summary>
        </member>
        <member name="P:Ranorex.Core.RxPath.DefaultSearchTimeout">
            <summary>
            The timeout used when elements are searched by assigning a path
            to an element variable (implicit cast operator).
            </summary>
            <example>The timeout value set to this property is used for searching
            when implicitly casting a path (in its string representation) to an element variable:
            <code>Element elem = "pathToElem";</code></example>
            <remarks>This property is equivalent to <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/>.</remarks>
        </member>
        <member name="P:Ranorex.Core.RxPath.DataProvider">
            <summary>
            The data provider to use for resolving variables.
            </summary>
        </member>
        <member name="P:Ranorex.Core.RxPath.IsAbsolute">
            <summary>
            Gets or sets a value indicating whether this instance is absolute.
            </summary>
            <value>
                <c>true</c> if this instance is absolute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ranorex.Core.RxPath.ToString">
            <summary>
            Converts the RxPath to its string representation.
            </summary>
            <returns>The RxPath as string.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.ToResolvedString">
            <summary>
            Converts the RxPath to its string representation, with the variables resolved to their current values.
            </summary>
            <remarks>To correctly resolve the variables, an active DataProviderContext is needed.</remarks>
            <returns>The RxPath as string.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.ToStringSteps">
            <summary>
            Creates a list of strings where each location step in the RxPath corresponds to one string.
            </summary>
            <returns>The RxPath as string.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.GetCapabilityForTailNodeTest">
            <summary>
            Map the RxPath nodetest name expression to a capability.
            </summary>
            <returns>The best matching capability or Role.Unknown.</returns>
        </member>
        <member name="P:Ranorex.Core.RxPath.Length">
            <summary>
            The number of location steps contained in the RxPath.
            </summary>
        </member>
        <member name="M:Ranorex.Core.RxPath.op_Implicit(System.String)~Ranorex.Core.RxPath">
            <summary>
            Implicitly converts a <see cref="T:System.String"/> to an RxPath.
            </summary>
            <param name="path">The <see cref="T:System.String"/> instance to convert.</param>
            <returns>The corresponding <see cref="T:Ranorex.Core.RxPath"/>.</returns>
            <exception cref="T:Ranorex.RxPathException">Thrown if the path is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.RxPath.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> into an RxPath.
            </summary>
            <param name="path">The <see cref="T:System.String"/> instance to convert.</param>
            <returns>The corresponding <see cref="T:Ranorex.Core.RxPath"/>.</returns>
            <exception cref="T:Ranorex.RxPathException">Thrown if the path is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.RxPath.Concat(Ranorex.Core.RxPath,Ranorex.Core.RxPath)">
            <summary>
            Concatenates two paths.
            </summary>
            <param name="left">The first part of the new path.</param>
            <param name="right">The second part of the new path.</param>
            <returns>The new path resulting from concatenating both input paths.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.op_Equality(Ranorex.Core.RxPath,Ranorex.Core.RxPath)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.op_Inequality(Ranorex.Core.RxPath,Ranorex.Core.RxPath)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.GetHashCode">
            <summary>
            Calculates a hash value for the RxPath.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.Equals(System.Object)">
            <summary>
            Compares an RxPath to an object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the object is an RxPath and the paths are exactly the same.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.CompareTo(Ranorex.Core.RxPath)">
            <summary>
            Compares the current path with another path.
            </summary>
            <param name="other">A path to compare with this path.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            <list type="table">
            <listheader>
                <term>Value</term>
                <description>Meaning</description>
            </listheader>
            <item>
                <term>Less than zero</term>
                <description>This instance is less than <paramref name="other"/>.</description>
            </item>
            <item>
                <term>Zero</term>
                <description>This instance is equal to <paramref name="other"/>.</description>
            </item>
            <item>
                <term>Greater than zero</term>
                <description>This instance is greater than <paramref name="other"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.Escape(System.String)">
            <summary>
            Escapes string values for use within RxPath literals.
            </summary>
            <param name="literal">The value to escape.</param>
            <returns>The escaped value.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.Unescape(System.String)">
            <summary>
            Unescapes string values used within RxPath literals.
            </summary>
            <param name="literal">The value to unescape.</param>
            <returns>The unescaped value.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.GetRxPathTokens(System.String,System.Boolean@,System.String@,System.Int32@)">
            <summary>
            Gets the tokens which form an RxPath.
            </summary>
            <param name="queryPath">The query path.</param>
            <param name="syntaxOk">Set to <c>true</c> if the sytnax of the RxPath is valid.</param>
            <param name="errorMessage">The error message (if there was a syntax error).</param>
            <param name="errorPosition">The error position (if there was a syntax error).</param>
            <returns>A list of tokens.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.ExtractCommonPrefix(System.Collections.Generic.IList{Ranorex.Core.RxPath})">
            <summary>
            Extracts the longest common prefix from a list of RxPaths.
            </summary>
            <param name="paths">A list of paths to extract the prefix from.</param>
            <returns>The longest common prefix of the specified paths.</returns>
            <remarks>It is not allowed to mix relative and absolute paths in the list.</remarks>
        </member>
        <member name="M:Ranorex.Core.RxPath.RemovePrefix(Ranorex.Core.RxPath,Ranorex.Core.RxPath,System.Boolean)">
            <summary>
            Removes a given prefix from a specific path.
            </summary>
            <param name="path">The path to remove the prefix from.</param>
            <param name="prefix">The prefix to remove.</param>
            <param name="fastNoCheck">Assumes that the supplied prefix is valid.</param>
            <returns>The path without the prefix.</returns>
            <exception cref="T:Ranorex.RxPathException">If <paramref name="prefix"/> is not a prefix of the supplied path.</exception>
        </member>
        <member name="M:Ranorex.Core.RxPath.IsPrefixOf(Ranorex.Core.RxPath)">
            <summary>
            Determines whether the path is a prefix of the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>
                <c>true</c> if the path is prefix of the specified path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.ChangePrefix(Ranorex.Core.RxPath,Ranorex.Core.RxPath,Ranorex.Core.RxPath)">
            <summary>
            Changes a given prefix of an RxPath to a new prefix.
            </summary>
            <param name="path">The path to change.</param>
            <param name="oldPrefix">The old prefix.</param>
            <param name="newPrefix">The new prefix.</param>
            <returns>The path with the changed prefix.</returns>
            <exception cref="T:Ranorex.RxPathException">If <paramref name="oldPrefix"/> is not a prefix of the supplied path.</exception>
        </member>
        <member name="M:Ranorex.Core.RxPath.ChangePrefix(Ranorex.Core.RxPath,Ranorex.Core.RxPath,Ranorex.Core.RxPath,System.Boolean)">
            <summary>
            Changes a given prefix of an RxPath to a new prefix.
            </summary>
            <param name="path">The path to change.</param>
            <param name="oldPrefix">The old prefix.</param>
            <param name="newPrefix">The new prefix.</param>
            <param name="fastNoCheck">Determines whether the existing prefixes are checked or not.</param>
            <returns>The path with the changed prefix.</returns>
            <exception cref="T:Ranorex.RxPathException">If <paramref name="oldPrefix"/> is not a prefix of the supplied path.</exception>
        </member>
        <member name="M:Ranorex.Core.RxPath.GetParentPath(Ranorex.Core.RxPath)">
            <summary>
            Returns a path which applies to parent elements of an element with the specified path.
            </summary>
            <param name="path">The path to create the parent path from.</param>
            <returns>Returns a path which applies to parent elements of an element with the specified path.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.GetPrefixPath(Ranorex.Core.RxPath,System.Int32)">
            <summary>
            Returns a path with the specified number of prefix steps
            </summary>
            <param name="path">The path to create the parent path from.</param>
            <param name="len">The number of steps for the prefix.</param>
            <returns>Returns a path with the specified prefix length.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.PreviewRxpathParser.GetErrorMessage(Antlr.Runtime.RecognitionException,System.String[])">
            <summary>
            Formats an error message from a parser RecognitionException and a list of token names.
            </summary>
            <param name="e">The e.</param>
            <param name="tokenNames">The token names.</param>
            <returns>A pretty-printed error message.</returns>
            <remarks>For internal use only!</remarks>
        </member>
        <member name="M:Ranorex.Core.RxPath.IsSimilar(Ranorex.Core.RxPath,Ranorex.Core.RxPath,System.Int32@,Ranorex.Core.Data.IDataProvider)">
            <summary>
            Determines whether two paths are similar.
            Per definition, paths are similar if they could yield an intersecting set of result elements.
            </summary>
            <param name="a">The first path.</param>
            <param name="b">The second path.</param>
            <param name="warnCount">The warn count is set to the number of significant differences both paths have (but are not a contradiction per se).</param>
            <param name="provider">The data provider to use to resolve variable values.</param>
            <returns>
                <c>true</c> if the specified the paths are similar; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.ConvertToCanonicalAndChain(System.Collections.Generic.IList{Ranorex.Core.Path.IPredicate})">
            <summary>
            Returns a list of predicates iff the <paramref name="preds"/> can be represented
            as a flat list of predicates.
            </summary>
            <param name="preds">The predicates to convert.</param>
            <returns>A flat list of predicates.</returns>
        </member>
        <member name="M:Ranorex.Core.RxPath.Invert(Ranorex.Core.RxPath)">
            <summary>
            Inverts the specified path.
            </summary>
            <remarks>
            Inverse path work like that: A = B.Find(P) results in B = A.Find(P^-1)
            </remarks>
            <param name="path">The path to invert.</param>
            <returns>The inverted path.</returns>
        </member>
        <member name="T:Ranorex.Core.PathBuildMode">
            <summary>
            The method how RxPaths are built.
            </summary>
        </member>
        <member name="F:Ranorex.Core.PathBuildMode.Default">
            <summary>
            Uses the PathBuildMode specified in the current "RxPath.BuildMode" configuration.
            </summary>
        </member>
        <member name="F:Ranorex.Core.PathBuildMode.Volatile">
            <summary>
            No optimization is performed. Path predicates contain valid, appropriate and existing attribute values
            or indexes if no attributes can be used. Path predicates include volatile attributes such as handle or processid.
            </summary>
        </member>
        <member name="F:Ranorex.Core.PathBuildMode.Simple">
            <summary>
            No optimization is performed. Path predicates contain valid, appropriate and existing attribute values
            or indexes if no attributes can be used.
            </summary>
        </member>
        <member name="F:Ranorex.Core.PathBuildMode.Reduce">
            <summary>
            Reduces the number of path predicates such that the path remains non-ambiguous.
            This usually shortens the path and makes it more robust by eliminating unnecessary attributes.
            </summary>
        </member>
        <member name="F:Ranorex.Core.PathBuildMode.StepCostReduce">
            <summary>
            Reduces the number of path predicates such that the path remains non-ambiguous.
            In addition to that, removes intermediate steps considered as unimportant.
            Can be heavily tuned using the RxPath.PathBuildMode settings.
            This usually shortens the path and makes it more robust by eliminating unnecessary attributes.
            </summary>
        </member>
        <member name="F:Ranorex.Core.PathBuildMode.ReduceForRef">
            <summary>
            Reduces the number of path predicates such that the path remains non-ambiguous.
            This usually shortens the path and makes it more robust by eliminating unnecessary attributes.
            Variant of 'Reduce' used for reference paths in repositories. Contains more information than 'Reduce'.
            </summary>
        </member>
        <member name="F:Ranorex.Core.PathBuildMode.ExtendedStepCostReduce">
            <summary>
            Reduces the number of path predicates such that the path remains non-ambiguous.
            In addition to that, removes intermediate steps considered as unimportant.
            Can be heavily tuned using the RxPath.PathBuildMode settings.
            This usually shortens the path and makes it more robust by eliminating unnecessary attributes.
            This option is extened by storing robust path which is used after 50% of the timeout.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Plugin">
            <summary>
            Represents a general plugin for the Ranorex Core architecture.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Plugin.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new plugin.
            </summary>
            <param name="displayName">The name of this plugin.</param>
            <param name="description">A short description for this plugin.</param>
            <param name="url">An optional URL for a website containing plugin information.</param>
        </member>
        <member name="P:Ranorex.Core.Plugin.Url">
            <summary>
            An optional URL for a website containing plugin information.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Plugin.Initialize">
            <summary>
            Initializes the plugin.
            </summary>
            <remarks>
            This must be called by deriving classes.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.Plugin.CheckInitialized">
            <summary>
            init helper.
            </summary>
        </member>
        <member name="T:Ranorex.Core.PluginLoadedEventHandler">
            <summary>
            A delegate for the PluginLoaded event handler.
            </summary>
        </member>
        <member name="T:Ranorex.Core.PluginLoadedEventArgs">
            <summary>
            EventArgs for the PluginLoaded event.
            </summary>
        </member>
        <member name="M:Ranorex.Core.PluginLoadedEventArgs.#ctor(Ranorex.Core.Plugin)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.PluginLoadedEventArgs"/> class.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="P:Ranorex.Core.PluginLoadedEventArgs.LoadedPlugin">
            <summary>
            Gets plugin which was loaded.
            </summary>
            <value>The loaded plugin.</value>
        </member>
        <member name="T:Ranorex.Core.PluginManager">
            <summary>
            The singleton which manages the Ranorex Core plugins.
            </summary>
        </member>
        <member name="M:Ranorex.Core.PluginManager.#ctor">
            <summary>
            private ctor.
            </summary>
        </member>
        <member name="E:Ranorex.Core.PluginManager.PluginLoaded">
            <summary>
            Occurs when a plugin is loaded.
            </summary>
        </member>
        <member name="P:Ranorex.Core.PluginManager.Instance">
            <summary>
            The plugin manager instance.
            </summary>
        </member>
        <member name="P:Ranorex.Core.PluginManager.LoadedPlugins">
            <summary>
            The loaded plugins.
            </summary>
        </member>
        <member name="P:Ranorex.Core.PluginManager.DefaultPluginsLoaded">
            <summary>
            Gets a value indicating whether the default plugins have been loaded.
            </summary>
            <value>
                <c>true</c> if the default plugins have been loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Core.PluginManager.SuppressLoadingOfDefaultPlugins">
            <summary>
            Gets or sets a value specifying whether the loading of the default plugins is suppressed.
            </summary>
            <remarks>Whenever the <see cref="T:Ranorex.Core.ElementEngine"/> is accessed, the default plugins are loaded
            (if not already loaded, see <see cref="M:Ranorex.Core.PluginManager.LoadDefaultPlugins"/>). If you want to suppress this behavior,
            set this property to <c>true</c> before accessing the <see cref="T:Ranorex.Core.ElementEngine"/> the first time.</remarks>
        </member>
        <member name="M:Ranorex.Core.PluginManager.Load(System.String)">
            <summary>
            Loads all plugins from a given assembly.
            </summary>
            <param name="assemblyPath">The file name of the assembly which contains the plugin.</param>
            <returns>The number of newly loaded plugins.</returns>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If the assembly cannot be found.</exception>
        </member>
        <member name="M:Ranorex.Core.PluginManager.Load(System.String,System.String)">
            <summary>
            Loads plugins from an assembly.
            </summary>
            <param name="assemblyPath">The file name of the assembly which contains the plugin(s).</param>
            <param name="typeName">The full type name of the plugin to load or <c>null</c>
            to load all plugins in the assembly.</param>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If the assembly or type cannot
            be found or if loading a plugin type fails.</exception>
            <returns>The number of newly loaded plugins.</returns>
        </member>
        <member name="M:Ranorex.Core.PluginManager.Load(System.Type)">
            <summary>
            Instantiates and loads the specified plugin type.
            </summary>
            <param name="pluginType">The type of a plugin.</param>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If instantiating the type or loading the instantiated plugin fails.</exception>
        </member>
        <member name="M:Ranorex.Core.PluginManager.Load(Ranorex.Core.Plugin)">
            <summary>
            Loads the specified plugin instance.
            </summary>
            <param name="plugin">An uninitialized plugin instance.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="plugin"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If a plugin with the same name is already loaded or
            initializing the plugin fails.</exception>
        </member>
        <member name="M:Ranorex.Core.PluginManager.LoadDefaultPlugins">
            <summary>
            Performs the default steps for loading Ranorex plugins.
            </summary>
            <remarks>The default plugins will be only loaded once even if this method
            is called several times.</remarks>
        </member>
        <member name="M:Ranorex.Core.PluginManager.LoadPluginsFromDirectory(System.String)">
            <summary>
            Loads plugins from the specified directory.
            </summary>
            <param name="directory">The path of the directory to load plugins from.</param>
            <returns>The number of plugins loaded successfully.</returns>
        </member>
        <member name="M:Ranorex.Core.PluginManager.LoadPluginsFromDirectory">
            <summary>
            Loads plugins from the directory of the currently executing assembly.
            </summary>
            <returns>The number of plugins loaded successfully.</returns>
        </member>
        <member name="M:Ranorex.Core.PluginManager.OnPluginLoaded(Ranorex.Core.PluginLoadedEventArgs)">
            <summary>
            Raises the <see cref="E:Ranorex.Core.PluginManager.PluginLoaded"/> event.
            </summary>
            <param name="args">The <see cref="T:Ranorex.Core.PluginLoadedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Ranorex.Core.IReportLogger">
            <summary>
                An interface which has to be implemented for custom loggers.
            </summary>
            <remarks>
                A custom logger stores log messages and data in a custom data store
                in a custom format.
            </remarks>
        </member>
        <member name="P:Ranorex.Core.IReportLogger.PreFilterMessages">
            <summary>
                Determines whether the logger is called for all log message or only for messages whose report level
                is greater or equal than the currently set report level.
            </summary>
        </member>
        <member name="M:Ranorex.Core.IReportLogger.Start">
            <summary>
                Starts the logger.
            </summary>
            <remarks>
                The <see cref="T:Ranorex.Report" /> class calls this method when the logger
                should be started. Open a file or a database connection in this method.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.IReportLogger.End">
            <summary>
                Ends logging. Should free all resources.
            </summary>
            <remarks>
                The <see cref="T:Ranorex.Report" /> class calls this method when the logger
                should be closed. Close the log file or the database connection in this method.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.IReportLogger.LogText(Ranorex.ReportLevel,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Logs a text message.
            </summary>
            <param name="level">The message level.</param>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
            <param name="escape">Text escaping flag.</param>
            <param name="metaInfos">Advanced reference information for use in the report.</param>
            <remarks>
                The <see cref="T:Ranorex.Report" /> class calls this method for each attached <see cref="T:Ranorex.Core.IReportLogger" />
                instance when the <see cref="M:Ranorex.Report.Log(Ranorex.ReportLevel,System.String)" /> method is called. The logger should store the
                method
                arguments in the data store.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.IReportLogger.LogData(Ranorex.ReportLevel,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Logs a data message.
            </summary>
            <param name="level">The message level.</param>
            <param name="category">The category name.</param>
            <param name="message">An optional message string for the data.</param>
            <param name="data">The message data object (can also be a <c>null</c> reference).</param>
            <param name="metaInfos">Advanced reference information for use in the report.</param>
            <remarks>
                The <see cref="T:Ranorex.Report" /> class calls this method for each attached <see cref="T:Ranorex.Core.IReportLogger" />
                instance when the <see cref="M:Ranorex.Report.LogData(Ranorex.ReportLevel,System.String,System.Object)" /> method is called. The logger should
                store the method
                arguments in the data store.
                <para>
                    You should handle all the data types you will pass to the
                    <see cref="M:Ranorex.Report.LogData(Ranorex.ReportLevel,System.String,System.Object)" /> method
                    in that method. By default, Ranorex uses this method to store screenshot and snapshot data in a report, so make
                    sure that you handle data of type <see cref="T:System.Drawing.Bitmap" /> and <see cref="T:Ranorex.Core.ElementSnapshot" />. Additionally,
                    the <see cref="T:Ranorex.Report" />.<see cref="T:Ranorex.Link" /> method passes a <see cref="T:System.Uri" /> object to that method
                    that can be used to add a link to the report.
                </para>
            </remarks>
        </member>
        <member name="T:Ranorex.Core.ConsoleLogger">
            <summary>
                The standard Ranorex console logger.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ConsoleLogger.PreFilterMessages">
            <summary>
                Determines whether the logger is called for all log message or only for messages whose report level
                is greater or equal than the currently set report level.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ConsoleLogger.Start">
            <summary>
                Starts the logger.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ConsoleLogger.End">
            <summary>
                Ends logging. Should free all resources.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ConsoleLogger.LogText(Ranorex.ReportLevel,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Logs a text message.
            </summary>
            <param name="level">The message level.</param>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
            <param name="escape">Text escaping flag.</param>
            <param name="metaInfos">Advanced reference information for use in the report.</param>
        </member>
        <member name="M:Ranorex.Core.ConsoleLogger.LogData(Ranorex.ReportLevel,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Logs a data message.
            </summary>
            <param name="level">The message level.</param>
            <param name="category">The category name.</param>
            <param name="message">An optional message for the data.</param>
            <param name="data">The message data object.</param>
            <param name="metaInfos">Advanced reference information for use in the report.</param>
        </member>
        <member name="T:Ranorex.Core.XmlLogger">
            <summary>
                The standard Ranorex XML-logger for 2.X projects.
            </summary>
        </member>
        <member name="M:Ranorex.Core.XmlLogger.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Ranorex.Core.XmlLogger" /> class.
            </summary>
        </member>
        <member name="P:Ranorex.Core.XmlLogger.DefaultLogFileName">
            <summary>
                Gets the default name of the XML log file.
            </summary>
            <value>The default name of the log file.</value>
        </member>
        <member name="P:Ranorex.Core.XmlLogger.RanorexReportXsl">
            <summary>
                The stylesheet used for formatting XML log files. For internal use only.
            </summary>
            <value>The ranorex report XSL.</value>
        </member>
        <member name="P:Ranorex.Core.XmlLogger.AppendExisting">
            <summary>
                Gets or sets a value indicating whether log entries should be appended to an already existing logfile,
                or if it should be overwritten.
            </summary>
            <value><c>true</c> to append to an existing file; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ranorex.Core.XmlLogger.ReportStylesheetUrl">
            <summary>
                Gets or sets the URL to the XSL stylesheet used for rendering the XML report;
                you can use an XSL stylesheet stored on a network share (<c>file://pathToFile</c>) or
                in the intranet/Internet (<c>http://pathToStylesheet</c>).
            </summary>
        </member>
        <member name="P:Ranorex.Core.XmlLogger.LogFileName">
            <summary>
                Gets or sets the log file name.
            </summary>
            <value>The default name of the file.</value>
        </member>
        <member name="P:Ranorex.Core.XmlLogger.Title">
            <summary>
                Gets or sets the title to use for the XML report file.
            </summary>
            <value>The title string for report.</value>
            <remarks>The default title is <i>Ranorex Test Report</i></remarks>
        </member>
        <member name="P:Ranorex.Core.XmlLogger.PreFilterMessages">
            <summary>
                Determines whether the logger is called for all log message or only for messages whose report level
                is greater or equal than the currently set report level.
            </summary>
        </member>
        <member name="M:Ranorex.Core.XmlLogger.SetReportStylesheet(System.String)">
            <summary>
                Sets the report XSL file content.
                Can be used to generate report files with custom formatting.
            </summary>
            <param name="xslFileContent">Content of the XSL file.</param>
        </member>
        <member name="M:Ranorex.Core.XmlLogger.SetReportStylesheetFile(System.String)">
            <summary>
                Sets the name of the file to load the XSL content from.
                Can be used to generate report files with custom formatting.
            </summary>
            <param name="xslFileName">The name of the XSL file.</param>
        </member>
        <member name="M:Ranorex.Core.XmlLogger.Start">
            <summary>
                Starts the logger.
            </summary>
        </member>
        <member name="M:Ranorex.Core.XmlLogger.End">
            <summary>
                Ends logging. Should free all resources.
            </summary>
        </member>
        <member name="M:Ranorex.Core.XmlLogger.LogText(Ranorex.ReportLevel,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Logs a text message.
            </summary>
            <param name="level">The message level.</param>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
            <param name="escape">Text escaping flag.</param>
            <param name="metaInfos">Advanced reference information for use in the report.</param>
        </member>
        <member name="M:Ranorex.Core.XmlLogger.LogData(Ranorex.ReportLevel,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Logs a data message.
            </summary>
            <param name="level">The message level.</param>
            <param name="category">The category name.</param>
            <param name="message">An optional message for the data.</param>
            <param name="data">The message data object.</param>
            <param name="metaInfos">Advanced reference information for use in the report.</param>
        </member>
        <member name="T:Ranorex.Core.CachedResourceManager">
            <summary>
            A wrapper around a default <see cref="T:System.Resources.ResourceManager"/> instance that caches retrieved objects.
            </summary>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.#ctor(System.Resources.ResourceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.CachedResourceManager"/> class
            that caches retrieved objects.
            </summary>
            <param name="wrapped">The wrapped resource manager to get the actual objects from.</param>
        </member>
        <member name="P:Ranorex.Core.CachedResourceManager.BaseName">
            <summary>
            Gets the root name of the resource files that the <see cref="T:System.Resources.ResourceManager"/>
            searches for resources.
            </summary>
            <returns>
            The root name of the resource files that the <see cref="T:System.Resources.ResourceManager"/>
            searches for resources.
            </returns>
        </member>
        <member name="P:Ranorex.Core.CachedResourceManager.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether the current instance allows case-insensitive resource
            lookups in the <see cref="M:Ranorex.Core.CachedResourceManager.GetString(System.String)"/> and <see cref="M:Ranorex.Core.CachedResourceManager.GetObject(System.String)"/> methods.
            </summary>
            <returns>
            A value indicating whether the case of the resource names should be ignored.
            </returns>
        </member>
        <member name="P:Ranorex.Core.CachedResourceManager.ResourceSetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Resources.ResourceSet"/>
            the <see cref="T:System.Resources.ResourceManager"/> uses to construct a
            <see cref="T:System.Resources.ResourceSet"/> object.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> of the <see cref="T:System.Resources.ResourceSet"/> the
            <see cref="T:System.Resources.ResourceManager"/> uses to construct a
            <see cref="T:System.Resources.ResourceSet"/> object.
            </returns>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.EnsureActive(System.Type)">
            <summary>
            Ensures that the specified original resource manager used by <paramref name="targetType"/>
            is replaced by a <see cref="T:Ranorex.Core.CachedResourceManager"/> instance wrapping the original instance.
            </summary>
            <param name="targetType">A auto-generated resource type that should use a
            <see cref="T:Ranorex.Core.CachedResourceManager"/> instance wrapping the original resource manager.</param>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the <see cref="T:System.Object"/> resource localized for the specified culture.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> object that represents
            the culture for which the resource is localized. Note that if the resource is not localized for
            this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent"/>
            property, stopping after checking in the neutral culture.
            If this value is null, the <see cref="T:System.Globalization.CultureInfo"/> is obtained using the
            culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property.</param>
            <returns>
            The value of the resource, localized for the specified culture. If a "best match" is not
            possible, <c>null</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            No usable set of resources have been found, and there are no neutral culture resources.
            </exception>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.GetObject(System.String)">
            <summary>
            Returns the value of the specified <see cref="T:System.Object"/> resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings. If a match
            is not possible, <c>null</c> is returned. The resource value can be <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            No usable set of resources has been found, and there are no neutral culture resources.
            </exception>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is <c>null</c>.
            </exception>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Resources.ResourceSet"/> for a particular culture.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to look for.</param>
            <param name="createIfNotExists">If true and if the <see cref="T:System.Resources.ResourceSet"/>
            has not been loaded yet, load it.</param>
            <param name="tryParents">If the <see cref="T:System.Resources.ResourceSet"/> cannot be loaded,
            try parent <see cref="T:System.Globalization.CultureInfo"/> objects to see if they exist.</param>
            <returns>
            The specified <see cref="T:System.Resources.ResourceSet"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="culture"/> parameter is <c>null</c>.
            </exception>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.GetString(System.String)">
            <summary>
            Returns the value of the specified <see cref="T:System.String"/> resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings.
            If a match is not possible, <c>null</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> parameter is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value of the specified resource is not a string.
            </exception>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            No usable set of resources has been found, and there are no neutral culture resources.
            </exception>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the <see cref="T:System.String"/> resource localized for the specified culture.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> object that represents
            the culture for which the resource is localized. Note that if the resource is not localized for
            this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent"/>
            property, stopping after looking in the neutral culture.
            If this value is <c>null</c>, the <see cref="T:System.Globalization.CultureInfo"/> is obtained
            using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property.</param>
            <returns>
            The value of the resource localized for the specified culture.
            If a best match is not possible, <c>null</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> parameter is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value of the specified resource is not a <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            No usable set of resources has been found, and there are no neutral culture resources.
            </exception>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.ReleaseAllResources">
            <summary>
            Tells the <see cref="T:System.Resources.ResourceManager"/> to call <see cref="M:System.Resources.ResourceSet.Close"/>
            on all <see cref="T:System.Resources.ResourceSet"/> objects and release all resources.
            </summary>
        </member>
        <member name="M:Ranorex.Core.CachedResourceManager.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Ranorex.Core.Role">
            <summary>
            Roles are predefined capabilities.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Button">
            <summary>
            Represents a push button.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Cell">
            <summary>
            Represents a table cell.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.CheckBox">
            <summary>
            Represents a check box that allows the user to select a true or false condition.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Column">
            <summary>
            Represents a table column.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Row">
            <summary>
            Represents a table row.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ComboBox">
            <summary>
            Represents a combo box control.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Container">
            <summary>
            Represents a logical container element, such as a panel or groupbox.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.DateTime">
            <summary>
            Represents a datetime picker or calendar control.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Desktop">
            <summary>
            Represents the operating system desktop.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Host">
            <summary>
            Represents the host machine running Ranorex.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Form">
            <summary>
            Represents an application main window or a dialog window.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Grip">
            <summary>
            Represents an element that can be moved or dragged, e.g. a size grip for resizing windows or controls.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Indicator">
            <summary>
            Represents the indicator part of a slider or scrollbar.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Link">
            <summary>
            Represents a hyperlink.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.List">
            <summary>
            Represents a logical list such as a listbox.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ListItem">
            <summary>
            Represents an item in a list.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.MenuBar">
            <summary>
            Represents a menu bar.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ToolBar">
            <summary>
            Represents a tool bar.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ContextMenu">
            <summary>
            Represents a context popup menu.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.MenuItem">
            <summary>
            Represents an entry in a menubar or context menu.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Picture">
            <summary>
            Represents a picture, icon, image or diagram.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Separator">
            <summary>
            Represents a separator used for menus and toolbars.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ProgressBar">
            <summary>
            Represents a progress bar.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.RadioButton">
            <summary>
            Represents a radio button which enables the user to select a single option from a group of choices.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ScrollBar">
            <summary>
            Represents a vertical or horizontal scroll bar control.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Slider">
            <summary>
            Represents a slider or trackbar control.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.StatusBar">
            <summary>
            Represents a status bar usually located at the bottom of a form.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Table">
            <summary>
            Represents a table or grid, consisting of rows and columns.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.TabPage">
            <summary>
            Represents a tab page in a tab page list.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.TabPageList">
            <summary>
            Represents a tab page list.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Text">
            <summary>
            Represents an edit box, a text area, or static text.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.TitleBar">
            <summary>
            Represents the title bar of a form or dialog window.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ToolTip">
            <summary>
            Represents tooltip popup.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Tree">
            <summary>
            Represents a tree control.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.TreeItem">
            <summary>
            Represents an item in a tree.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.Unknown">
            <summary>
            Represents a UI element which cannot be further categorized.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Role.ScrollBarStyle">
            <summary>
            The general style of a <see cref="F:Ranorex.Core.Role.ScrollBar"/>.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ScrollBarStyle.Custom">
            <summary>
            The scrollbar is a custom scrollbar implementation.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ScrollBarStyle.Horizontal">
            <summary>
            The scrollbar is a horizontal scrollbar of a window or control.
            </summary>
        </member>
        <member name="F:Ranorex.Core.Role.ScrollBarStyle.Vertical">
            <summary>
            The scrollbar is a vertical scrollbar of a window or control.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Role.GetAllRoles">
            <summary>
            Returns a list of all available roles.
            </summary>
            <returns>A list of all Roles.</returns>
        </member>
        <member name="T:Ranorex.Core.ElementSnapshot">
            <summary>
            Represents the container for a tree of element snapshots.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.#ctor(Ranorex.Core.Element,Ranorex.Core.Element)">
            <summary>
            Private constructor.
            </summary>
            <param name="element">The snapshotted element.</param>
            <param name="root">The root element for the snapshot.</param>
        </member>
        <member name="P:Ranorex.Core.ElementSnapshot.TimeStamp">
            <summary>
            The timestamp when the snapshot was made.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementSnapshot.Description">
            <summary>
            An optional description of the snapshot.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementSnapshot.RootElement">
            <summary>
            The root element of the snapshotted element tree.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementSnapshot.Element">
            <summary>
            The snapshotted element that the snapshot was created for, i.e. the returned snapshotted
            element corresponds to the element passed to the <see cref="T:System.Text.RegularExpressions.Capture"/> method.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementSnapshot.ScreenShot">
            <summary>
            A screenshot of the previously captured element.
            </summary>
        </member>
        <member name="P:Ranorex.Core.ElementSnapshot.Config">
            <summary>
             Gets the configuration that was used to create the snapshot with.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.Capture(Ranorex.Core.Element,System.Boolean)">
            <summary>
            Creates a new snapshot from a given (live) element instance.
            </summary>
            <param name="element">The element to be snapshotted.</param>
            <param name="includeImage">Defines if a screenshot of the element should be included in the snapshot.</param>
            <returns>A snapshot of the element tree.</returns>
            <remarks>Depending on the configuration setting <see cref="P:Ranorex.Core.Configuration.SpyConfig.CompleteAncestorSnapshot"/>,
            the snapshot will include the complete subtree of all ancestor elements.</remarks>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.Capture(Ranorex.Core.Element,System.Boolean,System.Boolean)">
            <summary>
            Creates a new snapshot from a given (live) element instance.
            </summary>
            <param name="element">The element to be snapshotted.</param>
            <param name="includeImage">Defines if a screenshot of the element should be included in the snapshot.</param>
            <param name="topLevelSnapshot">Specifies whether to include the complete subtree for all ancestor
            elements of the <paramref name="element"/>.</param>
            <returns>A snapshot of the element tree.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.SerializeXml">
            <summary>
            Serializes the complete snapshot as an XML document string.
            </summary>
            <returns>The snapshot XML string.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.SerializeXmlDoc">
            <summary>
            Serializes the complete snapshot as an XML document.
            </summary>
            <returns>The snapshot XML document.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.CreateSimpleClone(Ranorex.Core.Element,System.Int32)">
            <summary>
            Creates a simple clone snapshot of the element.
            </summary>
            <param name="element">The element to use for the snapshot.</param>
            <param name="depth">The tree depth for the snapshot. (0=element itself).</param>
            <returns>The cloned element.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.CreateSimpleClone(Ranorex.Core.Element,System.Int32,System.Boolean)">
            <summary>
            Creates a simple clone snapshot of the element.
            </summary>
            <param name="element">The element to use for the snapshot.</param>
            <param name="depth">The tree depth for the snapshot. (0=element itself).</param>
            <param name="includeDynamicAttributes">Determines whether dynamic attributes are captured.</param>
            <returns>The cloned element.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.DeserializeXml(System.String)">
            <summary>
            Creates a snapshot from an XML document string.
            </summary>
            <param name="xml">The XML string from which to restore the snapshot.</param>
            <returns>The restored snapshot.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.DeserializeXml(Ranorex.Libs.Xml.XmlDoc)">
            <summary>
            Creates a snapshot from an XML document.
            </summary>
            <param name="xmlDoc">The XML document from which to restore the snapshot.</param>
            <returns>The restored snapshot.</returns>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.CreateFromFile(System.String)">
            <summary>
            Load a snapshot from a file and create an instance for it.
            </summary>
            <param name="fileName">The file (optionally including a path) to load the snapshot from.</param>
            <returns>The newly created instance loaded from the specified file.</returns>
            <remarks>The snapshot contained in the specified file can both be compressed or non-compressed.</remarks>
            <exception cref="T:Ranorex.RanorexException">If loading the snapshot fails.</exception>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.SaveToFile(System.String,System.Boolean)">
            <summary>
            Saves the snapshot to a file.
            </summary>
            <param name="fileName">The file (optionally including a path) to save the snapshot to.</param>
            <param name="compress">Specifies whether to compress the snapshot (default: true).</param>
            <exception cref="T:Ranorex.RanorexException">If saving the snapshot fails.</exception>
            <remarks>It is recommended to use the file extension "rxsnp" for the <paramref name="fileName"/>
            to allow for maximal interoperability with Ranorex tools.</remarks>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.MakeCapList(System.Collections.Generic.IList{Ranorex.Core.Capability})">
            <summary>
            Helper for making a capability name list.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ElementSnapshot.GetElementFromXmlNode(Ranorex.Core.Element,Ranorex.Libs.Xml.XmlNode,Ranorex.Libs.CacheSession)">
            <summary>
            Helper for creating an element out of an XML node.
            </summary>
        </member>
        <member name="T:Ranorex.Core.RuntimeToken">
            <summary>
            The runtime token class.
            </summary>
        </member>
        <member name="M:Ranorex.Core.RuntimeToken.#ctor(Ranorex.Core.Flavor,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.RuntimeToken"/> class.
            </summary>
            <param name="flavor">The flavor of the element this token belongs to.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Ranorex.Core.RuntimeToken.op_Equality(Ranorex.Core.RuntimeToken,Ranorex.Core.RuntimeToken)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Ranorex.Core.RuntimeToken.op_Inequality(Ranorex.Core.RuntimeToken,Ranorex.Core.RuntimeToken)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Ranorex.Core.RuntimeToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Ranorex.Core.RuntimeToken.Equals(Ranorex.Core.RuntimeToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ranorex.Core.RuntimeToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.RuntimeToken.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Ranorex.Core.CodeGenLanguage">
            <summary>
            Defines languages available for code generation.
            </summary>
        </member>
        <member name="F:Ranorex.Core.CodeGenLanguage.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:Ranorex.Core.CodeGenLanguage.VBNet">
            <summary>
            VB .NET
            </summary>
        </member>
        <member name="T:Ranorex.Core.StringTools">
            <summary>
            A number of utility methods for internal use only.
            </summary>
        </member>
        <member name="T:Ranorex.Core.TechnologyLimitation">
            <summary>
            Describes a limitation that a technology has encountered.
            </summary>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="id">A unique identifier for the limitation.</param>
            <param name="technology">The technology that encountered the limitation.</param>
            <param name="message">A message that describes the limitation.</param>
            <param name="helpUrl">The relative URL to the corresponding help topic in
            the Ranorex User Guide.</param>
            <remarks>This overload sets <see cref="P:Ranorex.Core.TechnologyLimitation.LogToReport"/> to <c>true</c>.</remarks>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.#ctor(System.String,System.String,System.String,System.String,Ranorex.Core.TechnologyLimitation.LogToReportOption)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="id">A unique identifier for the limitation.</param>
            <param name="technology">The technology that encountered the limitation.</param>
            <param name="message">A message that describes the limitation.</param>
            <param name="helpUrl">The relative URL to the corresponding help topic in
            the Ranorex User Guide.</param>
            <param name="logToReport">A value indicating whether this technology limitation should
            be logged to the <see cref="T:Ranorex.Report"/>.</param>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Ranorex.Core.TechnologyLimitation.LogToReportOption)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="id">A unique identifier for the limitation.</param>
            <param name="technology">The technology that encountered the limitation.</param>
            <param name="message">A message that describes the limitation.</param>
            <param name="wizardPageName">The name of the wizard page to use. Set to null if no wizard page is available.</param>
            <param name="wizardProperties">Properties to pass to the wizard page.</param>
            <param name="helpUrl">The relative URL to the corresponding help topic in
            the Ranorex User Guide.</param>
            <param name="logToReport">A value indicating whether this technology limitation should
            be logged to the <see cref="T:Ranorex.Report" />.</param>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.Name">
            <summary>
            Gets the unique identifier for the limitation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.Technology">
            <summary>
            Gets the technology that encountered the limitation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.Message">
            <summary>
            Gets a message describing the limitation.
            </summary>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.HelpUrl">
            <summary>
            Gets the relative URL to the corresponding help topic in the Ranorex User Guide.
            </summary>
            <value>The relative URL to the corresponding help topic in the Ranorex User Guide
            or <c>null</c> if no help topic is associated with this limitation.</value>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.LogToReport">
            <summary>
            Gets a value indicating whether this technology limitation should
            be logged to the <see cref="T:Ranorex.Report"/>.
            </summary>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.HelpUrlAbsolute">
            <summary>
            Gets the absolute URL to the corresponding help topic in the Ranorex User Guide.
            </summary>
            <value>The absolute URL to the corresponding help topic in the Ranorex User Guide
            or <c>null</c> if no help topic is associated with this limitation.</value>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.WizardPageName">
            <summary>
            Gets the name of the wizard page to use.
            </summary>
            <value>
            The name of the wizard page.
            </value>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.WizardProperties">
            <summary>
            Gets the wizard properties.
            </summary>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.ProcessName">
            <summary>
            The name of the process executable where the limitation was encountered.
            </summary>
        </member>
        <member name="P:Ranorex.Core.TechnologyLimitation.ProcessId">
            <summary>
            The process ID of the process where the limitation was encountered.
            </summary>
            <remarks>PIDs will be reused by the system. Therefore, when inspecting the
            PID it could be invalid or refer to a different process than it was recorded for.</remarks>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.Build(System.String,System.String,System.String)">
            <summary>
            Creates a new builder instance with all mandatory fields.
            </summary>
            <param name="id">A unique identifier for the limitation.</param>
            <param name="technology">The technology that encountered the limitation.</param>
            <param name="message">A message that describes the limitation.</param>
            <example>
            <code>
            var baseBuilder = TechnologyLimitation.Build("sometech-someuniqueid", "sometech", "It did not work.");
            var error1 = baseBuilder.ProcessInfo("SomeTechProcess", pid).Create();
            var error2 = baseBuilder.HelpUrl("/foo/bar").ProcessInfo("OtherProcess", pid2).Create();
            // ...
            </code>
            </example>
            <returns>Builder.</returns>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.GetFirstNonIgnoredLimitation(Ranorex.Core.Element)">
            <summary>
            Gets the first non-ignored limitation that applies to <paramref name="element"/>
            or to one of its ancestors.
            </summary>
            <param name="element">The element to get the limitation from.</param>
            <returns>A non-ignored limitation or <c>null</c> if no limitation applies
            to the passed <paramref name="element"/> or to one of its parents.</returns>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.Equals(System.Object)">
            <summary>
            Returns whether this instance is equal to <paramref name="obj"/>.
            </summary>
            <param name="obj">Another instance.</param>
            <returns><c>True</c> if <paramref name="obj"/> is a <see cref="T:Ranorex.Core.TechnologyLimitation"/>
            instance and is equal to this instance.</returns>
            <remarks>Two <see cref="T:Ranorex.Core.TechnologyLimitation"/> instances are considered equal if
            their <see cref="P:Ranorex.Core.TechnologyLimitation.Name"/>s are equal.</remarks>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Ranorex.Core.TechnologyLimitation.LogToReportOption">
            <summary>
            Determines whether to log a limitation to the report.
            </summary>
        </member>
        <member name="F:Ranorex.Core.TechnologyLimitation.LogToReportOption.Never">
            <summary>
            Never log to report.
            </summary>
        </member>
        <member name="F:Ranorex.Core.TechnologyLimitation.LogToReportOption.Once">
            <summary>
            Log just once.
            </summary>
        </member>
        <member name="F:Ranorex.Core.TechnologyLimitation.LogToReportOption.Always">
            <summary>
            Log every occurrence of the limitation.
            </summary>
        </member>
        <member name="T:Ranorex.Core.TechnologyLimitation.Builder">
            <summary>
            Create TechnologyLimitation instances with a fluent API.
            </summary>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.Builder.LogToReport(Ranorex.Core.TechnologyLimitation.LogToReportOption)">
            <summary>
            Sets whether this technology limitation should be logged to the <see cref="T:Ranorex.Report" />.
            </summary>
            <param name="logToReport">A value determining whether to log the limitation to the report.</param>
            <returns>A new Builder instance using the new setting.</returns>
            <remarks>Default value: <see cref="T:Ranorex.Core.TechnologyLimitation.LogToReportOption"/>.Once</remarks>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.Builder.Help(System.String)">
            <summary>
            The relative URL to the corresponding help topic in the Ranorex User Guide.
            </summary>
            <param name="url">The help URL.</param>
            <returns>A new Builder instance using the new setting.</returns>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.Builder.ProcessInfo(System.String,System.Nullable{System.Int32})">
            <summary>
            Sets name and process id of the process causing the limitation warning.
            </summary>
            <param name="name">The process name.</param>
            <param name="pid">The process ID.</param>
            <returns>A new Builder instance using the new setting.</returns>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.Builder.WizardInfo(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Attach information for use by the instrumentation wizard.
            </summary>
            <param name="pageName">The name of the wizard page to use. Set to null if no wizard page is available.</param>
            <param name="properties">Properties to pass to the wizard page.</param>
            <returns>A new Builder instance using the new setting.</returns>
        </member>
        <member name="M:Ranorex.Core.TechnologyLimitation.Builder.Create">
            <summary>
            Creates a new TechnologyLimitation instance using the currently set meta-information.
            </summary>
            <returns>TechnologyLimitation.</returns>
        </member>
        <member name="T:Ranorex.Core.TechnologyLimitationList">
            <summary>
            A list implementation for technology limitations.
            </summary>
            <remarks>The list implementation checks for duplicates and <c>null</c> entries and does not
            add/insert such entries.</remarks>
        </member>
        <member name="T:Ranorex.Core.Util">
            <summary>
            Provides common utility methods.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Util.IsRestartRequiredForWinAppAccess">
            <summary>
            Gets a value indicating whether a restart is required to access Windows apps.
            </summary>
            <remarks>If this property returns <c>true</c>, the current process does not have
            the required privileges to access Windows apps. You can get the those privileges
            by calling the <see cref="M:Ranorex.Core.Util.RestartWithUiAccess"/> method like in the example below.
            </remarks>
            <example>The following code checks for the privileges to access Windows apps
            and restarts the executable in order to get those privileges:
            <code>
            if (Ranorex.Core.Util.IsRestartRequiredForWinAppAccess)
                return Ranorex.Core.Util.RestartWithUiAccess();
            </code></example>
        </member>
        <member name="M:Ranorex.Core.Util.RestartWithUiAccess">
            <summary>
            Restarts the current executable with UI access privileges. Those privileges are
            required to access Windows apps.
            </summary>
            <returns>The exit code returned by the current executable.</returns>
            <remarks>If the current process does not have UI access privileges, you can call this
            method to restart the current executable with UI privileges. The executable will be
            restarted using the Ranorex.UiaLauncher which thereby provides the required privileges
            to e.g. access Windows apps.
            </remarks>
            <example>The following code checks for the privileges to access Windows apps
            and restarts the executable in order to get those privileges:
            <code>
            if (Ranorex.Core.Util.IsRestartRequiredForWinAppAccess)
                return Ranorex.Core.Util.RestartWithUiAccess();
            </code></example>
        </member>
        <member name="M:Ranorex.Core.Util.GetStaticAndDynamicCapabilities(Ranorex.Core.Element)">
            <summary>
            Gets the static and dynamic capabilities of an element.
            </summary>
            <param name="element">An element.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing all static and the dynamic capabilities
            of the <paramref name="element"/>.</returns>
        </member>
        <member name="M:Ranorex.Core.Util.HasTopMostForm">
            <summary>
            Determines whether the current application has a form with the <see cref="P:System.Windows.Forms.Form.TopMost"/>
            property set to <c>true</c>.
            </summary>
            <returns>
              <c>true</c> if a form of this application has the <see cref="P:System.Windows.Forms.Form.TopMost"/> property
              set to <c>true</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.Core.Util.GetApplicationOpenForms">
            <summary>
            Gets the open forms of the application.
            </summary>
            <returns>A list containing the open forms within the application.</returns>
            <remarks>This method is a wrapper for the <see cref="P:System.Windows.Forms.Application.OpenForms"/> property.</remarks>
        </member>
        <member name="M:Ranorex.Core.Util.StartRanorexInstrumentationWizard(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Starts the ranorex instrumentation wizard.
            </summary>
            <param name="pageName">Name of the page to show.</param>
            <param name="props">Additional properties passed to the wizard.</param>
            <returns>A value indicating if the wizard could successfully be started.</returns>
        </member>
        <member name="M:Ranorex.Core.Util.StartRanorexInstrumentationWizard(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Diagnostics.Process@)">
            <summary>
            Starts the ranorex instrumentation wizard.
            </summary>
            <param name="pageName">Name of the page to show.</param>
            <param name="props">Additional properties passed to the wizard.</param>
            <param name="process">Out parameter containing the created process</param>
            <returns>A value indicating if the wizard could successfully be started.</returns>
        </member>
        <member name="M:Ranorex.Core.Util.GetCodeModuleCSharpReplayTemplate">
            <summary>
            Gets the CSharp code module replay template.
            </summary>
            <returns>The CSharp code module replay template.</returns>
        </member>
        <member name="M:Ranorex.Core.Util.GetCodeModuleVBReplayTemplate">
            <summary>
            Gets the VB.NET code module replay template.
            </summary>
            <returns>The VB.NET code module replay template.</returns>
        </member>
        <member name="M:Ranorex.Core.Util.SetAppUserModelId(System.String,System.Boolean)">
            <summary>
            Ranorex internal use only.
            </summary>
            <param name="appName">Internal use.</param>
            <param name="specificProcArch">Internal use.</param>
        </member>
        <member name="T:Ranorex.Core.Util.EnUsCultureContext">
            <summary>
            Provides a context that temporarily switches the culture of the current
            thread to the "en-us" culture.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Util.EnUsCultureContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Core.Util.EnUsCultureContext"/> class.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Util.EnUsCultureContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Util.EnUsCultureContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Ranorex.Core.Util.HideFormsContext">
            <summary>
            A context for hiding and restoring all open forms of the application.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Util.HideFormsContext.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="targetRegion">The target region which a form must (partially)
            intersect to be hidden.</param>
        </member>
        <member name="M:Ranorex.Core.Util.HideFormsContext.OnClose">
            <summary>
            Restores the hidden forms.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Util.CursorContext">
            <summary>
            A context for setting and restoring the application's current cursor.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Util.CursorContext.#ctor(System.Windows.Forms.Cursor)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="temporaryCursor">The cursor to use while the context is active.</param>
        </member>
        <member name="M:Ranorex.Core.Util.CursorContext.OnClose">
            <summary>
            Restores the current cursor.
            </summary>
        </member>
        <member name="T:Ranorex.Core.Util.BaseContext">
            <summary>
            A base implementation of the <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Util.BaseContext.Finalize">
            <summary>
            On garbage collection calls <see cref="M:Ranorex.Core.Util.BaseContext.Dispose"/> if it has not already been called.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Util.BaseContext.Dispose">
            <summary>
            Calls the <see cref="M:Ranorex.Core.Util.BaseContext.OnClose"/> method for this instance.
            </summary>
            <remarks><see cref="M:Ranorex.Core.Util.BaseContext.OnClose"/> is only called once even if this method is called
            several times.</remarks>
        </member>
        <member name="M:Ranorex.Core.Util.BaseContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ranorex.Core.Util.BaseContext.OnClose">
            <summary>
            Called when the context is closed, i.e. is disposed or goes out of scope.
            </summary>
        </member>
        <member name="T:Ranorex.Core.ValueFromStringDelegate">
            <summary>
            A custom handler for parsing values from strings.
            </summary>
            <param name="value">The string to convert from.</param>
            <returns>The object parsed from the string.</returns>
        </member>
        <member name="T:Ranorex.Core.ValueToStringDelegate">
            <summary>
            A custom handler creating serialized strings from values.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The string representation of the object.</returns>
            <remarks>For user-readable "friendly" strings use object.ToString() instead.</remarks>
        </member>
        <member name="T:Ranorex.Core.ValueConverter">
            <summary>
            Supports converting strings to various types.
            </summary>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.RegisterCustomConverter(System.Type,Ranorex.Core.ValueFromStringDelegate,Ranorex.Core.ValueToStringDelegate)">
            <summary>
            Registers a custom value converter to use with FromString() and ToString()
            </summary>
            <param name="type">The type to register the converter for.</param>
            <param name="fromConv">The converter delegate for "FromString".</param>
            <param name="toConv">The converter delegate for "ToString".</param>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.ArgumentFromString``1(System.String,System.String)">
            <summary>
            Creates an instance of the specified type from string data.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The object instance.</returns>
            <exception cref="T:System.Exception">If the <paramref name="value"/> cannot be converted to
            the specified <typeparamref name="T"/>.</exception>
            <param name="argNamename">The name of the argument that the value is being converted for.</param>
            <param name="value">The string data representation of the type.</param>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.FromString``1(System.String)">
            <summary>
            Creates an instance of the specified type from string data.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The string data representation of the type.</param>
            <returns>The object instance.</returns>
            <exception cref="T:System.Exception">If the <paramref name="value"/> cannot be converted to
            the specified <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.GetDefaultValue(System.Type)">
            <summary>
            Creates a default instance of the specified type.
            </summary>
            <param name="targetType">The target type to create a default instance of.</param>
            <returns>The default instance or value for the <paramref name="targetType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.TryFromString``1(System.String,System.Object@)">
            <summary>
            Creates an instance of the specified type from string data.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The string data representation of the type.</param>
            <param name="result">When this method returns, contains the converted object instance.</param>
            <returns>If <c>true</c> the <paramref name="value"/> can be converted to
            the specified <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.TryFromString(System.String,System.Type,System.Object@)">
            <summary>
            Creates an instance of the specified type from string data.
            </summary>
            <param name="value">The string data representation of the type.</param>
            <param name="targetType">The target type to convert to.</param>
            <param name="result">When this method returns, contains the converted object instance.</param>
            <returns>If <c>true</c> the <paramref name="value"/> can be converted to
            the specified <paramref name="targetType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c> and
            <paramref name="targetType"/> is a value type or <paramref name="targetType"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.FromString(System.String,System.Type)">
            <summary>
            Creates an instance of the specified type from string data.
            </summary>
            <param name="value">The string data representation of the type.</param>
            <param name="targetType">The target type to convert to.</param>
            <returns>The object instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c> and
            <paramref name="targetType"/> is a value type or <paramref name="targetType"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.Exception">If the <paramref name="value"/> cannot be converted to
            the specified <paramref name="targetType"/>.</exception>
            <exception cref="T:System.FormatException">If the <paramref name="value"/> cannot be parsed and converted to
            the specified <paramref name="targetType"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.ToFriendlyString(System.Object)">
            <summary>
            Creates a human readable string representation of an object.
            </summary>
            <param name="value">The object instance to convert to its human readable string representation.</param>
            <returns>The object converted to a human readable string.</returns>
            <remarks>In contrast to <see cref="M:Ranorex.Core.ValueConverter.ToString(System.Object,System.String)"/>, no base64 encoding is used. Use this method
            for getting string representations of objects in UIs and RanoreXPaths.
            </remarks>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.ToDefaultString(System.Type)">
             <summary>
             Creates a default string representation of a type.
             </summary>
            <param name="targetType">The target type to create from.</param>
             <returns>The type default value as string.</returns>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.ToDefaultString(System.Type,System.String)">
             <summary>
             Creates a default string representation of a type.
             </summary>
            <param name="targetType">The target type to create from.</param>
            <param name="defaultFormat">The format to use.</param>
             <returns>The type default value as string.</returns>
        </member>
        <member name="M:Ranorex.Core.ValueConverter.ToString(System.Object)">
            <summary>
            Creates a string representation of an object.
            </summary>
            <param name="value">The object instance to convert to its string representation.</param>
            <returns>The object as string.</returns>
            <remarks>Use this method for storing and loading values (round trip). If the object cannot be
            converted using the <see cref="M:Ranorex.Core.ValueConverter.ToFriendlyString(System.Object)"/> method, it is serialized into a base64 string.
            </remarks>
        </member>
        <member name="T:Ranorex.Core.Watchdog">
            <summary>
            Provides a way to abort a thread after a specified timeout.
            </summary>
            <remarks>When the timeout is reached, the <see cref="P:Ranorex.Core.Watchdog.WatchedThread"/> is
            aborted by calling <see cref="M:System.Threading.Thread.Abort(System.Object)"/> on the thread.
            If you specify a state object in the <see cref="M:Ranorex.Core.Watchdog.#ctor(System.Object,Ranorex.Duration)"/> constructor,
            that object is set to the <see cref="P:System.Threading.ThreadAbortException.ExceptionState"/> of
            the <see cref="T:System.Threading.ThreadAbortException"/> that is raised when the <see cref="P:Ranorex.Core.Watchdog.WatchedThread"/>
            is aborted due to the timeout being elapsed.
            <para>Note that an asynchronous abort of the watched thread is done not before 150% of
            the specified timeout are reached. Call the <see cref="M:Ranorex.Core.Watchdog.CheckAbortSynchronous"/> method
            from the watched thread to abort the watched thread synchronously when the timeout is
            reached, but before the asynchronous abort happens.</para></remarks>
        </member>
        <member name="M:Ranorex.Core.Watchdog.#ctor(System.Object,Ranorex.Duration)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="state">Specifies the value of the <see cref="P:System.Threading.ThreadAbortException.ExceptionState"/> property
            of the <see cref="T:System.Threading.ThreadAbortException"/> that is raised when the <see cref="P:Ranorex.Core.Watchdog.WatchedThread"/>
            is aborted.</param>
            <param name="timeout">Specifies the timeout after which the <see cref="P:Ranorex.Core.Watchdog.WatchedThread"/>
            is aborted.</param>
            <remarks>The <see cref="P:System.Threading.Thread.CurrentThread"/> will be watched.</remarks>
        </member>
        <member name="M:Ranorex.Core.Watchdog.#ctor(System.Object,Ranorex.Duration,System.Threading.Thread)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="state">Specifies the value of the <see cref="P:System.Threading.ThreadAbortException.ExceptionState"/> property
            of the <see cref="T:System.Threading.ThreadAbortException"/> that is raised when the <see cref="P:Ranorex.Core.Watchdog.WatchedThread"/>
            is aborted.</param>
            <param name="timeout">Specifies the timeout after which the <see cref="P:Ranorex.Core.Watchdog.WatchedThread"/>
            is aborted.</param>
            <param name="watchedThread">The watched thread.</param>
        </member>
        <member name="M:Ranorex.Core.Watchdog.Finalize">
            <summary>
            When the instance is finalized, frees all resources of the instance.
            </summary>
        </member>
        <member name="P:Ranorex.Core.Watchdog.WatchedThread">
            <summary>
            The <see cref="T:System.Threading.Thread"/> that is watched and aborted if the timeout is elapsed.
            </summary>
        </member>
        <member name="M:Ranorex.Core.Watchdog.CheckAbortSynchronous">
            <summary>
            Can be called by the watched thread (and the watched thread only) to force the
            watchdog to check the timeout and consequently abort synchronously.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this method is not executed by the
            <see cref="P:Ranorex.Core.Watchdog.WatchedThread"/>.</exception>
        </member>
        <member name="M:Ranorex.Core.Watchdog.Dispose">
            <summary>
            Releases all resources held by this instance.
            </summary>
            <remarks>Note: Disposing the instance before the timeout has expired won't abort
            the watched thread.</remarks>
        </member>
        <member name="T:Ranorex.Adapter">
            <summary>
            The base class for all role and capability adapters.
            </summary>
        </member>
        <member name="M:Ranorex.Adapter.#ctor">
            <summary>
            Creates a new instance that has no <see cref="P:Ranorex.Adapter.Element"/> assigned to it. This constructor
            is used internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Adapter.#ctor(Ranorex.Core.Element)">
            <summary>
            Checks if the element provides the required capabilities for this adapter.
            </summary>
            <param name="element">The element to construct an adapter for.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Adapter.DefaultSearchTimeout">
            <summary>
            The timeout used when adapters are searched by assigning a path
            to an adapter variable (implicit cast operator).
            </summary>
            <example>The timeout value set to this property is used for searching
            when implicitly casting a path (in its string representation) to an adapter variable:
            <code>Button button = "pathToButton";</code></example>
            <remarks>This property is equivalent to <see cref="P:Ranorex.Core.RxPath.DefaultSearchTimeout"/>.</remarks>
        </member>
        <member name="P:Ranorex.Adapter.TimeoutFactor">
            <summary>
            Gets or sets a value that all timeouts of find operations are multiplied with.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.Element">
            <summary>
            The element associated with this adapter.
            </summary>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If setting the value of this property
            and the element does not support the capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Adapter.op_Implicit(Ranorex.Adapter)~Ranorex.Core.Element">
            <summary>
            Converts the adapter to an <see cref="P:Ranorex.Adapter.Element"/> by returning the underlying element.
            </summary>
            <param name="adapter">The adapter to convert to an element.</param>
            <returns>The element corresponding to the adapter.</returns>
        </member>
        <member name="P:Ranorex.Adapter.RequiredCapabilities">
            <summary>
            Implemented by the derived class.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.DefaultUseEnsureVisible">
            <summary>
            Gets or sets the default value for the <see cref="P:Ranorex.Adapter.UseEnsureVisible"/> property.
            </summary>
            <remarks>
            The value of this property is used if the <see cref="P:Ranorex.Adapter.UseEnsureVisible"/> property
            of an adapter is set to a <c>null</c> reference.
            </remarks>
        </member>
        <member name="P:Ranorex.Adapter.UseEnsureVisible">
            <summary>
            Gets or sets a value indicating whether <see cref="M:Ranorex.Adapter.EnsureVisible"/> should be called
            before <see cref="M:Ranorex.Adapter.Click"/>, <see cref="M:Ranorex.Adapter.DoubleClick"/>, or <see cref="M:Ranorex.Adapter.MoveTo"/> actions
            on this adapter instance.
            </summary>
            <value>Set this property to a <c>null</c> reference to use the default value specified
            by <see cref="P:Ranorex.Adapter.DefaultUseEnsureVisible"/>.</value>
        </member>
        <member name="P:Ranorex.Adapter.Children">
            <summary>
            Gets the immediate children of this adapter.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.Parent">
            <summary>
            Gets the parent of this adapter.
            </summary>
        </member>
        <member name="M:Ranorex.Adapter.Create(System.Type,Ranorex.Core.Element)">
            <summary>
            Constructs an adapter of a specific type for a given element.
            </summary>
            <param name="adapterType">The type of adapter to construct. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but must not be the <see cref="T:Ranorex.Adapter"/> type itself.</param>
            <param name="element">The element associated with the adapter.</param>
            <returns>The adapter instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
            <exception cref="T:Ranorex.Core.RanorexCoreException">Thrown if the <paramref name="adapterType"/> does not inherit from <see cref="T:Ranorex.Adapter"/>.</exception>
            <exception cref="T:Ranorex.RanorexException">If generating the adapter fails for another reason.</exception>
        </member>
        <member name="M:Ranorex.Adapter.Create``1(Ranorex.Core.Element)">
            <summary>
            Constructs an adapter of a specific type for a given element.
            </summary>
            <typeparam name="T">The type of adapter to construct. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="element">The element associated with the adapter.</param>
            <returns>The adapter instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
            <exception cref="T:Ranorex.RanorexException">If generating the adapter fails for another reason.</exception>
        </member>
        <member name="M:Ranorex.Adapter.TryCreate(System.Type,Ranorex.Core.Element,Ranorex.Adapter@)">
            <summary>
            Tries to construct an adapter of a specific type for a given element.
            </summary>
            <param name="adapterType">The type of adapter to construct.</param>
            <param name="element">The element associated with the adapter.</param>
            <param name="adapter">When this method returns, the created adapter instance, if it could be created;
            otherwise a <c>null</c> reference.</param>
            <returns><c>true</c> if an adapter was successfully created, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Adapter.TryCreate``1(Ranorex.Core.Element,``0@)">
            <summary>
            Tries to construct an adapter of a specific type for a given element.
            </summary>
            <typeparam name="T">The type of adapter to construct. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="element">The element associated with the adapter.</param>
            <param name="adapter">When this method returns, the created adapter instance, if it could be created;
            otherwise a <c>null</c> reference.</param>
            <returns><c>true</c> if an adapter was successfully created, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Adapter.FindSingle(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Adapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>
            The first element found.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Adapter.FindSingle(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Adapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <returns>
            The first element found.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found within the timeout.</exception>
        </member>
        <member name="M:Ranorex.Adapter.FindSingle``1(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>
            The first element found converted to the specified adapter type.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Adapter.FindSingle``1(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <returns>
            The first element found converted to the specified adapter type.
            </returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found within the timeout.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Adapter.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Adapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element is found.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/>,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Adapter.TryFindSingle(Ranorex.Core.RxPath,Ranorex.Duration,Ranorex.Core.Element@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning an <see cref="P:Ranorex.Adapter.Element"/>.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <param name="foundElement">The first element found or <c>null</c> if no element
            is found within the timeout.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/>
            within the specified timeout, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Adapter.TryFindSingle``1(Ranorex.Core.RxPath,``0@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="foundAdapter">The first element found converted to the specified adapter type
            or <c>null</c> if no element is found or the element does not support the
            capabilities to create the specified adapter type.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/> and
            the specified adapter type could be created, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Adapter.TryFindSingle``1(Ranorex.Core.RxPath,Ranorex.Duration,``0@)">
            <summary>
            Tries to apply a Ranorex Path to the adapter, returning a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for the element.</param>
            <param name="foundAdapter">The first element found converted to the specified adapter type
            or <c>null</c> if no element is found within the timeout or the element does not support the
            capabilities to create the specified adapter type.</param>
            <returns><c>True</c> if an element is found for the specified <paramref name="path"/> within the
            specified <paramref name="timeout"/> and the specified adapter type could be created,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Adapter.Find``1(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning instances of a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Adapter.Find(Ranorex.Core.RxPath)">
            <summary>
            Applies a Ranorex Path to the adapter, returning all elements which match the path.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Adapter.Find``1(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning instances of a specific adapter type (e.g. Role or Capability).
            </summary>
            <typeparam name="T">The expected adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for at least one element matching the path.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Adapter.Find(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Applies a Ranorex Path to the adapter, returning all elements which match the path.
            </summary>
            <param name="path">The <see cref="T:Ranorex.Core.RxPath"/> to apply.</param>
            <param name="timeout">The time to keep looking for at least one element matching the path.</param>
            <returns>The result list of the path.</returns>
        </member>
        <member name="M:Ranorex.Adapter.FindChild``1">
            <summary>
            Finds an immediate child element of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The matching element adapter.</returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Adapter.FindChild``1(System.String)">
            <summary>
            Finds an immediate child element of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>The matching element adapter.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Adapter.FindChildren``1">
            <summary>
            Finds immediate child elements of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>A list of matching element adapters.</returns>
        </member>
        <member name="M:Ranorex.Adapter.FindChildren``1(System.String)">
            <summary>
            Finds immediate child elements of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>A list of matching element adapters.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.FindDescendant``1">
            <summary>
            Finds a descendant of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The matching element adapter.</returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Adapter.FindDescendant``1(System.String)">
            <summary>
            Finds a descendant of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>The matching element adapter.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
        </member>
        <member name="M:Ranorex.Adapter.FindDescendants``1">
            <summary>
            Finds all descendants of the given capability adapter type.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>A list of matching element adapters.</returns>
        </member>
        <member name="M:Ranorex.Adapter.FindDescendants``1(System.String)">
            <summary>
            Finds all descendants of the given capability adapter type with a specific label.
            </summary>
            <typeparam name="T">The adapter type to use. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="defaultLabel">The label to search by ('defaultlabel' attribute).</param>
            <returns>A list of matching element adapters.</returns>
            <remarks>The 'defaultlabel' of an element is a string value Ranorex uses to label an element in
            the element tree in Ranorex Spy. It is generated by searching all capabilities of an element for
            an explicitly marked label attribute and uses that value if found, otherwise just uses any
            attribute value. As such, the defaultlabel is not fully stable and in general should not be used
            to identify an element. Instead of this method use Find or FindSingle with an explicit RanoreXPath as
            generated by Ranorex Spy.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Filter``1(System.Collections.Generic.IList{Ranorex.Core.Element})">
            <summary>
            Filters the given element list by the specified adapter type. The returned adapter list
            correspond to the elements that could be converted to the specified adapter type.
            </summary>
            <typeparam name="T">The type of adapter to filter by. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="elements">A list of elements.</param>
            <returns>A list of adapter instances corresponding to the elements that
            could be converted to the specified adapter.</returns>
        </member>
        <member name="M:Ranorex.Adapter.ListToSingleOrNull``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first item in the <paramref name="list"/> or <c>null</c> if the
            list is empty.
            </summary>
            <typeparam name="T">The type of adapters in the list. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <param name="list">A list of adapters.</param>
            <returns>The first item in the list or <c>null</c> if the list is empty.</returns>
        </member>
        <member name="P:Ranorex.Adapter.FlavorName">
            <summary>
            The name of the flavor this element belongs to.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.ScreenRectangle">
            <summary>
            The bounding rectangle of the element in screen coordinates.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.Visible">
            <summary>
            True if the element is visible.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.HasFocus">
            <summary>
            True if the element has the focus.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.Enabled">
            <summary>
            True if the element is enabled.
            </summary>
        </member>
        <member name="M:Ranorex.Adapter.CaptureCompressedImage">
            <summary>
            Captures a PNG image of the element.
            </summary>
            <returns>A compressed image of the element.</returns>
        </member>
        <member name="M:Ranorex.Adapter.As``1">
            <summary>
            Returns an adapter of the specified type for the underlying element of the current adapter.
            </summary>
            <typeparam name="T">The adapter type. The supplied type must inherit from <see cref="T:Ranorex.Adapter"/>,
            but most not be the <see cref="T:Ranorex.Adapter"/> type itself.</typeparam>
            <returns>The specified adapter or <c>null</c> if the underlying element does not
            provide the capabilites required for the adapter.</returns>
        </member>
        <member name="M:Ranorex.Adapter.GetPath(Ranorex.Core.PathBuildMode)">
            <summary>
            Builds an absolute RxPath to the element.
            </summary>
            <param name="buildMode">Specifies how the path should be built. (optimization vs. runtime tradeoff)</param>
            <returns>The path of the element.</returns>
        </member>
        <member name="M:Ranorex.Adapter.GetPath">
            <summary>
            Builds an absolute RxPath to the element, using the 'Default' path-build mode.
            </summary>
            <returns>The path for the element represented by the adapter.</returns>
        </member>
        <member name="M:Ranorex.Adapter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Ranorex.Adapter.EnsureVisible">
            <summary>
            Ensures that the element is visible to the user.
            This is usually accomplished by bringing the element or one of its ancestors to foreground.
            </summary>
            <returns>True if the operation has suceeded.</returns>
        </member>
        <member name="M:Ranorex.Adapter.Focus">
            <summary>
            Tries to set the focus on the element.
            </summary>
        </member>
        <member name="P:Ranorex.Adapter.IsSnapshot">
            <summary>
            Gets a value indicating whether this instance is a snapshot.
            </summary>
            <value>
                <c>true</c> if this instance is a snapshot; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Adapter.Valid">
            <summary>
            Returns true if the element is believed to be valid.
            </summary>
        </member>
        <member name="M:Ranorex.Adapter.Click">
            <summary>
            Clicks on the adapter with the left mouse button.
            </summary>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons)">
            <summary>
            Clicks on the adapter with the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(Ranorex.Location)">
            <summary>
            Clicks on the adapter at the specified location.
            </summary>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.ClickWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Clicks on the adapter at the specified location, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(Ranorex.Duration)">
            <summary>
            Clicks on the adapter with the left mouse button.
            </summary>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)">
            <summary>
            Clicks on the adapter with the specified mouse buttons at a specific location <paramref name="location"/>.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.ClickWithoutBoundsCheck(System.Windows.Forms.MouseButtons,Ranorex.Location)">
            <summary>
            Clicks on the adapter with the specified mouse buttons at a specific location <paramref name="location"/>,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            Clicks on the adapter with the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Clicks on the adapter at a specific location.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.ClickWithoutBoundsCheck(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Clicks on the adapter at a specific location, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Int32,Ranorex.Duration)">
            <summary>
            Clicks on the adapter with the left mouse button the specified number of <paramref name="times"/>.
            </summary>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Clicks on the adapter with the specified mouse buttons at a given location.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.ClickWithoutBoundsCheck(System.Windows.Forms.MouseButtons,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Clicks on the adapter with the specified mouse buttons at a given location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks on the adapter with the specified mouse buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(Ranorex.Location,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks on the adapter at a specific location, with the left mouse button, the specified number of <paramref name="times"/>.
            </summary>
            <param name="times">The number of times to click.</param>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.ClickWithoutBoundsCheck(Ranorex.Location,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks on the adapter at a specific location, with the left mouse button, the specified number of <paramref name="times"/>,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="times">The number of times to click.</param>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at the specified <paramref name="location"/> relative to the adapter with the specified mouse
            buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location relative to the upper-left corner of the element
            to click on.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.ClickWithoutBoundsCheck(System.Windows.Forms.MouseButtons,Ranorex.Location,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at the specified <paramref name="location"/> relative to the adapter with the specified mouse
            buttons the specified number of <paramref name="times"/>, without reporting a warning if the location is outside the element.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location relative to the upper-left corner of the element
            to click on.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location,System.Int32,Ranorex.Duration,System.Boolean)">
            <summary>
            Clicks at the specified <paramref name="location"/> relative to the adapter with the specified mouse
            buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location relative to the upper-left corner of the element
            to click on.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if the click was performed outside the element.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick">
            <summary>
            DoubleClicks on the adapter with the left mouse button.
            </summary>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            twice internally.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(System.Windows.Forms.MouseButtons)">
            <summary>
            DoubleClicks on the adapter with the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            twice internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            DoubleClicks on the adapter with the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            twice internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(Ranorex.Location)">
            <summary>
            DoubleClicks on the adapter with the left mouse button at a specific location <paramref name="location"/>.
            </summary>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClickWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            DoubleClicks on the adapter with the left mouse button at a specific location <paramref name="location"/>,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(Ranorex.Duration)">
            <summary>
            DoubleClicks on the adapter with the left mouse button.
            </summary>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            twice internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(System.Windows.Forms.MouseButtons,Ranorex.Location)">
            <summary>
            DoubleClicks on the adapter with the specified mouse buttons at a specific location <paramref name="location"/>.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClickWithoutBoundsCheck(System.Windows.Forms.MouseButtons,Ranorex.Location)">
            <summary>
            DoubleClicks on the adapter with the specified mouse buttons at a specific location <paramref name="location"/>,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location to click at.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(Ranorex.Location,Ranorex.Duration)">
            <summary>
            DoubleClicks on the adapter at a specific location.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClickWithoutBoundsCheck(Ranorex.Location,Ranorex.Duration)">
            <summary>
            DoubleClicks on the adapter at a specific location, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(System.Windows.Forms.MouseButtons,Ranorex.Location,Ranorex.Duration)">
            <summary>
            DoubleClicks on the adapter with the specified mouse buttons at a given location.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClickWithoutBoundsCheck(System.Windows.Forms.MouseButtons,Ranorex.Location,Ranorex.Duration)">
            <summary>
            DoubleClicks on the adapter with the specified mouse buttons at a given location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleClick(System.Windows.Forms.MouseButtons,Ranorex.Location,Ranorex.Duration,System.Boolean)">
            <summary>
            DoubleClicks on the adapter with the specified mouse buttons at a given location.
            </summary>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if the double click was performed outside the element.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch(Ranorex.Location)"/> will be called
            twice internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.MoveTo">
            <summary>
            Moves the mouse to the adapter.
            </summary>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.MoveTo(Ranorex.Duration)">
            <summary>
            Moves the mouse to the adapter.
            </summary>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.Touch"/> will be called
            internally and the arguments will not be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.MoveToWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Moves the mouse to the specified location in the adapter, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location relative to the adapter to move to.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.TouchMove(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.MoveTo(Ranorex.Location)">
            <summary>
            Moves the mouse to the specified location in the adapter.
            </summary>
            <param name="location">The location relative to the adapter to move to.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.TouchMove(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.MoveTo(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Moves the mouse to the specified location in the adapter.
            </summary>
            <param name="location">The location relative to the adapter to move to.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.TouchMove(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.MoveToWithoutBoundsCheck(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Moves the mouse to the specified location in the adapter, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location relative to the adapter to move to.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.TouchMove(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.MoveTo(Ranorex.Location,Ranorex.Duration,System.Boolean)">
            <summary>
            Moves the mouse to the specified location in the adapter.
            </summary>
            <param name="location">The location relative to the adapter to move to.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if mouse move was performed outside the element.</param>
            <remarks>If this method is invoked on a mobile element, <see cref="M:Ranorex.Adapter.TouchMove(Ranorex.Location)"/> will be called
            internally and only the <paramref name="location"/> argument will be considered.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.PressKeys(System.String)">
            <summary>
            Tries to set focus to the adapter and then presses the keys specified by <paramref name="sequence"/>.
            </summary>
            <param name="sequence">A sequence of characters and escape groups
            that specify the keys to press.</param>
            <remarks>
            Each key is represented by a single character or an escape group. To specify a single
            keyboard character, use the character itself (e.g. use "aBc" to press the keys A, B+Shift,
            and C after another). Only the '{' character has a special meaning and needs to be escaped
            by preceding it with another '{' (specify "{{" to issue a '{' key press).
            <para>Escape groups, signaled by braces "{}", may be used to produce a key action
            with any of the keys specified by the <see cref="T:System.Windows.Forms.Keys"/> enumeration.
            "{Z}" means that the 'z' key should be pressed, and "{return}" or "{enter}" that the
            Return key is to be pressed.</para>
                <para>
            Additionally, in an escape group you can specify a modifier that determines whether the key
            should be hold down (e.g. {CONTROL down}), released (e.g. {shift up}), or pressed a number
            of times (e.g. {z 3}). In an escape group, key name and modifier must be separated by
            a single shift character.
            </para>
            <para>The keys <see cref="F:System.Windows.Forms.Keys.A"/> to <see cref="F:System.Windows.Forms.Keys.Z"/> set the key
            modifiers (ALT, CTRL, SHIFT) and in particular the shift key depending on their case, even
            if used in an escape group. If these keys should not modify the shift key state, wrap them
            into an escape group and add "key" to the character, e.g. "{Rkey}"
            to press the R key without changing the shift key state.</para>
            <para>When invoked on mobile elements, this method only supports the special
            keys {BACK} and {MENU}.</para>
            </remarks>
        </member>
        <member name="M:Ranorex.Adapter.PressKeys(System.String,Ranorex.Duration)">
            <summary>
            Tries to set focus to the adapter and then presses the keys specified by <paramref name="sequence"/>.
            </summary>
            <param name="sequence">A sequence of characters and escape groups
            that specify the keys to press.</param>
            <param name="keyPressTime">The key press time.</param>
            <remarks>
            Each key is represented by a single character or an escape group. To specify a single
            keyboard character, use the character itself (e.g. use "aBc" to press the keys A, B+Shift,
            and C after another). Only the '{' character has a special meaning and needs to be escaped
            by preceding it with another '{' (specify "{{" to issue a '{' key press).
            <para>Escape groups, signaled by braces "{}", may be used to produce a key action
            with any of the keys specified by the <see cref="T:System.Windows.Forms.Keys"/> enumeration.
            "{Z}" means that the 'z' key should be pressed, and "{return}" or "{enter}" that the
            Return key is to be pressed.</para>
                <para>
            Additionally, in an escape group you can specify a modifier that determines whether the key
            should be hold down (e.g. {CONTROL down}), released (e.g. {shift up}), or pressed a number
            of times (e.g. {z 3}). In an escape group, key name and modifier must be separated by
            a single shift character.
            </para>
            <para>The keys <see cref="F:System.Windows.Forms.Keys.A"/> to <see cref="F:System.Windows.Forms.Keys.Z"/> set the key
            modifiers (ALT, CTRL, SHIFT) and in particular the shift key depending on their case, even
            if used in an escape group. If these keys should not modify the shift key state, wrap them
            into an escape group and add "key" to the character, e.g. "{Rkey}"
            to press the R key without changing the shift key state.</para>
            <para>When invoked on mobile elements, this method only supports the special
            keys {BACK} and {MENU}.</para>
            </remarks>
        </member>
        <member name="M:Ranorex.Adapter.Touch">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click"/> will be called
            internally.
            </remarks>
        </member>
        <member name="M:Ranorex.Adapter.Touch(Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click"/> will be called
            internally.
            </remarks>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(System.Int32,System.Int32)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to touch within the element rectangle in pixels. If the value is greater than the width of the
            element the click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to touch within the element rectangle in pixels. If the value is greater than the height of the
            element the click will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchWithoutBoundsCheck(System.Int32,System.Int32)">
            <summary>
            Performs a touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to touch within the element rectangle in pixels. If the value is greater than the width of the
            element the click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to touch within the element rectangle in pixels. If the value is greater than the height of the
            element the click will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to touch within the element rectangle in pixels. If the value is greater than the width of the
            element the click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to touch within the element rectangle in pixels. If the value is greater than the height of the
            element the click will be performed outside the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchWithoutBoundsCheck(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to touch within the element rectangle in pixels. If the value is greater than the width of the
            element the click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to touch within the element rectangle in pixels. If the value is greater than the height of the
            element the click will be performed outside the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(System.Double,System.Double)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchWithoutBoundsCheck(System.Double,System.Double)">
            <summary>
            Performs a touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchWithoutBoundsCheck(System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchWithoutBoundsCheck(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(Ranorex.Location)">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Performs a touch action on the adapter, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="location">The location to touch at.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchWithoutBoundsCheck(System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter, without reporting a warning if the location is outside the element.
            </summary>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="location">The location to touch at.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.Touch(System.Int32,Ranorex.Location,Ranorex.Duration,System.Boolean)">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="location">The location to touch at.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if the click was performed outside the element.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch">
            <summary>
            Performs a long touch action on the adapter.
            </summary>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter.
            </summary>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(System.Int32,System.Int32)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouchWithoutBoundsCheck(System.Int32,System.Int32)">
            <summary>
            Performs a long touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouchWithoutBoundsCheck(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(System.Double,System.Double)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouchWithoutBoundsCheck(System.Double,System.Double)">
            <summary>
            Performs a long touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouchWithoutBoundsCheck(System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(Ranorex.Location)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.LongTouchWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Performs a long touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to touch at.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouchWithoutBoundsCheck(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to touch at.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Adapter.LongTouch(Ranorex.Location,Ranorex.Duration,System.Boolean)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if the click was performed outside the element.</param>
        </member>
        <member name="M:Ranorex.Adapter.Swipe(Ranorex.Core.Recorder.Touch.GestureDirection,Ranorex.Core.Distance)">
            <summary>
            Performs a 'Swipe' operation that starts on the center point of the element with a specific direction.
            </summary>
            <param name="direction">The direction of the swipe.</param>
            <param name="distance">The distance to swipe.</param>
            <exception cref="T:System.ArgumentException">Distance is negative.</exception>
        </member>
        <member name="M:Ranorex.Adapter.Swipe(Ranorex.Location,Ranorex.Core.Recorder.Touch.GestureDirection,Ranorex.Core.Distance,Ranorex.Duration,System.Int32)">
            <summary>
            Performs a 'Swipe' operations that starts at the point of the element specified by location.
            </summary>
            <param name="startLocation">The location where the swipe should start.</param>
            <param name="direction">The direction of the swipe.</param>
            <param name="swipeDuration">The duration in that the swipe should get performed.</param>
            <param name="distance">
            The distance to swipe. For custom rotations the values is not pixel exact and will likely
            get rounded. The rounding is dependent of the technology the swipe is executed on.
            </param>
            <param name="steps">
            How many steps the swipe shall have. A step is one distinct move event on the target technology. The default is '0', this
            means the target technology determines how many steps are made by applying custom heuristics. A step count of one will
            produce the event sequence 1x pointer down, 1x pointer move and 1x pointer up. A step count of two will produce the
            event sequence 1x pointer down, 2x pointer move and 1x pointer up.
            </param>
            <exception cref="T:System.ArgumentNullException">When startLocation is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Steps is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Distance is negative.</exception>
        </member>
        <member name="M:Ranorex.Adapter.SwipeWithoutBoundsCheck(Ranorex.Location,Ranorex.Core.Recorder.Touch.GestureDirection,Ranorex.Core.Distance,Ranorex.Duration,System.Int32)">
            <summary>
            Performs a 'Swipe' operations that starts at the point of the element specified by location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="startLocation">The location where the swipe should start.</param>
            <param name="direction">The direction of the swipe.</param>
            <param name="swipeDuration">The duration in that the swipe should get performed.</param>
            <param name="distance">
            The distance to swipe. For custom rotations the values is not pixel exact and will likely
            get rounded. The rounding is dependent of the technology the swipe is executed on.
            </param>
            <param name="steps">
            How many steps the swipe shall have. A step is one distinct move event on the target technology. The default is '0', this
            means the target technology determines how many steps are made by applying custom heuristics. A step count of one will
            produce the event sequence 1x pointer down, 1x pointer move and 1x pointer up. A step count of two will produce the
            event sequence 1x pointer down, 2x pointer move and 1x pointer up.
            </param>
            <exception cref="T:System.ArgumentNullException">When startLocation is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Steps is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Distance is negative.</exception>
        </member>
        <member name="M:Ranorex.Adapter.Swipe(Ranorex.Location,Ranorex.Core.Recorder.Touch.GestureDirection,Ranorex.Core.Distance,Ranorex.Duration,System.Int32,System.Boolean)">
            <summary>
            Performs a 'Swipe' operations that starts at the point of the element specified by location.
            </summary>
            <param name="startLocation">The location where the swipe should start.</param>
            <param name="direction">The direction of the swipe.</param>
            <param name="swipeDuration">The duration in that the swipe should get performed.</param>
            <param name="distance">
            The distance to swipe. For custom rotations the values is not pixel exact and will likely
            get rounded. The rounding is dependent of the technology the swipe is executed on.
            </param>
            <param name="steps">
            How many steps the swipe shall have. A step is one distinct move event on the target technology. The default is '0', this
            means the target technology determines how many steps are made by applying custom heuristics. A step count of one will
            produce the event sequence 1x pointer down, 1x pointer move and 1x pointer up. A step count of two will produce the
            event sequence 1x pointer down, 2x pointer move and 1x pointer up.
            </param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if swipe was performed outside the element.</param>
            <exception cref="T:System.ArgumentNullException">When startLocation is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Steps is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Distance is negative.</exception>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTap">
            <summary>
            Performs a double tap action on the adapter.
            </summary>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTap(System.Int32,System.Int32)">
            <summary>
            Performs a double tap action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTapWithoutBoundsCheck(System.Int32,System.Int32)">
            <summary>
            Performs a double tap action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTap(System.Double,System.Double)">
            <summary>
            Performs a double tap action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTapWithoutBoundsCheck(System.Double,System.Double)">
            <summary>
            Performs a double tap action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTap(Ranorex.Location)">
            <summary>
            Performs a double tap action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTapWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Performs a double tap action on the adapter with the specified location,
            without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to touch at.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.DoubleTap(Ranorex.Location,System.Boolean)">
            <summary>
            Performs a double tap action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if double tap was performed outside the element.</param>
            <remarks>If this method is invoked on a local element, <see cref="M:Ranorex.Adapter.Click(System.Windows.Forms.MouseButtons,Ranorex.Location)"/>
            will be called internally performing a click with the right mouse button.</remarks>
        </member>
        <member name="M:Ranorex.Adapter.TouchStart(System.Int32,System.Int32)">
            <summary>
            Begins a multi touch operation on the adapter. Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStartWithoutBoundsCheck(System.Int32,System.Int32)">
            <summary>
            Begins a multi touch operation on the adapter, without reporting a warning if the location is outside the element.
            Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStart(System.Double,System.Double)">
            <summary>
            Begins a multi touch operation on the adapter. Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStartWithoutBoundsCheck(System.Double,System.Double)">
            <summary>
            Begins a multi touch operation on the adapter, without reporting a warning if the location is outside the element.
            Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStart(Ranorex.Location)">
            <summary>
            Performs a touch start action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStartWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Performs a touch start action on the adapter, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)">
            <summary>
            Performs a touch start action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStartWithoutBoundsCheck(System.Int32,Ranorex.Location)">
            <summary>
            Performs a touch start action on the adapter, without reporting a warning if the location is outside the element.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location,System.Boolean)">
            <summary>
            Performs a touch start action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if touchStart was performed outside the element.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEnd(System.Int32,System.Int32)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Adapter.TouchStart(System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEndWithoutBoundsCheck(System.Int32,System.Int32)">
            <summary>
            Finishes a multi touch operation on the adapter, without reporting a warning if the location is outside the element.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEnd(System.Double,System.Double)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEndWithoutBoundsCheck(System.Double,System.Double)">
            <summary>
            Finishes a multi touch operation on the adapter, without reporting a warning if the location is outside the element.
            <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEnd(Ranorex.Location)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEndWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Finishes a multi touch operation on the adapter, without reporting a warning if the location is outside the element.
            <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEnd(System.Int32,Ranorex.Location)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEndWithoutBoundsCheck(System.Int32,Ranorex.Location)">
            <summary>
            Finishes a multi touch operation on the adapter, without reporting a warning if the location is outside the element.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEnd(System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEndWithoutBoundsCheck(System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Finishes a multi touch operation on the adapter,
            without reporting a warning if the location is outside the element. <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEnd(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEndWithoutBoundsCheck(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Finishes a multi touch operation on the adapter,
            without reporting a warning if the location is outside the element. <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchEnd(System.Int32,Ranorex.Location,Ranorex.Duration,System.Boolean)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="location">The location to touch at.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if touchEnd was performed outside the element.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(System.Int32,System.Int32)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(System.Int32,System.Int32)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(System.Double,System.Double)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(System.Double,System.Double)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(System.Int32,Ranorex.Location)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(System.Int32,Ranorex.Location)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="pointerId">The pointer id to use.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(Ranorex.Location)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(Ranorex.Location)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMoveWithoutBoundsCheck(Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter, without reporting a warning if the location is outside the element.
            This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
        </member>
        <member name="M:Ranorex.Adapter.TouchMove(System.Int32,Ranorex.Location,Ranorex.Duration,System.Boolean)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with finger/mouse pressed.
            <seealso cref="M:Ranorex.Adapter.TouchStart(Ranorex.Location)"/>
            </summary>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="location">The location to touch at.</param>
            <param name="moveTime">The time it takes to move the cursor to the target point.</param>
            <param name="showOutOfBoundsWarning">A Warning is added to the Report if touchMove was performed outside the element.</param>
        </member>
        <member name="M:Ranorex.Adapter.GetAttributeValue``1(System.String)">
            <summary>
            Gets an attribute value using a generic return type.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute value of the specified type or the default type value if the attribute was not available.</returns>
        </member>
        <member name="M:Ranorex.Adapter.AssertAdapterType(System.Type)">
            <summary>
            Assert that <paramref name="adapterType"/> is a valid adapter type.
            </summary>
            <exception cref="T:Ranorex.Core.RanorexCoreException">If the type is not a valid adapter type.</exception>
        </member>
        <member name="T:Ranorex.Button">
            <summary>
            Represents a push button.
            </summary>
        </member>
        <member name="M:Ranorex.Button.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Button"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Button.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Button"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Button.Pressed">
            <summary>
            True if the button is currently pressed.
            </summary>
        </member>
        <member name="P:Ranorex.Button.Text">
            <summary>
            The text associated with the button.
            </summary>
        </member>
        <member name="M:Ranorex.Button.Press">
            <summary>
            Presses the button.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.Button.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Button.op_Implicit(System.String)~Ranorex.Button">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Button.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Button.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Button.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Button.op_Implicit(Ranorex.Core.Element)~Ranorex.Button">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Button.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Button.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Button.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Cell">
            <summary>
            Represents a table cell.
            </summary>
        </member>
        <member name="M:Ranorex.Cell.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Cell"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Cell.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Cell"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Cell.ColumnIndex">
            <summary>
            The index of the column the cell belongs to.
            </summary>
        </member>
        <member name="P:Ranorex.Cell.Image">
            <summary>
            The image content of the cell.
            </summary>
        </member>
        <member name="P:Ranorex.Cell.IsHeader">
            <summary>
            True if the cell is a row or column header.
            </summary>
        </member>
        <member name="P:Ranorex.Cell.RowIndex">
            <summary>
            The index of the row the cell belongs to cell.
            </summary>
        </member>
        <member name="P:Ranorex.Cell.Selected">
            <summary>
            True if the cell is currently selected.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.Cell.Text">
            <summary>
            The text content of the cell.
            </summary>
        </member>
        <member name="M:Ranorex.Cell.Select">
            <summary>
            Selects the cell.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.Cell.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Cell.op_Implicit(System.String)~Ranorex.Cell">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Cell.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Cell.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Cell.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Cell.op_Implicit(Ranorex.Core.Element)~Ranorex.Cell">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Cell.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Cell.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Cell.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Checkable">
            <summary>
            Represents an element that allows the user to select a true or false condition.
            </summary>
        </member>
        <member name="M:Ranorex.Checkable.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Checkable"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Checkable.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Checkable"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Checkable.Checked">
            <summary>
            True if the element is checked.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.Checkable.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Checkable.op_Implicit(System.String)~Ranorex.Checkable">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Checkable.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Checkable.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Checkable.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Checkable.op_Implicit(Ranorex.Core.Element)~Ranorex.Checkable">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Checkable.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Checkable.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Checkable.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.CheckBox">
            <summary>
            Represents a check box that allows the user to select a true or false condition.
            </summary>
        </member>
        <member name="M:Ranorex.CheckBox.Check">
            <summary>
            Set the checkbox state to true.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="M:Ranorex.CheckBox.Uncheck">
            <summary>
            Set the checkbox state to false.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="M:Ranorex.CheckBox.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.CheckBox"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.CheckBox.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.CheckBox"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.CheckBox.Checked">
            <summary>
            True if the checkbox is checked or indeterminate.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.CheckBox.CheckState">
            <summary>
            The state of the checkbox.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.CheckBox.Text">
            <summary>
            The text associated with the checkbox.
            </summary>
        </member>
        <member name="P:Ranorex.CheckBox.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.CheckBox.op_Implicit(System.String)~Ranorex.CheckBox">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The CheckBox.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.CheckBox.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The CheckBox.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.CheckBox.op_Implicit(Ranorex.Core.Element)~Ranorex.CheckBox">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The CheckBox.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.CheckBox.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The CheckBox.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Column">
            <summary>
            Represents a table column.
            </summary>
        </member>
        <member name="P:Ranorex.Column.Cells">
            <summary>
            Gets the cells contained in the column.
            </summary>
            <value>The cells in the column.</value>
        </member>
        <member name="M:Ranorex.Column.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Column"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Column.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Column"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Column.Index">
            <summary>
            The index of the column in the table.
            </summary>
        </member>
        <member name="P:Ranorex.Column.Selected">
            <summary>
            True if the column is currently selected.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.Column.Text">
            <summary>
            The title of the column in the table.
            </summary>
        </member>
        <member name="M:Ranorex.Column.Select">
            <summary>
            Selects the entire column.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.Column.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Column.op_Implicit(System.String)~Ranorex.Column">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Column.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Column.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Column.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Column.op_Implicit(Ranorex.Core.Element)~Ranorex.Column">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Column.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.ComboBox">
            <summary>
            Represents a combo box control.
            </summary>
        </member>
        <member name="P:Ranorex.ComboBox.Items">
            <summary>
            Gets the list items contained in the combobox list.
            </summary>
            <value>The list items.</value>
        </member>
        <member name="P:Ranorex.ComboBox.SelectedItem">
            <summary>
            Gets the currently selected list item.
            </summary>
            <value>The currently selected list item or <c>null</c> if no item is currently selected.</value>
        </member>
        <member name="M:Ranorex.ComboBox.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.ComboBox"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.ComboBox.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.ComboBox"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.ComboBox.DropDownVisible">
            <summary>
            True if the dropdown part of the combobox is currently visible
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.ComboBox.SelectedItemIndex">
            <summary>
            The index of the currently selected item.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.ComboBox.SelectedItemText">
            <summary>
            The text of the currently selected item.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.ComboBox.Text">
            <summary>
            The text contained in the textbox part of the combobox.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.ComboBox.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.ComboBox.op_Implicit(System.String)~Ranorex.ComboBox">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ComboBox.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ComboBox.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ComboBox.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ComboBox.op_Implicit(Ranorex.Core.Element)~Ranorex.ComboBox">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ComboBox.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ComboBox.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ComboBox.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Container">
            <summary>
            Represents a logical container element, such as a panel or groupbox.
            </summary>
        </member>
        <member name="M:Ranorex.Container.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Container"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Container.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Container"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Container.Caption">
            <summary>
            The caption or title of the container.
            </summary>
        </member>
        <member name="P:Ranorex.Container.Type">
            <summary>
            The type of the container.
            </summary>
        </member>
        <member name="P:Ranorex.Container.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Container.op_Implicit(System.String)~Ranorex.Container">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Container.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Container.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Container.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Container.op_Implicit(Ranorex.Core.Element)~Ranorex.Container">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Container.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Container.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Container.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.ContextMenu">
            <summary>
            Represents a context popup menu.
            </summary>
        </member>
        <member name="P:Ranorex.ContextMenu.Current">
            <summary>
            Gets the currently active context menu.
            </summary>
            <value>The currently active context menu.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ContextMenu.Items">
            <summary>
            Gets the menu items contained in the context menu or popup menu.
            </summary>
            <value>The menu items.</value>
        </member>
        <member name="P:Ranorex.ContextMenu.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.MenuItem"/> with the specified label.
            </summary>
            <value>The menu item.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If no item with that label is found.</exception>
        </member>
        <member name="M:Ranorex.ContextMenu.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.ContextMenu"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.ContextMenu.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.ContextMenu"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.ContextMenu.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.ContextMenu.op_Implicit(System.String)~Ranorex.ContextMenu">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ContextMenu.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ContextMenu.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ContextMenu.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ContextMenu.op_Implicit(Ranorex.Core.Element)~Ranorex.ContextMenu">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ContextMenu.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ContextMenu.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ContextMenu.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.DateTime">
            <summary>
            Represents a datetime picker or calendar control.
            </summary>
        </member>
        <member name="M:Ranorex.DateTime.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.DateTime"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.DateTime.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.DateTime"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.DateTime.Value">
            <summary>
            The date and/or time value of the element.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.DateTime.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.DateTime.op_Implicit(System.String)~Ranorex.DateTime">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The DateTime.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.DateTime.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The DateTime.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.DateTime.op_Implicit(Ranorex.Core.Element)~Ranorex.DateTime">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The DateTime.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.DateTime.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The DateTime.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Desktop">
            <summary>
            Represents the operating system desktop.
            </summary>
        </member>
        <member name="M:Ranorex.Desktop.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Desktop"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Desktop.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Desktop"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Desktop.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Desktop.op_Implicit(System.String)~Ranorex.Desktop">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Desktop.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Desktop.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Desktop.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Desktop.op_Implicit(Ranorex.Core.Element)~Ranorex.Desktop">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Desktop.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Desktop.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Desktop.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Form">
            <summary>
            Represents an application main window or a dialog window.
            </summary>
        </member>
        <member name="M:Ranorex.Form.Maximize">
            <summary>
            Maximizes the form.
            </summary>
        </member>
        <member name="M:Ranorex.Form.Minimize">
            <summary>
            Minimizes the form.
            </summary>
        </member>
        <member name="M:Ranorex.Form.Restore">
            <summary>
            Restores the form, i.e. sets its <see cref="P:Ranorex.Form.State"/> to <see cref="F:System.Windows.Forms.FormWindowState.Normal"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Form.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Form"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Form.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Form"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Form.Active">
            <summary>
            True if the form is the currently active window.
            </summary>
        </member>
        <member name="P:Ranorex.Form.AppIcon">
            <summary>
            The application icon if available.
            </summary>
        </member>
        <member name="P:Ranorex.Form.State">
            <summary>
            The state of the form or application window.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.Form.Title">
            <summary>
            The title of the form or application window.
            </summary>
        </member>
        <member name="M:Ranorex.Form.Activate">
            <summary>
            Activates the form by bringing it to the foreground.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="M:Ranorex.Form.Close">
            <summary>
            Closes the form.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="M:Ranorex.Form.Move(System.Int32,System.Int32)">
            <summary>
            Moves the form to a new location.
            </summary>
            <param name="x">The new x (left) position of the form.</param>
            <param name="y">The new y (top) position of the form.</param>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="M:Ranorex.Form.Resize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the form.
            </summary>
            <param name="width">The new width of the form.</param>
            <param name="height">The new height of the form.</param>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.Form.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Form.op_Implicit(System.String)~Ranorex.Form">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Form.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Form.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Form.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Form.op_Implicit(Ranorex.Core.Element)~Ranorex.Form">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Form.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Form.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Form.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Grip">
            <summary>
            Represents an element that can be moved or dragged, e.g. a size grip for resizing windows or controls.
            </summary>
        </member>
        <member name="M:Ranorex.Grip.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Grip"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Grip.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Grip"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Grip.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Grip.op_Implicit(System.String)~Ranorex.Grip">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Grip.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Grip.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Grip.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Grip.op_Implicit(Ranorex.Core.Element)~Ranorex.Grip">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Grip.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Grip.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Grip.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.RunAppFlags">
            <summary>
            Used to further modify the behavior when running an application.
            </summary>
        </member>
        <member name="F:Ranorex.RunAppFlags.None">
            <summary>
            No special behavior activated
            </summary>
        </member>
        <member name="F:Ranorex.RunAppFlags.NoElevation">
            <summary>
            The app will be launch non elevated no matter if parent process is elevated or not.
            </summary>
        </member>
        <member name="T:Ranorex.Host">
            <summary>
            Represents the host machine running Ranorex.
            </summary>
        </member>
        <member name="T:Ranorex.Host.DeploymentModes">
            <summary>
            States how deployment shall be done.
            </summary>
        </member>
        <member name="F:Ranorex.Host.DeploymentModes.WiFi">
            <summary>
            Deployment is done over the wireless network (RanorexService needs to be installed on the device).
            </summary>
        </member>
        <member name="F:Ranorex.Host.DeploymentModes.Usb">
            <summary>
            Deployment is done over USB cable.
            </summary>
        </member>
        <member name="F:Ranorex.Host.DeploymentModes.NoDeploy">
            <summary>
            No deployment is done, the APK file is instrumented only.
            </summary>
        </member>
        <member name="F:Ranorex.Host.DeploymentModes.Auto">
            <summary>
            Deployment is done using the connection mode for the device, i.e. which was used to add the device.
            </summary>
        </member>
        <member name="P:Ranorex.Host.Local">
            <summary>
            Gets the local host element.
            </summary>
            <value>The local host element.</value>
        </member>
        <member name="P:Ranorex.Host.Current">
            <summary>
            Gets the current host element. Use Ranore.Core.ElementEngine.Root to switch the current host.
            By default the current host is the local host.
            </summary>
            <value>The current host element.</value>
        </member>
        <member name="P:Ranorex.Host.CurrentHost">
            <summary>
            Gets the name of the current active host (automation root)
            </summary>
            <remarks>
            If a remote host is active the display name of that remote host will be returned. By default 'localhost'
            will be returned.
            </remarks>
            <value>Display name of the currently active host</value>
        </member>
        <member name="P:Ranorex.Host.AvailableHosts">
            <summary>
            Get available hosts.
            </summary>
            <remarks>
            The values returned represents all endpoints that can be set as the new element engine root.
            The first element in this collection will always be 'Localhost'. If there are other endpoints
            configured these will be appended at the end of the enumerable. The list is not sorted in any specific way.
            The endpoints returned by this property may change at any time.
            </remarks>
        </member>
        <member name="M:Ranorex.Host.MakeCurrentHost(System.String)">
            <summary>
            Activates the given host that will then be used as the new host.
            </summary>
            <remarks>
            The current host will produce the root flavor element. Use <see cref="P:Ranorex.Host.AvailableHosts"/> to
            to get a list of all available hosts.
            </remarks>
            <param name="host">The host to activate. Null or whitespace only string will reset the
            current host to 'Localhost'.</param>
        </member>
        <member name="P:Ranorex.Host.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.Form"/> with the specified title, process name or process id.
            </summary>
            <value>The matching application form.</value>
        </member>
        <member name="M:Ranorex.Host.GetApplicationForm(System.Diagnostics.Process)">
            <summary>
            Gets the main <see cref="T:Ranorex.Form"/> of a process.
            </summary>
            <param name="process">The process to get the main <see cref="T:Ranorex.Form"/> from.</param>
            <returns>A <see cref="T:Ranorex.Form"/> belonging to the specified <see cref="T:System.Diagnostics.Process"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="process"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RanorexException">If getting the process Id from <paramref name="process"/> fails.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no <see cref="T:Ranorex.Form"/> belonging to the
            specified process is found within the <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/>.</exception>
            <remarks>If more <see cref="T:Ranorex.Form"/> instances are found for the process, the last
            <see cref="T:Ranorex.Form"/> found is returned (to avoid popups).</remarks>
        </member>
        <member name="M:Ranorex.Host.GetApplicationForm(System.Diagnostics.Process,Ranorex.Duration)">
            <summary>
            Gets the main <see cref="T:Ranorex.Form"/> of a process.
            </summary>
            <param name="process">The process to get the main <see cref="T:Ranorex.Form"/> from.</param>
            <param name="timeout">The time to keep searching for a <see cref="T:Ranorex.Form"/> instance
            belonging to the <paramref name="process"/>.</param>
            <returns>A <see cref="T:Ranorex.Form"/> belonging to the specified <see cref="T:System.Diagnostics.Process"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="process"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RanorexException">If getting the process Id from <paramref name="process"/> fails.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no <see cref="T:Ranorex.Form"/> belonging to the
            specified process is found within the <paramref name="timeout"/>.</exception>
            <remarks>If more <see cref="T:Ranorex.Form"/> instances are found for the process, the last
            <see cref="T:Ranorex.Form"/> found is returned (to avoid popups).</remarks>
        </member>
        <member name="M:Ranorex.Host.GetApplicationForm(System.Int32,Ranorex.Duration)">
            <summary>
            Gets the main <see cref="T:Ranorex.Form"/> of a process.
            </summary>
            <param name="processId">The ID of the process to get the main <see cref="T:Ranorex.Form"/> from.</param>
            <param name="timeout">The time to keep searching for a <see cref="T:Ranorex.Form"/> instance
            belonging to the process.</param>
            <returns>A <see cref="T:Ranorex.Form"/> belonging to the specified process ID.</returns>
            <exception cref="T:Ranorex.ElementNotFoundException">If no <see cref="T:Ranorex.Form"/> belonging to the
            specified process ID is found within the <paramref name="timeout"/>.</exception>
            <remarks>If more <see cref="T:Ranorex.Form"/> instances are found for the process ID, the last
            <see cref="T:Ranorex.Form"/> found is returned (to avoid popups).</remarks>
        </member>
        <member name="M:Ranorex.Host.RunApplication(System.String)">
            <summary>
            Runs an application with the specified filename.
            </summary>
            <param name="fileName">The file name of the application to run.</param>
            <returns>The process ID of the started application.</returns>
            <exception cref="T:Ranorex.RanorexException">Thrown if the application cannot be started.</exception>
            <remarks>Using an AppUserModelId (familyName!appName) instead of a file name activates a Windows 8 App instead.</remarks>
        </member>
        <member name="M:Ranorex.Host.RunApplication(System.String,System.String)">
            <summary>
            Runs an application with the specified filename, passing the specified arguments.
            </summary>
            <param name="fileName">The name of the application to run.</param>
            <param name="arguments">The arguments to pass to the application on startup.</param>
            <returns>The process ID of the started application.</returns>
            <exception cref="T:Ranorex.RanorexException">Thrown if the application cannot be started.</exception>
            <remarks>Using an AppUserModelId (familyName!appName) instead of a file name activates a Windows 8 App instead.</remarks>
        </member>
        <member name="M:Ranorex.Host.RunApplication(System.String,System.String,System.String)">
            <summary>
            Runs an application with the specified filename, passing the specified arguments and
            setting the specified working directory.
            </summary>
            <param name="fileName">The name of the application to run.</param>
            <param name="arguments">The arguments to pass to the application on startup.</param>
            <param name="workingDirectory">The working directory to use for the started application.</param>
            <returns>The process ID of the started application.</returns>
            <exception cref="T:Ranorex.RanorexException">Thrown if the application cannot be started.</exception>
            <remarks>Using an AppUserModelId (familyName!appName) instead of a file name activates a Windows 8 App instead.</remarks>
        </member>
        <member name="M:Ranorex.Host.RunApplication(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Runs an application with the specified filename, passing the specified arguments and
            setting the specified working directory.
            </summary>
            <param name="fileName">The name of the application to run.</param>
            <param name="arguments">The arguments to pass to the application on startup.</param>
            <param name="workingDirectory">The working directory to use for the started application.</param>
            <param name="maximized">Specifies whether the application should be started with a normal or maximized main window.</param>
            <returns>The process ID of the started application.</returns>
            <exception cref="T:Ranorex.RanorexException">Thrown if the application cannot be started.</exception>
            <remarks>Using an AppUserModelId (familyName!appName) instead of a file name activates a Windows 8 App instead.</remarks>
        </member>
        <member name="M:Ranorex.Host.RunApplication(System.String,System.String,System.String,System.Boolean,Ranorex.RunAppFlags)">
            <summary>
            Runs an application with the specified filename, passing the specified arguments and
            setting the specified working directory.
            </summary>
            <param name="fileName">The name of the application to run.</param>
            <param name="arguments">The arguments to pass to the application on startup.</param>
            <param name="workingDirectory">The working directory to use for the started application.</param>
            <param name="maximized">Specifies whether the application should be started with a normal or maximized main window.</param>
            <param name="runFlags">Specifies special startup behavior to use when running an application.</param>
            <returns>The process ID of the started application.</returns>
            <exception cref="T:Ranorex.RanorexException">Thrown if the application cannot be started.</exception>
            <remarks>Using an AppUserModelId (familyName!appName) instead of a file name activates a Windows 8 App instead.</remarks>
        </member>
        <member name="M:Ranorex.Host.ActivateWindowsApp(System.String,System.String)">
            <summary>
            Activates the windows app with the specified app user model ID.
            </summary>
            <param name="appId">The ID of the app.</param>
            <param name="appFamilyName">The family name of the app.</param>
            <remarks>A timeout of one minute is used
            (see <see cref="M:Ranorex.Host.ActivateWindowsApp(System.String,System.String,Ranorex.Duration)"/>).</remarks>
        </member>
        <member name="M:Ranorex.Host.ActivateWindowsApp(System.String,System.String,Ranorex.Duration)">
            <summary>
            Activates the windows app with the specified app user model ID.
            </summary>
            <param name="appId">The ID of the app.</param>
            <param name="appFamilyName">The family name of the app.</param>
            <param name="timeout">A timeout specifying how long the app launcher process needs
            to stay open after activation of the app (see remarks).</param>
            <remarks>To automate Windows apps a process needs to be elevated, however, Windows apps
            can only be activated from a non-elevated process. Therefore, This methods starts a new
            non-elevated process that activates the Windows app.
            <para>For some applications, the activation process needs to stay alive until the activated
            app is fully loaded. The <paramref name="timeout"/> argument determines how long the
            activation process should stay alive after activating the Windows app.</para></remarks>
        </member>
        <member name="M:Ranorex.Host.ActivateWindowsApp(System.String,System.String,System.String)">
            <summary>
            Activates the windows app with the specified app user model ID and arguments.
            </summary>
            <param name="appId">The ID of the app.</param>
            <param name="appFamilyName">The family name of the app.</param>
            <param name="arguments">Arguments passed to the app on activation. Depending on the
            implementation of the app, these arguments may only be available when the app is
            currently not running.</param>
            <remarks>To automate Windows apps a process needs to be elevated, however, Windows apps
            can only be activated from a non-elevated process. Therefore, This methods starts a new
            non-elevated process that activates the Windows app.
            <para>A timeout of one minute is used
            (see <see cref="M:Ranorex.Host.ActivateWindowsApp(System.String,System.String,Ranorex.Duration)"/>).</para></remarks>
        </member>
        <member name="M:Ranorex.Host.ActivateWindowsApp(System.String,System.String,Ranorex.Duration,System.String)">
            <summary>
            Activates the windows app with the specified app user model ID and arguments.
            </summary>
            <param name="appId">The ID of the app.</param>
            <param name="appFamilyName">The family name of the app.</param>
            <param name="timeout">A timeout specifying how long the app launcher process needs
            to stay open after activation of the app (see remarks).</param>
            <param name="arguments">Arguments passed to the app on activation. Depending on the
            implementation of the app, these arguments may only be available when the app is
            currently not running.</param>
            <remarks>To automate Windows apps a process needs to be elevated, however, Windows apps
            can only be activated from a non-elevated process. Therefore, This methods starts a new
            non-elevated process that activates the Windows app.
            <para>For some applications, the activation process needs to stay alive until the activated
            app is fully loaded. The <paramref name="timeout"/> argument determines how long the
            activation process should stay alive after activating the Windows app.</para></remarks>
        </member>
        <member name="M:Ranorex.Host.RunMobileApp(System.String,System.String)">
            <summary>
            Starts an app on a mobile device. This operation only works for devices that were configured trough
            the Ranorex user interface. This operation also works when the app is running on the device already.
            In that case the running app will be closed and started again to reset it into the initial
            state.
            Only apps that were instrumented by the Ranorex system can be started by Ranorex.
            </summary>
            <param name="deviceDisplayName">
            The name you configured for your device. If no device with that name exists or is not connected
            (that means Ranorex isn't able to communicate with the corresponding device)
            the operation will fail.
            </param>
            <param name="appName">
            The app that shall be started. This has to be the unique application identifier. E.g. for android devices
            such an app identifier looks like 'ranorex.android.DemoGui'.
            </param>
            <exception cref="T:System.ArgumentException">
            If deviceDisplayName or appName is null or empty.
            </exception>
        </member>
        <member name="M:Ranorex.Host.RunMobileApp(System.String,System.String,System.Boolean)">
            <summary>
            Starts an app on a mobile device. This operation only works for devices that were configured trough
            the Ranorex user interface. This operation also works when the app is running on the device already.
            In that case the running app will either be closed and started again to reset it into the initial
            state or only brought to the foreground depending on the 'resetInitialState' parameter.
            Only apps that were instrumented by the Ranorex system can be started by Ranorex.
            </summary>
            <param name="deviceDisplayName">
            The name you configured for your device. If no device with that name exists or is not connected
            (that means Ranorex isn't able to communicate with the corresponding device)
            the operation will fail.
            </param>
            <param name="appName">
            The app that shall be started. This has to be the unique application identifier. E.g. for android devices
            such an app identifier looks like 'ranorex.android.DemoGui'.
            </param>
            <param name="resetInitialState">
            Indicates if the app should be restarted on launch or just brought to the foreground in case the app is
            already running.
            </param>
            <exception cref="T:System.ArgumentException">
            If deviceDisplayName or appName is null or empty.
            </exception>
        </member>
        <member name="M:Ranorex.Host.InstrumentAndDeployAndroidApp(System.String,System.String,System.Boolean,Ranorex.Host.DeploymentModes,Ranorex.Duration)">
            <summary>
            Can be invoked to instrument/deploy an Android app to a configured device.
            </summary>
            <param name="deviceName">The display name of the device on that the app shall be deployed</param>
            <param name="sourceApkFilePath">File path to the android application that shall be instrumented/deployed (*.apk)</param>
            <param name="instrument">
            If set to true Ranorex will instrument the application prior to deployment. If set to false Ranorex assumes the APK file
            is instrumented already. The application will simply be deployed to the device. If this parameter is set to false
            but the *.apk file you try to deploy is not instrumented Ranorex will not be able to communicate with the device correctly.
            </param>
            <param name="deployMode">
            States how the deployment shall be done. Possible modes are NoDeploy, WiFi and USB. If NoDeploy is passed no deployment will be done
            (just instrument the APK file). The instrumented file then can be found in
            [Drive]:\Users\[UserName]\Documents\Ranorex\InstrumentedApk\[APKName]-instrumented.apk.
            When WiFi is selected the apk file will be deployed over your wireless network (RanorexService needs to be installed).
            When USB is selected the app will be deployed over USB cable to your connected device (deployment can be done without installed device service;
            but for automation the service is still required!).
            When Auto is selected the app will be deployed using the mode that was used to add the device.
            </param>
            <param name="timeout">
            After the specified timeout the operation aborts (timeout can happen when no connection can be established, instrumentation fails...).
            Depending on the size of your app, instrumentation and deployment can take quite some time. Instrumentation and deployment on
            low spec PCs can take up to about 10 minutes.
            </param>
        </member>
        <member name="M:Ranorex.Host.InstrumentAndDeployAndroidApp(System.String,System.String,System.Boolean,Ranorex.Host.DeploymentModes,Ranorex.Duration,System.Boolean,System.Boolean)">
            <summary>
            Can be invoked to instrument/deploy an Android app to a configured device.
            </summary>
            <param name="deviceName">The display name of the device on that the app shall be deployed</param>
            <param name="sourceApkFilePath">File path to the android application that shall be instrumented/deployed (*.apk)</param>
            <param name="instrument">
            If set to true Ranorex will instrument the application prior to deployment. If set to false Ranorex assumes the APK file
            is instrumented already. The application will simply be deployed to the device. If this parameter is set to false
            but the *.apk file you try to deploy is not instrumented Ranorex will not be able to communicate with the device correctly.
            </param>
            <param name="deployMode">
            States how the deployment shall be done. Possible modes are NoDeploy, WiFi and USB. If NoDeploy is passed no deployment will be done
            (just instrument the APK file). The instrumented file then can be found in
            [Drive]:\Users\[UserName]\Documents\Ranorex\InstrumentedApk\[APKName]-instrumented.apk.
            When WiFi is selected the apk file will be deployed over your wireless network (RanorexService needs to be installed).
            When Usb is selected the app will be deployed over USB cable to your connected device (deployment can be done without installed device service;
            but for automation the service is still required!).
            When Auto is selected the app will be deployed using the mode that was used to add the device.
            </param>
            <param name="timeout">
            After the specified timeout the operation aborts (timeout can happen when no connection can be established, instrumentation fails...).
            Depending on the size of your app, instrumentation and deployment can take quite some time. Instrumentation and deployment on
            low spec PCs can take up to about 10 minutes.
            </param>
            <param name="fullImageComparison">
            When set to true more robust image comparison is used to determine resource id's for images. This option decreases startup performance.
            (See: https://www.ranorex.com/help/latest/android-testing#AndroidTesting-FICandtreesimplification)
            </param>
            <param name="treeSimplification">
            When set to false no post processing of the UI-Tree takes place. This results in a larger UI-Tree which could be useful for automating 3rd party Android controls.
            (See: https://www.ranorex.com/help/latest/android-testing#AndroidTesting-FICandtreesimplification)
            </param>
        </member>
        <member name="M:Ranorex.Host.InstrumentAndDeployAndroidApp(System.String,System.String,System.Boolean,Ranorex.Host.DeploymentModes,Ranorex.Duration,Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions)">
            <summary>
            Can be invoked to instrument/deploy an Android app to a configured device.
            </summary>
            <param name="deviceName">The display name of the device on that the app shall be deployed</param>
            <param name="sourceApkFilePath">File path to the android application that shall be instrumented/deployed (*.apk)</param>
            <param name="instrument">
            If set to true Ranorex will instrument the application prior to deployment. If set to false Ranorex assumes the APK file
            is instrumented already. The application will simply be deployed to the device. If this parameter is set to false
            but the *.apk file you try to deploy is not instrumented Ranorex will not be able to communicate with the device correctly.
            </param>
            <param name="deployMode">
            States how the deployment shall be done. Possible modes are NoDeploy, WiFi and USB. If NoDeploy is passed no deployment will be done
            (just instrument the APK file). The instrumented file then can be found in
            [Drive]:\Users\[UserName]\Documents\Ranorex\InstrumentedApk\[APKName]-instrumented.apk.
            When WiFi is selected the apk file will be deployed over your wireless network (RanorexService needs to be installed).
            When Usb is selected the app will be deployed over USB cable to your connected device (deployment can be done without installed device service;
            but for automation the service is still required!).
            When Auto is selected the app will be deployed using the mode that was used to add the device.
            </param>
            <param name="timeout">
            Specifies the timeout for each operation in the instrument and deploy process.
            After the specified timeout the operation aborts (timeout can happen when no connection can be established, instrumentation fails...).
            Depending on the size of your app, instrumentation and deployment can take quite some time. Instrumentation and deployment on
            low spec PCs can take up to about 10 minutes.
            </param>
            <param name="options">
            Advanced instrumentation options. <see cref="T:Ranorex.Core.Remoting.RecordItems.InstrumentApkOptions"/> for more information what the specific options are.
            </param>
            <exception cref="T:System.NullReferenceException">
            Will be throw if <paramref name="options"/> is null.
            </exception>
        </member>
        <member name="M:Ranorex.Host.DeployIosApp(System.String,System.String,System.String)">
            <summary>
            Deploys an iOS app archive to the specified device.
            </summary>
            <param name="device">The device name</param>
            <param name="archivePath">Path to the app archive (*.ipa)</param>
            <param name="appId">The application id e.g. (ranorex.RxBrowser)</param>
        </member>
        <member name="M:Ranorex.Host.InstrumentAndDeployIosApp(System.String,System.String,System.String,Ranorex.Core.Remoting.InstrumentIpaOptions)">
            <summary>
            Instrument and deploy an iOS app.
            </summary>
            <param name="device">The device name</param>
            <param name="archivePath">Path to the app archive (*.ipa)</param>
            <param name="appId">The application id e.g. (ranorex.RxBrowser)</param>
            <param name="options">
            Advanced instrumentation options. <see cref="T:Ranorex.Core.Remoting.InstrumentIpaOptions"/> for more information what the specific options are.
            </param>
        </member>
        <member name="M:Ranorex.Host.CloseApplication(System.Int32)">
            <summary>
            Closes an application with the specified process ID by trying to close its main window.
            </summary>
            <param name="processId">The process ID of the application to close.</param>
        </member>
        <member name="M:Ranorex.Host.CloseApplication(System.Int32,Ranorex.Duration)">
            <summary>
            Closes an application with the specified process ID by trying to close its main window.
            </summary>
            <param name="processId">The process ID of the application to close.</param>
            <param name="gracePeriod">A grace period before the process is killed (does not apply to mobile apps).</param>
            <returns>Returns <c>true</c> if the application has closed within the grace period, otherwise <c>false</c>.</returns>
            <remarks>Setting the grace period to zero causes the application's process not to be killed.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="gracePeriod"/> is negative.</exception>
        </member>
        <member name="M:Ranorex.Host.CloseApplication(Ranorex.Core.Element)">
            <summary>
            Closes an application or web page which contains the specified element.
            </summary>
            <param name="containedElement">The element whose parent application to close.</param>
        </member>
        <member name="M:Ranorex.Host.CloseApplication(Ranorex.Core.Element,Ranorex.Duration)">
            <summary>
            Closes an application or web page which contains the specified element.
            If the application does not react to the close request within the specified grace period,
            the application process is killed.
            </summary>
            <param name="containedElement">The element whose parent application to close.</param>
            <param name="gracePeriod">A grace period before the process is killed (does not apply to mobile apps).</param>
            <returns>Returns <c>true</c> if the application has closed within the grace period, otherwise <c>false</c>.</returns>
            <remarks>Setting the grace period to zero causes the application's process not to be killed.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="gracePeriod"/> is negative.</exception>
        </member>
        <member name="M:Ranorex.Host.CloseApplications(System.String)">
            <summary>
            Closes an application with a given process name.
            </summary>
            <param name="processName">The process name of the application to close.</param>
        </member>
        <member name="M:Ranorex.Host.KillApplication(Ranorex.Core.Element)">
            <summary>
            Kills the process which contains the specified element.
            </summary>
            <param name="containedElement">The element whose parent application to kill.</param>
        </member>
        <member name="M:Ranorex.Host.KillApplication(System.Int32)">
            <summary>
            Kills a process which the specified process ID.
            </summary>
            <param name="processId">The ID of the process to kill.</param>
        </member>
        <member name="M:Ranorex.Host.KillApplications(System.String)">
            <summary>
            Kills all applications with the specified process name.
            </summary>
            <param name="processName">The process name of the applications to kill.</param>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String)">
            <summary>
            Opens a web page in the default browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium", "edge" or "edgechromium".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <param name="instrument">Specifies whether the browser should be instrumented before browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium" or "edge".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="clearCodeCache">Specifies whether code cache should be cleared on browser start.</param>
            <param name="clearServiceWorker">Specifies whether Service Worker folder should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie", "chrome", "chromium", "edge" or "edgechromium".</param>
            <param name="browserArgs">Additional command line arguments to pass to the browser.</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <param name="maximized">Specifies whether the started browser instances should be started maximized.</param>
            <param name="clearCache">Specifies whether cache should be cleared on browser start.</param>
            <param name="clearCodeCache">Specifies whether code cache should be cleared on browser start.</param>
            <param name="clearServiceWorker">Specifies whether Service Worker folder should be cleared on browser start.</param>
            <param name="incognitoMode">Specifies whether the browser should start in incognito mode</param>
            <param name="clearCookies">Specifies whether cookies should be deleted on browser start.</param>
            <param name="instrument">Specifies whether the browser should be instrumented before browser start.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.OpenBrowser(System.String,System.String,System.Boolean)">
            <summary>
            Opens a web page in the specified browser.
            </summary>
            <param name="url">The URL of the web page to open.</param>
            <param name="browserName">The name of the browser to open. Can either be "firefox", "ie" or "chrome".</param>
            <param name="killExisting">Specifies whether any running browser instances should be closed first.</param>
            <returns>The process ID of the browser.</returns>
        </member>
        <member name="M:Ranorex.Host.ClearBrowserCache(System.String)">
            <summary>
            Clears the cache of the specified browser.
            </summary>
            <param name="browserName">The name of the browser where the cache should be cleared. Can either be "firefox", "ie" or "chrome".</param>
        </member>
        <member name="M:Ranorex.Host.ClearBrowserCache(System.String,System.String)">
            <summary>
            Clears the cache of the specified browser.
            </summary>
            <param name="browserName">The name of the browser where the cache should be cleared. Can either be "firefox", "ie" or "chrome".</param>
            <param name="userProfile">User profile to clear cache. Only supported for Firefox and Chrome.</param>
        </member>
        <member name="M:Ranorex.Host.ClearBrowserCookies(System.String)">
            <summary>
            Deletes all cookies from specified browser.
            Warning: Stored passwords or other important information will be deleted.
            </summary>
            <param name="browserName">The name of the browser where the cookies should be deleted. Can either be "firefox", "ie" or "chrome".</param>
        </member>
        <member name="M:Ranorex.Host.ClearBrowserCookies(System.String,System.String)">
            <summary>
            Deletes all cookies from specified browser.
            Warning: Stored passwords or other important information will be deleted.
            </summary>
            <param name="browserName">The name of the browser where the cookies should be deleted. Can either be "firefox", "ie" or "chrome".</param>
            <param name="userProfile">User profile to delete cookies. Only supported for Firefox and Chrome.</param>
        </member>
        <member name="M:Ranorex.Host.KillBrowser(System.String)">
            <summary>
            Kills any open browser processes with the given name.
            </summary>
            <param name="browserName">The name of the browser to close. Can either be "firefox", "ie", "chrome" or "edge".</param>
        </member>
        <member name="M:Ranorex.Host.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Host"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Host.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Host"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Host.MachineName">
            <summary>
            The network name of the machine Ranorex is running on.
            </summary>
        </member>
        <member name="P:Ranorex.Host.OSEdition">
            <summary>
            The Windows edition of the machine running Ranorex.
            </summary>
        </member>
        <member name="P:Ranorex.Host.OSVersion">
            <summary>
            The operating system version of the machine running Ranorex.
            </summary>
        </member>
        <member name="P:Ranorex.Host.ProcessArchitecture">
            <summary>
            The bit width architecture used by the current process.
            </summary>
        </member>
        <member name="P:Ranorex.Host.RanorexVersion">
            <summary>
            The version of the Ranorex Framework in use.
            </summary>
        </member>
        <member name="P:Ranorex.Host.RemoteSession">
            <summary>
            True if the current user session is a remote session, i.e. operated via the remote desktop protocol.
            </summary>
        </member>
        <member name="P:Ranorex.Host.RuntimeVersion">
            <summary>
            The version of the .NET Runtime currently running Ranorex.
            </summary>
        </member>
        <member name="P:Ranorex.Host.UserName">
            <summary>
            The login name of the user who is running Ranorex.
            </summary>
        </member>
        <member name="P:Ranorex.Host.VirtualMachineManufacturer">
            <summary>
            The manufacturer of the virtual machine running the operating system.
            </summary>
        </member>
        <member name="P:Ranorex.Host.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Host.op_Implicit(System.String)~Ranorex.Host">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Host.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Host.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Host.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Host.op_Implicit(Ranorex.Core.Element)~Ranorex.Host">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Host.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Host.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Host.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Indicator">
            <summary>
            Represents the indicator part of a slider or scrollbar.
            </summary>
        </member>
        <member name="M:Ranorex.Indicator.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Indicator"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Indicator.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Indicator"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Indicator.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Indicator.op_Implicit(System.String)~Ranorex.Indicator">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Indicator.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Indicator.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Indicator.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Indicator.op_Implicit(Ranorex.Core.Element)~Ranorex.Indicator">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Indicator.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Indicator.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Indicator.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Link">
            <summary>
            Represents a hyperlink.
            </summary>
        </member>
        <member name="M:Ranorex.Link.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Link"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Link.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Link"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Link.Text">
            <summary>
            The text displayed for the link.
            </summary>
        </member>
        <member name="P:Ranorex.Link.Url">
            <summary>
            The target URL the link points to.
            </summary>
        </member>
        <member name="M:Ranorex.Link.Open">
            <summary>
            Follows the hyperlink.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.Link.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Link.op_Implicit(System.String)~Ranorex.Link">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Link.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Link.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Link.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Link.op_Implicit(Ranorex.Core.Element)~Ranorex.Link">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Link.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Link.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Link.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.List">
            <summary>
            Represents a logical list such as a listbox.
            </summary>
        </member>
        <member name="P:Ranorex.List.Items">
            <summary>
            Gets the list items contained in the list.
            </summary>
            <value>The list items.</value>
        </member>
        <member name="P:Ranorex.List.SelectedItems">
            <summary>
            Gets the list of selected items contained in the list.
            </summary>
            <value>The list items.</value>
        </member>
        <member name="P:Ranorex.List.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.ListItem"/> with the specified item label.
            </summary>
            <value>The list item.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If no item with that label is found.</exception>
        </member>
        <member name="M:Ranorex.List.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.List"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.List.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.List"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.List.SelectedItemIndex">
            <summary>
            The index of the currently selected item.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.List.SelectedItemText">
            <summary>
            The text of the currently selected item.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.List.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.List.op_Implicit(System.String)~Ranorex.List">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The List.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.List.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The List.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.List.op_Implicit(Ranorex.Core.Element)~Ranorex.List">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The List.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.List.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The List.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.ListItem">
            <summary>
            Represents an item in a list.
            </summary>
        </member>
        <member name="M:Ranorex.ListItem.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.ListItem"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.ListItem.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.ListItem"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.ListItem.Image">
            <summary>
            The image contained in the item.
            </summary>
        </member>
        <member name="P:Ranorex.ListItem.Index">
            <summary>
            The index of the item in the container list.
            </summary>
        </member>
        <member name="P:Ranorex.ListItem.Selected">
            <summary>
            True if the item is currently selected.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.ListItem.Text">
            <summary>
            The text of the item.
            </summary>
        </member>
        <member name="M:Ranorex.ListItem.Select">
            <summary>
            Selects the item.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.ListItem.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.ListItem.op_Implicit(System.String)~Ranorex.ListItem">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ListItem.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ListItem.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ListItem.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ListItem.op_Implicit(Ranorex.Core.Element)~Ranorex.ListItem">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ListItem.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ListItem.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ListItem.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.MenuBar">
            <summary>
            Represents a menu bar.
            </summary>
        </member>
        <member name="P:Ranorex.MenuBar.Items">
            <summary>
            Gets the menu items contained in the menu bar.
            </summary>
            <value>The menu items.</value>
        </member>
        <member name="P:Ranorex.MenuBar.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.MenuItem"/> with the specified label.
            </summary>
            <value>The menu item.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If no item with that label is found.</exception>
        </member>
        <member name="M:Ranorex.MenuBar.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.MenuBar"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.MenuBar.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.MenuBar"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.MenuBar.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.MenuBar.op_Implicit(System.String)~Ranorex.MenuBar">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The MenuBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.MenuBar.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The MenuBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.MenuBar.op_Implicit(Ranorex.Core.Element)~Ranorex.MenuBar">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The MenuBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.MenuBar.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The MenuBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.MenuItem">
            <summary>
            Represents an entry in a menubar or context menu.
            </summary>
        </member>
        <member name="M:Ranorex.MenuItem.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.MenuItem"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.MenuItem.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.MenuItem"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.MenuItem.Checked">
            <summary>
            True if the menu item is checked.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.MenuItem.Image">
            <summary>
            The image or icon of the menu item.
            </summary>
        </member>
        <member name="P:Ranorex.MenuItem.Text">
            <summary>
            The text of the menu item.
            </summary>
        </member>
        <member name="M:Ranorex.MenuItem.Select">
            <summary>
            Selects the menu item.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.MenuItem.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.MenuItem.op_Implicit(System.String)~Ranorex.MenuItem">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The MenuItem.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.MenuItem.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The MenuItem.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.MenuItem.op_Implicit(Ranorex.Core.Element)~Ranorex.MenuItem">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The MenuItem.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.MenuItem.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The MenuItem.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Picture">
            <summary>
            Represents a picture, icon, image or diagram.
            </summary>
        </member>
        <member name="M:Ranorex.Picture.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Picture"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Picture.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Picture"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Picture.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Picture.op_Implicit(System.String)~Ranorex.Picture">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Picture.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Picture.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Picture.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Picture.op_Implicit(Ranorex.Core.Element)~Ranorex.Picture">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Picture.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Picture.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Picture.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.ProgressBar">
            <summary>
            Represents a progress bar.
            </summary>
        </member>
        <member name="M:Ranorex.ProgressBar.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.ProgressBar"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.ProgressBar.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.ProgressBar"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.ProgressBar.MaxValue">
            <summary>
            The maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Ranorex.ProgressBar.MinValue">
            <summary>
            The minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Ranorex.ProgressBar.Value">
            <summary>
            The value of the progress bar.
            </summary>
        </member>
        <member name="P:Ranorex.ProgressBar.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.ProgressBar.op_Implicit(System.String)~Ranorex.ProgressBar">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ProgressBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ProgressBar.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ProgressBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ProgressBar.op_Implicit(Ranorex.Core.Element)~Ranorex.ProgressBar">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ProgressBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ProgressBar.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ProgressBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.RadioButton">
            <summary>
            Represents a radio button which enables the user to select a single option from a group of choices.
            </summary>
        </member>
        <member name="M:Ranorex.RadioButton.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.RadioButton"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.RadioButton.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.RadioButton"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.RadioButton.Checked">
            <summary>
            True if the radio button is currently selected.
            </summary>
        </member>
        <member name="P:Ranorex.RadioButton.Text">
            <summary>
            The text associated with the radio button.
            </summary>
        </member>
        <member name="M:Ranorex.RadioButton.Select">
            <summary>
            Selects the radio button.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.RadioButton.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.RadioButton.op_Implicit(System.String)~Ranorex.RadioButton">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The RadioButton.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.RadioButton.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The RadioButton.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.RadioButton.op_Implicit(Ranorex.Core.Element)~Ranorex.RadioButton">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The RadioButton.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.RadioButton.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The RadioButton.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Row">
            <summary>
            Represents a table row.
            </summary>
        </member>
        <member name="P:Ranorex.Row.Cells">
            <summary>
            Gets the cells contained in the row.
            </summary>
            <value>The cells in the row.</value>
        </member>
        <member name="M:Ranorex.Row.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Row"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Row.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Row"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Row.Index">
            <summary>
            The index of the row in the table.
            </summary>
        </member>
        <member name="P:Ranorex.Row.Selected">
            <summary>
            True if the row is currently selected.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="M:Ranorex.Row.Select">
            <summary>
            Selects the entire row.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.Row.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Row.op_Implicit(System.String)~Ranorex.Row">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Row.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Row.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Row.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Row.op_Implicit(Ranorex.Core.Element)~Ranorex.Row">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Row.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Row.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Row.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.ScrollBar">
            <summary>
            Represents a vertical or horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Ranorex.ScrollBar.PageUp">
            <summary>
            Gets the page-up button portion of this scrollbar.
            </summary>
            <value>The page up button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.PageDown">
            <summary>
            Gets the page-down button portion of this scrollbar.
            </summary>
            <value>The page-down button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.Up">
            <summary>
            Gets the up button portion of this scrollbar.
            </summary>
            <value>The page up button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.Down">
            <summary>
            Gets the down button portion of this scrollbar.
            </summary>
            <value>The page up button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.PageLeft">
            <summary>
            Gets the left button portion of this scrollbar.
            </summary>
            <value>The left button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.Left">
            <summary>
            Gets the page-left button portion of this scrollbar.
            </summary>
            <value>The page-left button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.Right">
            <summary>
            Gets the right button portion of this scrollbar.
            </summary>
            <value>The right button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.PageRight">
            <summary>
            Gets the page-right button portion of this scrollbar.
            </summary>
            <value>The page right button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.Thumb">
            <summary>
            Gets the thumb indicator portion of the scrollbar.
            </summary>
            <value>The thumb.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="M:Ranorex.ScrollBar.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.ScrollBar"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.ScrollBar.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.ScrollBar"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.MaxValue">
            <summary>
            The maximum scroll value of the scrollbar.
            </summary>
        </member>
        <member name="P:Ranorex.ScrollBar.MinValue">
            <summary>
            The minimum scroll value of the scrollbar.
            </summary>
        </member>
        <member name="P:Ranorex.ScrollBar.PageSize">
            <summary>
            The size of the thumb, which represents the page size.
            </summary>
        </member>
        <member name="P:Ranorex.ScrollBar.Style">
            <summary>
            The scroll bar style (horizontal, vertical or custom).
            </summary>
        </member>
        <member name="P:Ranorex.ScrollBar.Value">
            <summary>
            The current scroll value of the scrollbar.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.ScrollBar.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.ScrollBar.op_Implicit(System.String)~Ranorex.ScrollBar">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ScrollBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ScrollBar.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ScrollBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ScrollBar.op_Implicit(Ranorex.Core.Element)~Ranorex.ScrollBar">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ScrollBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ScrollBar.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ScrollBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Separator">
            <summary>
            Represents a separator used for menus and toolbars.
            </summary>
        </member>
        <member name="M:Ranorex.Separator.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Separator"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Separator.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Separator"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Separator.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Separator.op_Implicit(System.String)~Ranorex.Separator">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Separator.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Separator.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Separator.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Separator.op_Implicit(Ranorex.Core.Element)~Ranorex.Separator">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Separator.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Separator.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Separator.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Slider">
            <summary>
            Represents a slider or trackbar control.
            </summary>
        </member>
        <member name="M:Ranorex.Slider.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Slider"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Slider.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Slider"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Slider.MaxValue">
            <summary>
            The maximum value of the slider.
            </summary>
        </member>
        <member name="P:Ranorex.Slider.MinValue">
            <summary>
            The minimum value of the slider.
            </summary>
        </member>
        <member name="P:Ranorex.Slider.Value">
            <summary>
            The current value of the slider.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.Slider.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Slider.op_Implicit(System.String)~Ranorex.Slider">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Slider.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Slider.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Slider.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Slider.op_Implicit(Ranorex.Core.Element)~Ranorex.Slider">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Slider.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Slider.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Slider.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.StatusBar">
            <summary>
            Represents a status bar usually located at the bottom of a form.
            </summary>
        </member>
        <member name="M:Ranorex.StatusBar.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.StatusBar"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.StatusBar.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.StatusBar"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.StatusBar.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.StatusBar.op_Implicit(System.String)~Ranorex.StatusBar">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The StatusBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.StatusBar.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The StatusBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.StatusBar.op_Implicit(Ranorex.Core.Element)~Ranorex.StatusBar">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The StatusBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.StatusBar.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The StatusBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Table">
            <summary>
            Represents a table or grid, consisting of rows and columns.
            </summary>
        </member>
        <member name="P:Ranorex.Table.Rows">
            <summary>
            Gets all rows in the table.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Ranorex.Table.SelectedRows">
            <summary>
            Gets all selected rows in the table.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Ranorex.Table.Columns">
            <summary>
            Gets all columns in the table.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Ranorex.Table.SelectedColumns">
            <summary>
            Gets all selected columns in the table.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="M:Ranorex.Table.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Table"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Table.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Table"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Table.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Table.op_Implicit(System.String)~Ranorex.Table">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Table.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Table.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Table.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Table.op_Implicit(Ranorex.Core.Element)~Ranorex.Table">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Table.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Table.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Table.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.TabPage">
            <summary>
            Represents a tab page in a tab page list.
            </summary>
        </member>
        <member name="M:Ranorex.TabPage.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.TabPage"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.TabPage.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.TabPage"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.TabPage.Image">
            <summary>
            The icon of the tab page.
            </summary>
        </member>
        <member name="P:Ranorex.TabPage.Index">
            <summary>
            The index of the tab page in the tabpage list.
            </summary>
        </member>
        <member name="P:Ranorex.TabPage.Selected">
            <summary>
            True if the tab page is currently active.
            </summary>
        </member>
        <member name="P:Ranorex.TabPage.Title">
            <summary>
            The title of the tab page.
            </summary>
        </member>
        <member name="M:Ranorex.TabPage.Select">
            <summary>
            Activates the tab page.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.TabPage.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.TabPage.op_Implicit(System.String)~Ranorex.TabPage">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TabPage.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TabPage.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TabPage.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TabPage.op_Implicit(Ranorex.Core.Element)~Ranorex.TabPage">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TabPage.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TabPage.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TabPage.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.TabPageList">
            <summary>
            Represents a tab page list.
            </summary>
        </member>
        <member name="P:Ranorex.TabPageList.Tabs">
            <summary>
            Gets the tab pages contained in the <see cref="T:Ranorex.TabPageList"/>.
            </summary>
            <value>The tab pages.</value>
        </member>
        <member name="P:Ranorex.TabPageList.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.TabPage"/> with the specified title.
            </summary>
            <value>The tab page.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If no tab page with that title is found.</exception>
        </member>
        <member name="M:Ranorex.TabPageList.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.TabPageList"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.TabPageList.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.TabPageList"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.TabPageList.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.TabPageList.op_Implicit(System.String)~Ranorex.TabPageList">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TabPageList.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TabPageList.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TabPageList.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TabPageList.op_Implicit(Ranorex.Core.Element)~Ranorex.TabPageList">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TabPageList.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TabPageList.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TabPageList.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Text">
            <summary>
            Represents an edit box, a text area, or static text.
            </summary>
        </member>
        <member name="M:Ranorex.Text.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Text"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Text.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Text"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Text.Caption">
            <summary>
            The caption, if the text is not editable.
            </summary>
        </member>
        <member name="P:Ranorex.Text.SelectionLength">
            <summary>
            The length of the selected text.
            </summary>
        </member>
        <member name="P:Ranorex.Text.SelectionStart">
            <summary>
            The start index of the selected text.
            </summary>
        </member>
        <member name="P:Ranorex.Text.SelectionText">
            <summary>
            The selected text portion.
            </summary>
        </member>
        <member name="P:Ranorex.Text.TextValue">
            <summary>
            The text content.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="M:Ranorex.Text.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified text range.
            </summary>
            <param name="start">The start index of the range to select.</param>
            <param name="length">The length of the range to select.</param>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.Text.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Text.op_Implicit(System.String)~Ranorex.Text">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Text.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Text.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Text.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Text.op_Implicit(Ranorex.Core.Element)~Ranorex.Text">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Text.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Text.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Text.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.TitleBar">
            <summary>
            Represents the title bar of a form or dialog window.
            </summary>
        </member>
        <member name="M:Ranorex.TitleBar.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.TitleBar"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.TitleBar.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.TitleBar"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.TitleBar.Text">
            <summary>
            The title bar text.
            </summary>
        </member>
        <member name="P:Ranorex.TitleBar.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.TitleBar.op_Implicit(System.String)~Ranorex.TitleBar">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TitleBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TitleBar.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TitleBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TitleBar.op_Implicit(Ranorex.Core.Element)~Ranorex.TitleBar">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TitleBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TitleBar.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TitleBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.ToolBar">
            <summary>
            Represents a tool bar.
            </summary>
        </member>
        <member name="P:Ranorex.ToolBar.Buttons">
            <summary>
            Gets the buttons contained in the toolbar.
            </summary>
            <value>The buttons.</value>
        </member>
        <member name="P:Ranorex.ToolBar.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.Button"/> with the specified label.
            </summary>
            <value>The toolbar button.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="M:Ranorex.ToolBar.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.ToolBar"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.ToolBar.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.ToolBar"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.ToolBar.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.ToolBar.op_Implicit(System.String)~Ranorex.ToolBar">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ToolBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ToolBar.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ToolBar.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ToolBar.op_Implicit(Ranorex.Core.Element)~Ranorex.ToolBar">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ToolBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ToolBar.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ToolBar.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.ToolTip">
            <summary>
            Represents tooltip popup.
            </summary>
        </member>
        <member name="P:Ranorex.ToolTip.Current">
            <summary>
            Gets the currently active tooltip.
            </summary>
            <value>The currently visible tooltip.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If the element is not found.</exception>
        </member>
        <member name="M:Ranorex.ToolTip.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.ToolTip"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.ToolTip.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.ToolTip"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.ToolTip.Text">
            <summary>
            The text of the tooltip.
            </summary>
        </member>
        <member name="P:Ranorex.ToolTip.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.ToolTip.op_Implicit(System.String)~Ranorex.ToolTip">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ToolTip.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ToolTip.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The ToolTip.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ToolTip.op_Implicit(Ranorex.Core.Element)~Ranorex.ToolTip">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ToolTip.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.ToolTip.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The ToolTip.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Tree">
            <summary>
            Represents a tree control.
            </summary>
        </member>
        <member name="P:Ranorex.Tree.Items">
            <summary>
            Gets the tree items which are immediate children of the tree.
            </summary>
            <value>The tree items.</value>
        </member>
        <member name="P:Ranorex.Tree.SelectedItems">
            <summary>
            Gets the selected tree items which are immediate children of the tree.
            </summary>
            <value>The tree items.</value>
        </member>
        <member name="P:Ranorex.Tree.DescendantItems">
            <summary>
            Gets all tree items contained in this subtree as a list.
            </summary>
            <value>The descendant tree items.</value>
        </member>
        <member name="P:Ranorex.Tree.SelectedDescendantItems">
            <summary>
            Gets all selected tree items contained in this subtree as a list.
            </summary>
            <value>The selected descendant tree items.</value>
        </member>
        <member name="P:Ranorex.Tree.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.TreeItem"/> with the specified item label.
            </summary>
            <value>The list item.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If no item with that label is found.</exception>
        </member>
        <member name="M:Ranorex.Tree.ExpandAll">
            <summary>
            Expands all nodes in the tree.
            </summary>
        </member>
        <member name="M:Ranorex.Tree.CollapseAll">
            <summary>
            Collapses all nodes in the tree.
            </summary>
        </member>
        <member name="M:Ranorex.Tree.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Tree"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Tree.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Tree"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Tree.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Tree.op_Implicit(System.String)~Ranorex.Tree">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Tree.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Tree.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Tree.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Tree.op_Implicit(Ranorex.Core.Element)~Ranorex.Tree">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Tree.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Tree.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Tree.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.TreeItem">
            <summary>
            Represents an item in a tree.
            </summary>
        </member>
        <member name="P:Ranorex.TreeItem.Items">
            <summary>
            Gets the tree items which are immediate children of this tree item.
            </summary>
            <value>The tree items.</value>
        </member>
        <member name="P:Ranorex.TreeItem.SelectedItems">
            <summary>
            Gets the selected tree items which are immediate children of this tree item.
            </summary>
            <value>The tree items.</value>
        </member>
        <member name="P:Ranorex.TreeItem.DescendantItems">
            <summary>
            Gets all tree items contained in this subtree as a list.
            </summary>
            <value>The descendant tree items.</value>
        </member>
        <member name="P:Ranorex.TreeItem.SelectedDescendantItems">
            <summary>
            Gets all selected tree items contained in this subtree as a list.
            </summary>
            <value>The selected descendant tree items.</value>
        </member>
        <member name="P:Ranorex.TreeItem.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ranorex.TreeItem"/> with the specified item label.
            </summary>
            <value>The list item.</value>
            <exception cref="T:Ranorex.ElementNotFoundException">If no item with that label is found.</exception>
        </member>
        <member name="M:Ranorex.TreeItem.Expand">
            <summary>
            Expands the tree item, making its children visible.
            </summary>
        </member>
        <member name="M:Ranorex.TreeItem.ExpandAll">
            <summary>
            Expands the tree item and all its children, recursively.
            </summary>
        </member>
        <member name="M:Ranorex.TreeItem.Collapse">
            <summary>
            Collapses the tree item, hiding its children.
            </summary>
        </member>
        <member name="M:Ranorex.TreeItem.CollapseAll">
            <summary>
            Collapses the tree item and all its children, recursively.
            </summary>
        </member>
        <member name="M:Ranorex.TreeItem.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.TreeItem"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.TreeItem.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.TreeItem"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.TreeItem.Checked">
            <summary>
            True if the tree item is checked.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.TreeItem.Expanded">
            <summary>
            True if the tree item is expanded.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.TreeItem.Image">
            <summary>
            The image or icon associated with the tree item.
            </summary>
        </member>
        <member name="P:Ranorex.TreeItem.Selected">
            <summary>
            True if the tree item is selected.
            </summary>
            <exception cref="T:Ranorex.SetAttributeFailedException">Thrown if setting the attribute value failed.</exception>
        </member>
        <member name="P:Ranorex.TreeItem.Text">
            <summary>
            The text of the tree item.
            </summary>
        </member>
        <member name="M:Ranorex.TreeItem.Select">
            <summary>
            Selects the item.
            </summary>
            <exception cref="T:Ranorex.ActionFailedException">Thrown if invoking the action failed.</exception>
        </member>
        <member name="P:Ranorex.TreeItem.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.TreeItem.op_Implicit(System.String)~Ranorex.TreeItem">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TreeItem.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TreeItem.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The TreeItem.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TreeItem.op_Implicit(Ranorex.Core.Element)~Ranorex.TreeItem">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TreeItem.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.TreeItem.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The TreeItem.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Unknown">
            <summary>
            Represents a UI element which cannot be further categorized.
            </summary>
        </member>
        <member name="M:Ranorex.Unknown.#ctor">
            <summary>
            Creates a new <see cref="T:Ranorex.Unknown"/> adapter instance. This constructor is used
            internally by the Ranorex Core Framework for performance issues!
            </summary>
        </member>
        <member name="M:Ranorex.Unknown.#ctor(Ranorex.Core.Element)">
            <summary>
            Creates a new <see cref="T:Ranorex.Unknown"/> adapter instance.
            </summary>
            <param name="element">The element to create the adapter for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="P:Ranorex.Unknown.RequiredCapabilities">
            <summary>
            Capabilities required by the adapter implementation.
            </summary>
        </member>
        <member name="M:Ranorex.Unknown.op_Implicit(System.String)~Ranorex.Unknown">
            <summary>
            Implicitly converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Unknown.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Unknown.FromPath(System.String)">
            <summary>
            Converts a string to an instance of this class by searching the root.
            </summary>
            <param name="path">The search path.</param>
            <returns>The Unknown.</returns>
            <remarks>The <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> is used to search for the specified path.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.RxPathException">If the specified <paramref name="path"/> is not valid.</exception>
            <exception cref="T:Ranorex.ElementNotFoundException">If no element is found.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Unknown.op_Implicit(Ranorex.Core.Element)~Ranorex.Unknown">
            <summary>
            Implicitly converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Unknown.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="M:Ranorex.Unknown.FromElement(Ranorex.Core.Element)">
            <summary>
            Converts an <see cref="T:Ranorex.Core.Element"/> to an instance of this class.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The Unknown.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.CapabilityNotSupportedException">If the element does not support the
            capabilities required by this adapter.</exception>
        </member>
        <member name="T:Ranorex.Controls.ProgressForm">
            <summary>
            Allows basic visual control of progress dialog running during test execution.
            /// </summary>
        </member>
        <member name="M:Ranorex.Controls.ProgressForm.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the boundaries for test progress dialog.
            </summary>
            <param name="x">New position X on the screen of the progress dialog.</param>
            <param name="y">New position Y on the screen of the progress dialog.</param>
            <param name="width">New width of the progress dialog.</param>
            <param name="height">New height of the progress dialog.</param>
        </member>
        <member name="M:Ranorex.Controls.ProgressForm.SetOpacity(System.Int32)">
            <summary>
            Sets the opacity of the progress dialog to the specified value.
            </summary>
            <param name="percent">A value between 0 (completely transparent) and 100 (completely opaque).</param>
            <remarks>This is safe to call from any thread.</remarks>
        </member>
        <member name="M:Ranorex.Controls.ProgressForm.Show">
            <summary>
            Shows currently running progress dialog. If the dialog is already visible, this call does nothing.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.ProgressForm.Hide">
            <summary>
            Hides currently running progress dialog.
            </summary>
        </member>
        <member name="T:Ranorex.Controls.TrialActivationDialog">
            <summary>
            Provides a window for activation of trial period.
            </summary>
        </member>
        <member name="F:Ranorex.Controls.TrialActivationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.TrialActivationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ranorex.Controls.TrialActivationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Ranorex.Controls.DataConnectorConfig.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.DataConnectorConfig.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ranorex.Controls.DataConnectorConfig.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Ranorex.Controls.DropDownControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.DropDownControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ranorex.Controls.DropDownControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ranorex.Controls.DataConnectorConfigWrapper">
            <summary>
            Wrapper for the data cache and DataConnectorConfig.
            The DataCache and be accesses without a config control instance. The DataConnectorConfig is lazy created on the first call to ConfigControl.
            If the config control instance is created the DataCache is accessed through the config control.
            Disposing the wrapper disposes the config control and/or data cache.
            </summary>
        </member>
        <member name="F:Ranorex.Controls.AboutBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.AboutBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ranorex.Controls.AboutBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ranorex.Controls.DataConnectorConfigFactory">
            <summary>
            Factory responsible for creating a DataConnectorConfig for a given DataConnector.
            You need to register custom DataConnectors here, so that the DataConnectorConfig
            can be created.
            </summary>
        </member>
        <member name="T:Ranorex.Controls.DataConnectorConfigFactory.CreateDataConnectorConfigDelegate">
            <summary>
            A delegate which creates a UI to configure the DataConnectorConfig. For example () => new SqlConnectorConfig()
            </summary>
            <returns>A UserControl to configure the DataConnector</returns>
        </member>
        <member name="T:Ranorex.Controls.DataConnectorConfigFactory.GetTypeNameDelegate">
            <summary>
            A delegate which generates the typename on demand. For example () => typeof(SqlDataConnector).Name
            </summary>
            <returns>Returns the typename</returns>
        </member>
        <member name="P:Ranorex.Controls.DataConnectorConfigFactory.RegisteredDataSourceConfigNames">
            <summary>
            List all the previously registered DataSourceConfigs by name.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.DataConnectorConfigFactory.RegisterNameForConfig(System.String,Ranorex.Controls.DataConnectorConfigFactory.CreateDataConnectorConfigDelegate,Ranorex.Controls.DataConnectorConfigFactory.GetTypeNameDelegate)">
            <summary>
            Registers a datasource
            </summary>
            <param name="dataSourceName"></param> The unique name under which you would like to register the dataSource.
            <param name="del"></param> A delegate creating a DataConnectorConfig for the given dataSource.
            <param name="tn"></param> A delegate returning the name of the type for which the DataConnectorConfig is created.
        </member>
        <member name="M:Ranorex.Controls.DataConnectorConfigFactory.CreateDataConnectorConfig(System.String)">
            <summary>
            Creates a previously registered DataConnectorConfig
            </summary>
            <param name="dataSourceName"></param> The unique name for the dataSource you previously registered.
            <returns>A freshly created DataConnectorConfig</returns>
        </member>
        <member name="M:Ranorex.Controls.DataConnectorConfigFactory.CreateDataConnectorTypeName(System.String)">
            <summary>
            Creates a new string which is the TypeName previously registered for the dataSourceName
            </summary>
            <param name="dataSourceName"></param>
            <returns>The TypeName for the dataSourceName</returns>
        </member>
        <member name="T:Ranorex.Controls.DontShowAgainDialog">
            <summary>
            A dialog containing a "Do not show again" checkbox. If checked on close, subsequent calls to
            the <see cref="M:Ranorex.Controls.DontShowAgainDialog.ShowUnlessIgnored(System.Windows.Forms.IWin32Window)"/> and <see cref="M:Ranorex.Controls.DontShowAgainDialog.ShowDialogUnlessIgnored(System.Windows.Forms.IWin32Window)"/> methods
            do not show the form but immediately return.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.#ctor">
            <summary>
            Initializes a new instance of the form.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the form.
            </summary>
            <param name="identifier">The identifier of the form used to decide whether the
            dialog is ignored.</param>
        </member>
        <member name="P:Ranorex.Controls.DontShowAgainDialog.Identifier">
            <summary>
            Gets or sets the identifier used to decide whether the dialog is shown or ignored.
            </summary>
            <value>
            An identifier for the dialog.
            </value>
            <remarks>If no identifier is set, the type name of the form/dialog is used.</remarks>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.IsIgnored">
            <summary>
            Determines whether this dialog instance is already ignored.
            </summary>
            <returns><c>True</c> if the dialog is already ignored; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.ShowUnlessIgnored(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form unless it has formerly been ignored by checking the "Do not show again" checkbox.
            </summary>
            <param name="owner">The owner of the form.</param>
            <remarks>If the dialog has formerly been ignored, a call to this method returns immediately.
            Otherwise this method internally calls the <see cref="M:System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window)"/> method.</remarks>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.ShowOnce(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form only once (no "Do not show again" checkbox shown).
            </summary>
            <param name="owner">The owner of the form.</param>
            <remarks>This method internally checks and hides the "Do not show again" checkbox and
            then calls <see cref="M:Ranorex.Controls.DontShowAgainDialog.ShowUnlessIgnored(System.Windows.Forms.IWin32Window)"/>.</remarks>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.ShowDialogUnlessIgnored(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form as a dialog unless it has formerly been ignored by checking the "Do not show again" checkbox.
            </summary>
            <param name="owner">The owner of the form.</param>
            <returns><see cref="F:System.Windows.Forms.DialogResult.None"/> if the dialog has formerly been ignored; otherwise,
            the result of the <see cref="M:System.Windows.Forms.Form.ShowDialog(System.Windows.Forms.IWin32Window)"/> call.</returns>
            <remarks>If the dialog has formerly been ignored, a call to this method returns immediately.
            Otherwise this method internally calls the <see cref="M:System.Windows.Forms.Form.ShowDialog(System.Windows.Forms.IWin32Window)"/> method.</remarks>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.ShowDialogOnce(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form as a dialog only once (no "Do not show again" checkbox shown).
            </summary>
            <param name="owner">The owner of the form.</param>
            <returns>The value returned by the internally called <see cref="M:Ranorex.Controls.DontShowAgainDialog.ShowDialogUnlessIgnored(System.Windows.Forms.IWin32Window)"/> method.</returns>
            <remarks>This method internally checks and hides the "Do not show again" checkbox and
            then calls <see cref="M:Ranorex.Controls.DontShowAgainDialog.ShowDialogUnlessIgnored(System.Windows.Forms.IWin32Window)"/>.</remarks>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.GetIdentifier">
            <summary>
            Gets the identifier of the form.
            </summary>
            <returns>The <see cref="P:Ranorex.Controls.DontShowAgainDialog.Identifier"/> set or the full name of the form type if the <see cref="P:Ranorex.Controls.DontShowAgainDialog.Identifier"/>
            has not been set.</returns>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.OnClosed(System.EventArgs)">
            <summary>
            Stores the state of the "Do not show again" checkbox to the local settings.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="F:Ranorex.Controls.DontShowAgainDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ranorex.Controls.DontShowAgainDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ranorex.RanorexException">
            <summary>
            The base class for all Ranorex-specific exceptions.
            </summary>
        </member>
        <member name="M:Ranorex.RanorexException.#ctor">
            <summary>
            Creates a new Ranorex exception.
            </summary>
        </member>
        <member name="M:Ranorex.RanorexException.#ctor(System.String)">
            <summary>
            Creates a new Ranorex exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.RanorexException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new Ranorex exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.RanorexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RanorexException"/> class.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="P:Ranorex.RanorexException.MetaInfos">
            <summary>
            Gets or sets a dictionary containing report meta infos for this exception.
            </summary>
            <value>A dictionary containing meta infos for this exception.</value>
        </member>
        <member name="M:Ranorex.RanorexException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Ranorex.RanorexException.GetReportMetadata">
            <summary>
            Gets the report metadata.
            </summary>
            <returns>The report meta data of this instance or <c>null</c> if no
            meta data has been set for this instance.</returns>
        </member>
        <member name="M:Ranorex.RanorexException.SetMetaInfos(Ranorex.Core.IReportMetadata)">
            <summary>
            Sets the report meta data for this exception instance.
            </summary>
            <param name="reportMetadata">The report metadata.</param>
        </member>
        <member name="T:Ranorex.RxPathException">
            <summary>
            Exception that is thrown when constructing an <see cref="T:Ranorex.Core.RxPath"/> instance fails.
            </summary>
        </member>
        <member name="M:Ranorex.RxPathException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.RxPathException.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.RxPathException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.RxPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="T:Ranorex.ValidationException">
            <summary>
            Exception that is thrown if validation using the <see cref="T:Ranorex.Validate"/> class fails.
            </summary>
        </member>
        <member name="M:Ranorex.ValidationException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.ValidationException.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="T:Ranorex.ImageValidationException">
            <summary>
            Exception that is thrown when an image is not found in a search method.
            </summary>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="image">The image which was searched in.</param>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="image">The image in which the <paramref name="feature"/> was searched.</param>
            <param name="feature">The feature that was searched for.</param>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor(System.String,System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image which was searched in.</param>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor(System.String,System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image in which the <paramref name="feature"/> was searched.</param>
            <param name="feature">The feature that was searched for.</param>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor(System.String,System.Drawing.Bitmap,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image which was searched in.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor(System.String,System.Drawing.Bitmap,System.Drawing.Bitmap,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image in which the <paramref name="feature"/> was searched.</param>
            <param name="feature">The feature that was searched for.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ImageValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="P:Ranorex.ImageValidationException.Image">
            <summary>
            Gets the image in which the <see cref="P:Ranorex.ImageValidationException.Feature"/> was searched.
            </summary>
        </member>
        <member name="P:Ranorex.ImageValidationException.Feature">
            <summary>
            Gets the feature that was searched for.
            </summary>
        </member>
        <member name="M:Ranorex.ImageValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="T:Ranorex.ElementNotFoundException">
            <summary>
            Exception that is thrown when a specific element is not found in a search method.
            </summary>
        </member>
        <member name="M:Ranorex.ElementNotFoundException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.ElementNotFoundException.#ctor(Ranorex.Core.RxPath)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="path">The path that causes this exception.</param>
        </member>
        <member name="M:Ranorex.ElementNotFoundException.#ctor(System.String,Ranorex.Core.RxPath)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="path">The path that causes this exception.</param>
        </member>
        <member name="M:Ranorex.ElementNotFoundException.#ctor(System.String,Ranorex.Core.RxPath,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="path">The path that causes this exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="P:Ranorex.ElementNotFoundException.Path">
            <summary>
            Gets the path that caused this exception.
            </summary>
        </member>
        <member name="M:Ranorex.ElementNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Ranorex.ElementNotFoundException.SetMetaInfos(Ranorex.Core.IReportMetadata)">
            <inheritdoc/>
        </member>
        <member name="T:Ranorex.CapabilityNotSupportedException">
            <summary>
            Exception that is thrown when an element does not provide a required capability.
            </summary>
        </member>
        <member name="M:Ranorex.CapabilityNotSupportedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.CapabilityNotSupportedException.#ctor(System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="capabilityName">The name of the unsupported capability.</param>
            <param name="element">The element that does not support the capability.</param>
        </member>
        <member name="M:Ranorex.CapabilityNotSupportedException.#ctor(System.String,System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="capabilityName">The name of the unsupported capability.</param>
            <param name="element">The element that does not support the capability.</param>
        </member>
        <member name="M:Ranorex.CapabilityNotSupportedException.#ctor(System.String,System.String,Ranorex.Core.Element,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="capabilityName">The name of the unsupported capability.</param>
            <param name="element">The element that does not support the capability.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.CapabilityNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="P:Ranorex.CapabilityNotSupportedException.CapabilityName">
            <summary>
            The name of the capability that is unsupported.
            </summary>
        </member>
        <member name="P:Ranorex.CapabilityNotSupportedException.Element">
            <summary>
            The element that does not support the capability.
            </summary>
        </member>
        <member name="M:Ranorex.CapabilityNotSupportedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="T:Ranorex.OperationFailedException">
            <summary>
            Exception that is thrown when executing an operation on an <see cref="P:Ranorex.OperationFailedException.Element"/> failed.
            </summary>
        </member>
        <member name="M:Ranorex.OperationFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.OperationFailedException.#ctor(System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="element">The element for which the operation failed.</param>
        </member>
        <member name="M:Ranorex.OperationFailedException.#ctor(System.String,System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="name">The name of the operation.</param>
            <param name="element">The element for which the operation failed.</param>
        </member>
        <member name="M:Ranorex.OperationFailedException.#ctor(System.String,System.String,Ranorex.Core.Element,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="name">The name of the operation.</param>
            <param name="element">The element for which the operation failed.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.OperationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="P:Ranorex.OperationFailedException.Element">
            <summary>
            Gets the element for which the operation failed.
            </summary>
        </member>
        <member name="P:Ranorex.OperationFailedException.Name">
            <summary>
            Gets the name of the operation that failed.
            </summary>
        </member>
        <member name="M:Ranorex.OperationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="T:Ranorex.ActionFailedException">
            <summary>
            Exception that is thrown when executing an action on an <see cref="T:Ranorex.Core.Element"/> failed
            (see <see cref="M:Ranorex.Core.Element.InvokeAction(System.String,System.Object[])"/>).
            </summary>
        </member>
        <member name="M:Ranorex.ActionFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.ActionFailedException.#ctor(System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">The name of the action.</param>
            <param name="element">The element for which the action failed.</param>
        </member>
        <member name="M:Ranorex.ActionFailedException.#ctor(System.String,System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="name">The name of the action.</param>
            <param name="element">The element for which the action failed.</param>
        </member>
        <member name="M:Ranorex.ActionFailedException.#ctor(System.String,System.String,Ranorex.Core.Element,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="name">The name of the action.</param>
            <param name="element">The element for which the action failed.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ActionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="T:Ranorex.SetAttributeFailedException">
            <summary>
            Exception that is thrown when setting an attribute on an <see cref="T:Ranorex.Core.Element"/> failed
            (see <see cref="M:Ranorex.Core.Element.SetAttributeValue(System.String,System.Object)"/>).
            </summary>
        </member>
        <member name="M:Ranorex.SetAttributeFailedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.SetAttributeFailedException.#ctor(System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="element">The element for which setting the attribute failed.</param>
        </member>
        <member name="M:Ranorex.SetAttributeFailedException.#ctor(System.String,System.String,Ranorex.Core.Element)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="name">The name of the attribute.</param>
            <param name="element">The element for which setting the attribute failed.</param>
        </member>
        <member name="M:Ranorex.SetAttributeFailedException.#ctor(System.String,System.String,Ranorex.Core.Element,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="name">The name of the attribute.</param>
            <param name="element">The element for which setting the attribute failed.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.SetAttributeFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="T:Ranorex.ImageNotFoundException">
            <summary>
            Exception that is thrown when an image is not found in a search method.
            </summary>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="image">The image which was searched in.</param>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="image">The image in which the <paramref name="feature"/> was searched.</param>
            <param name="feature">The feature that was searched for.</param>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor(System.String,System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image which was searched in.</param>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor(System.String,System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image in which the <paramref name="feature"/> was searched.</param>
            <param name="feature">The feature that was searched for.</param>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor(System.String,System.Drawing.Bitmap,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image which was searched in.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor(System.String,System.Drawing.Bitmap,System.Drawing.Bitmap,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="image">The image in which the <paramref name="feature"/> was searched.</param>
            <param name="feature">The feature that was searched for.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="P:Ranorex.ImageNotFoundException.Image">
            <summary>
            Gets the image in which the <see cref="P:Ranorex.ImageNotFoundException.Feature"/> was searched.
            </summary>
        </member>
        <member name="P:Ranorex.ImageNotFoundException.Feature">
            <summary>
            Gets the feature that was searched for.
            </summary>
        </member>
        <member name="M:Ranorex.ImageNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object
            data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="T:Ranorex.ApplicationNotRespondingException">
            <summary>
            Exception that is thrown when trying to access elements corresponding to an
            application that is not responding.
            </summary>
        </member>
        <member name="M:Ranorex.ApplicationNotRespondingException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.ApplicationNotRespondingException.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Ranorex.ApplicationNotRespondingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ranorex.ApplicationNotRespondingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="si">The serialization info.</param>
            <param name="sc">The streaming context.</param>
        </member>
        <member name="T:Ranorex.RxAggregateException">
            <summary>Represents one or more errors that occur during application execution.</summary>
            <remarks>
            <see cref="T:Ranorex.RxAggregateException"/> is used to consolidate multiple failures into a single, throwable
            exception object.
            </remarks>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class.
            </summary>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class with
            a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerException"/> argument
            is null.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class with
            references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class with
            references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.String,System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RxAggregateException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that
            contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> argument is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The exception could not be deserialized correctly.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.#ctor(System.String,System.Collections.Generic.IList{System.Exception})">
            <summary>
            Allocates a new aggregate exception with the specified message and list of inner exceptions.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="P:Ranorex.RxAggregateException.InnerExceptions">
            <summary>
            Gets a read-only collection of the <see cref="T:System.Exception"/> instances that caused the
            current exception.
            </summary>
        </member>
        <member name="P:Ranorex.RxAggregateException.InnerExceptionCount">
             <summary>
             This helper property is used by the DebuggerDisplay.
            
             Note that we don't want to remove this property and change the debugger display to {InnerExceptions.Count}
             because DebuggerDisplay should be a single property access or parameterless method call, so that the debugger
             can use a fast path without using the expression evaluator.
            
             See http://msdn.microsoft.com/en-us/library/x810d419.aspx
             </summary>
        </member>
        <member name="M:Ranorex.RxAggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about
            the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that
            contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> argument is null.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.GetBaseException">
            <summary>
            Returns the <see cref="T:Ranorex.RxAggregateException"/> that is the root cause of this exception.
            </summary>
            <returns>The root cause exception.</returns>
        </member>
        <member name="M:Ranorex.RxAggregateException.Handle(System.Func{System.Exception,System.Boolean})">
            <summary>
            Invokes a handler on each <see cref="T:System.Exception"/> contained by this <see
            cref="T:Ranorex.RxAggregateException"/>.
            </summary>
            <param name="predicate">The predicate to execute for each exception. The predicate accepts as an
            argument the <see cref="T:System.Exception"/> to be processed and returns a Boolean to indicate
            whether the exception was handled.</param>
            <remarks>
            Each invocation of the <paramref name="predicate"/> returns true or false to indicate whether the
            <see cref="T:System.Exception"/> was handled. After all invocations, if any exceptions went
            unhandled, all unhandled exceptions will be put into a new <see cref="T:Ranorex.RxAggregateException"/>
            which will be thrown. Otherwise, the <see cref="M:Ranorex.RxAggregateException.Handle(System.Func{System.Exception,System.Boolean})"/> method simply returns. If any
            invocations of the <paramref name="predicate"/> throws an exception, it will halt the processing
            of any more exceptions and immediately propagate the thrown exception as-is.
            </remarks>
            <exception cref="T:Ranorex.RxAggregateException">An exception contained by this <see
            cref="T:Ranorex.RxAggregateException"/> was not handled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> argument is
            null.</exception>
        </member>
        <member name="M:Ranorex.RxAggregateException.Flatten">
            <summary>
            Flattens an <see cref="T:Ranorex.RxAggregateException"/> instances into a single, new instance.
            </summary>
            <returns>A new, flattened <see cref="T:Ranorex.RxAggregateException"/>.</returns>
            <remarks>
            If any inner exceptions are themselves instances of
            <see cref="T:Ranorex.RxAggregateException"/>, this method will recursively flatten all of them. The
            inner exceptions returned in the new <see cref="T:Ranorex.RxAggregateException"/>
            will be the union of all of the inner exceptions from exception tree rooted at the provided
            <see cref="T:Ranorex.RxAggregateException"/> instance.
            </remarks>
        </member>
        <member name="M:Ranorex.RxAggregateException.ToString">
            <summary>
            Creates and returns a string representation of the current <see cref="T:Ranorex.RxAggregateException"/>.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="T:Ranorex.DataSources">
            <summary>
            A collection providing access to data connectors defined in the current TestSuite.
            </summary>
        </member>
        <member name="P:Ranorex.DataSources.All">
            <summary>
            Retrieves a list of all  <see cref="T:Ranorex.Core.Data.DataCache"/> instances, representing the data connectors defined in the current TestSuite.
            </summary>
        </member>
        <member name="M:Ranorex.DataSources.Get(System.String)">
            <summary>
            Retrieves a <see cref="T:Ranorex.Core.Data.DataCache"/> representing a data connectors defined in the current TestSuite.
            </summary>
            <param name="name">The name of the data connectors to retrieve.</param>
            <returns>A <see cref="T:Ranorex.Core.Data.DataCache"/> instance or null if no source with that name was found. </returns>
        </member>
        <member name="T:Ranorex.Imaging">
            <summary>
            Provides methods to create screenshots of elements, to search for images, and
            for image processing.
            </summary>
        </member>
        <member name="T:Ranorex.Imaging.Preprocessings">
            <summary>
            Defines preprocessing steps that can be performed on an image.
            </summary>
        </member>
        <member name="F:Ranorex.Imaging.Preprocessings.None">
            <summary>
            No preprocessing.
            </summary>
        </member>
        <member name="F:Ranorex.Imaging.Preprocessings.Grayscale">
            <summary>
            Convert the image to a grayscale image.
            </summary>
        </member>
        <member name="F:Ranorex.Imaging.Preprocessings.Edges">
            <summary>
            Detect object edges in the image using the Laplace edge detection algorithm
            (includes <see cref="F:Ranorex.Imaging.Preprocessings.Grayscale"/>).
            </summary>
        </member>
        <member name="F:Ranorex.Imaging.Preprocessings.EdgesSobel">
            <summary>
            Detect object edges in the image using the Sobel edge detection algorithm
            (includes <see cref="F:Ranorex.Imaging.Preprocessings.Edges"/>).
            </summary>
        </member>
        <member name="F:Ranorex.Imaging.Preprocessings.Downsize">
            <summary>
            Downsize the image.
            </summary>
        </member>
        <member name="F:Ranorex.Imaging.Preprocessings.Threshold">
            <summary>
            Convert the image to a black/white image using a threshold (includes <see cref="F:Ranorex.Imaging.Preprocessings.Grayscale"/>).
            </summary>
        </member>
        <member name="T:Ranorex.Imaging.FindOptions">
            <summary>
            Defines options for image find methods (see <see cref="M:Ranorex.Imaging.Find(Ranorex.Core.Element,System.Drawing.Bitmap)"/> and <see cref="M:Ranorex.Imaging.FindSingle(Ranorex.Core.Element,System.Drawing.Bitmap)"/> methods).
            </summary>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="similarity">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(Ranorex.Imaging.Preprocessings)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="preprocessing">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="clipping">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Double,Ranorex.Imaging.Preprocessings)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="similarity">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> property.</param>
            <param name="preprocessing">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Double,Ranorex.Imaging.Preprocessings,System.Drawing.Rectangle)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="similarity">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> property.</param>
            <param name="preprocessing">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> property.</param>
            <param name="clipping">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Double,Ranorex.Imaging.Preprocessings,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="similarity">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> property.</param>
            <param name="preprocessing">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> property.</param>
            <param name="clipping">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> property.</param>
            <param name="bestMatch">Sets the <see cref="P:Ranorex.Imaging.FindOptions.BestMatch"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Double,Ranorex.Imaging.Preprocessings,System.Drawing.Rectangle,System.Boolean,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="similarity">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> property.</param>
            <param name="preprocessing">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> property.</param>
            <param name="clipping">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> property.</param>
            <param name="bestMatch">Sets the <see cref="P:Ranorex.Imaging.FindOptions.BestMatch"/> property.</param>
            <param name="downsizeTargetCosts">Sets the <see cref="P:Ranorex.Imaging.FindOptions.DownsizeTargetCosts"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Double,Ranorex.Imaging.Preprocessings,System.Drawing.Rectangle,System.Boolean,System.Double,Ranorex.Duration)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="similarity">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> property.</param>
            <param name="preprocessing">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> property.</param>
            <param name="clipping">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> property.</param>
            <param name="bestMatch">Sets the <see cref="P:Ranorex.Imaging.FindOptions.BestMatch"/> property.</param>
            <param name="downsizeTargetCosts">Sets the <see cref="P:Ranorex.Imaging.FindOptions.DownsizeTargetCosts"/> property.</param>
            <param name="timeout">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Timeout"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(System.Double,Ranorex.Imaging.Preprocessings,System.Drawing.Rectangle,System.Boolean,System.Double,Ranorex.Duration,System.Collections.Generic.IList{System.Drawing.Rectangle})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="similarity">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> property.</param>
            <param name="preprocessing">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> property.</param>
            <param name="clipping">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> property.</param>
            <param name="bestMatch">Sets the <see cref="P:Ranorex.Imaging.FindOptions.BestMatch"/> property.</param>
            <param name="downsizeTargetCosts">Sets the <see cref="P:Ranorex.Imaging.FindOptions.DownsizeTargetCosts"/> property.</param>
            <param name="timeout">Sets the <see cref="P:Ranorex.Imaging.FindOptions.Timeout"/> property.</param>
            <param name="ignoreRectangles">Sets the <see cref="P:Ranorex.Imaging.FindOptions.IgnoreRectangles"/> property.</param>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.#ctor(Ranorex.Imaging.FindOptions)">
            <summary>
            Creates a new instance that is a copy of the <paramref name="original"/> instance.
            </summary>
            <param name="original">The instance to make a copy from.</param>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.Default">
            <summary>
            Gets or set the default options for image find methods.
            </summary>
            <exception cref="T:System.ArgumentNullException">If setting this property to <c>null</c>.</exception>
            <remarks>Change the default options by assigning a new instance to this property.
            Changing a property value on the instance returned by this property won't change
            the default options, but only the returned instance; i.e.
            <code>Ranorex.Imaging.FindOptions.Default.Similarity = 0.95;</code> won't change
            the default value for <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/>, but the following line will:
            <code>Ranorex.Imaging.FindOptions.Default = new Ranorex.Imaging.FindOptions(0.95);</code></remarks>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.BestMatch">
            <summary>
            Gets or set a value specifying if the best (<c>true</c>) or the first (<c>false</c>) match
            found in a call to <see cref="M:Ranorex.Imaging.FindSingle(Ranorex.Core.Element,System.Drawing.Bitmap)"/> should be returned.
            </summary>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.Clipping">
            <summary>
            Gets or sets a clipping rectangle in the image that defines the region where
            the search takes place, i.e. not the whole image is searched but only this
            rectangle inside it.
            </summary>
            <remarks>
            The clipping rectangle will always be applied to the first
            argument of a method, i.e. for the <see cref="M:Ranorex.Imaging.FindSingle(System.Drawing.Bitmap,System.Drawing.Bitmap)"/> method
            the value of this property is only applied to the image argument.
            </remarks>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.IgnoreRectangles">
            <summary>
            Gets or sets a list of ignoring rectangles in the image which define regions
            the search ignores, i.e. the whole image is searched except the defined
            region.
            </summary>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.Preprocessing">
            <summary>
            Gets or sets the preprocessing steps that are performed to the image and
            the feature bitmaps before searching.
            </summary>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.Similarity">
            <summary>
            Gets or sets the minimum similarity that the feature needs to have with the
            image to be considered a match.
            </summary>
            <remarks>
            A smaller similarity causes the search to take longer as more pixels need
            to be processed before a point in the image can be certain to be no match.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value lies outside the
            interval 0.0 and 1.0.</exception>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.DownsizeTargetCosts">
            <summary>
            Gets or sets a value that defines the estimated costs (time) for searching an image.
            If <see cref="F:Ranorex.Imaging.Preprocessings.Downsize"/> is set as a preprocessing step, the
            image and feature bitmaps are tried to be downsized so that the estimated search costs
            match this value.
            </summary>
            <remarks>
            The time to search for an image is proportional to the product of the areas of the
            image and the feature bitmap. By settings this value and the <see cref="F:Ranorex.Imaging.Preprocessings.Downsize"/>
            as a preprocessing step, you can adjust the estimated search time. Note, that a reduced
            search time generally reduces the size of the downsized images and thus their quality and
            the similarity of the search matches.
            <para>Image and feature will only be downsized to a minimum of 30% of their original size.</para>
            </remarks>
        </member>
        <member name="P:Ranorex.Imaging.FindOptions.Timeout">
            <summary>
            Gets or sets the timeout used to search for the specified feature.
            </summary>
            <remarks>The timeout specifies the time to iteratively search for the specified feature,
            i.e. when to stop searching anew. The timeout will not abort a search iteration, i.e. if a
            single search iteration takes 5 seconds and the timeout is set to 8 seconds, the search will
            return after 10 seconds (after performing two search iterations).
            <para>Additionally, the timeout only applies to searches done on elements, not on bitmaps directly,
            because only then the searched image can be updated.</para></remarks>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.op_Equality(Ranorex.Imaging.FindOptions,Ranorex.Imaging.FindOptions)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance.</param>
            <param name="b">Another <see cref="T:Ranorex.Imaging.FindOptions"/> instance.</param>
            <returns><c>True</c> if the two instances are equal.</returns>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.op_Inequality(Ranorex.Imaging.FindOptions,Ranorex.Imaging.FindOptions)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance.</param>
            <param name="b">Another <see cref="T:Ranorex.Imaging.FindOptions"/> instance.</param>
            <returns><c>True</c> if the two instances are not equal.</returns>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to <paramref name="obj"/>.
            </summary>
            <param name="obj">Another instance.</param>
            <returns><c>True</c> if this instance is equal to <paramref name="obj"/>,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.Equals(Ranorex.Imaging.FindOptions)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.GetHashCode">
            <summary>
            Returns a static, very poor performing hash code!
            </summary>
            <returns>A hash code for this instance.</returns>
            <remarks>Since <see cref="T:Ranorex.Imaging.FindOptions"/> instances are not immutable, the only way to
            satisfy all <see cref="M:Ranorex.Imaging.FindOptions.Equals(System.Object)"/> and <see cref="M:Ranorex.Imaging.FindOptions.GetHashCode"/> requirements is
            to return a static number for all <see cref="T:Ranorex.Imaging.FindOptions"/> instances. Consequently,
            the performance of a hash table storing <see cref="T:Ranorex.Imaging.FindOptions"/> instances will be
            very poor (hash table degenerates to list)!</remarks>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.Equals(Ranorex.Imaging.FindOptions,Ranorex.Imaging.FindOptions)">
            <summary>
            Returns <c>true</c> if the two instances are equal.
            </summary>
            <param name="a">An instance.</param>
            <param name="b">Another instance.</param>
            <returns><c>True</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.Clone">
            <summary>
            Creates a new <see cref="T:Ranorex.Imaging.FindOptions"/> instance with the same values as this instance.
            </summary>
            <returns>A new instance that is a clone of this instance.</returns>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.ToString">
            <summary>
            Returns a string representation of the instance.
            </summary>
            <returns>A string representation of the instance.</returns>
            <remarks>Calling this method is equivalent to calling <see cref="M:Ranorex.Imaging.FindOptions.ToString(System.String)"/>
            with the format parameter "G".</remarks>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.ToString(System.String)">
            <summary>
            Returns a string representation of the instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use or
            <c>null</c> to use the default format (G).</param>
            <returns>A string representation of the instance.</returns>
            <remarks>
            The following string values are valid for <paramref name="format"/>:
            <list type="table">
            <listheader>
                <term>Format String</term>
                <description>Description and Associated Properties</description>
            </listheader>
            <item>
                <term>g</term>
                <description>General format, containing nomination of values.</description>
            </item>
            <item>
                <term>s</term>
                <description>Short format, no nomination of values.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use or
            <c>null</c> to use the default format (G).</param>
            <param name="formatProvider">Not used.</param>
            <returns>A string representation of the instance.</returns>
            <remarks>
            The following string values are valid for <paramref name="format"/>:
            <list type="table">
            <listheader>
                <term>Format String</term>
                <description>Description and Associated Properties</description>
            </listheader>
            <item>
                <term>g</term>
                <description>General format, containing nomination of values.</description>
            </item>
            <item>
                <term>s</term>
                <description>Short format, no nomination of values.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.Parse(System.String)">
            <summary>
            Parses the given <see cref="T:System.String"/> and returns a new <see cref="T:Ranorex.Imaging.FindOptions"/> instance.
            </summary>
            <param name="findOptionsString">A string representing the find options.</param>
            <returns>A new <see cref="T:Ranorex.Imaging.FindOptions"/> corresponding to the given <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="findOptionsString"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">If <paramref name="findOptionsString"/> has an invalid format.</exception>
        </member>
        <member name="M:Ranorex.Imaging.FindOptions.TryParse(System.String,Ranorex.Imaging.FindOptions@)">
            <summary>
            Tries parsing the given <see cref="T:System.String"/> to a <see cref="T:Ranorex.Imaging.FindOptions"/> instance.
            </summary>
            <param name="findOptionsString">A string representing the find options.</param>
            <param name="findOptions">When this method returns, contains a <see cref="T:Ranorex.Imaging.FindOptions"/> instance
            if parsing succeeded, <c>null</c> otherwise.</param>
            <returns><c>True</c> if parsing succeeded, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Ranorex.Imaging.Match">
            <summary>
            A match in a image find operation.
            </summary>
        </member>
        <member name="M:Ranorex.Imaging.Match.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="x">The x coordinate of the match.</param>
            <param name="y">The y coordinate of the match.</param>
            <param name="width">The width of the feature that matched.</param>
            <param name="height">The height of the feature that matched.</param>
            <param name="similarity">The similarity of the match.</param>
        </member>
        <member name="M:Ranorex.Imaging.Match.#ctor(System.Drawing.Point,System.Drawing.Size,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="location">The location of the match.</param>
            <param name="size">The size of the feature that matched.</param>
            <param name="similarity">The similarity of the match.</param>
        </member>
        <member name="M:Ranorex.Imaging.Match.#ctor(System.Drawing.Rectangle,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="rect">A rectangle that specified the location of the match
            and the size of the feature that matched.</param>
            <param name="similarity">The similarity of the match.</param>
        </member>
        <member name="P:Ranorex.Imaging.Match.Location">
            <summary>
            Gets the relative location of the match inside the image.
            </summary>
        </member>
        <member name="P:Ranorex.Imaging.Match.Size">
            <summary>
            Gets the size of the feature that matched the image.
            </summary>
        </member>
        <member name="P:Ranorex.Imaging.Match.Similarity">
            <summary>
            Gets the similarity of the match.
            </summary>
        </member>
        <member name="M:Ranorex.Imaging.Match.ToString">
            <summary>
            Returns a string representation of the match.
            </summary>
            <returns>A string representation of the match.</returns>
        </member>
        <member name="M:Ranorex.Imaging.Match.Sort(System.Collections.Generic.List{Ranorex.Imaging.Match},System.Collections.Generic.IComparer{Ranorex.Imaging.Match})">
            <summary>
            Sorts a list of matches using the specified comparer.
            </summary>
            <param name="matches">A list of matches.</param>
            <param name="comparer">A comparer.</param>
        </member>
        <member name="M:Ranorex.Imaging.Match.op_Implicit(Ranorex.Imaging.Match)~Ranorex.Location">
            <summary>
            Converts the match to a location that points to the middle of the
            feature that matched at the matching location.
            </summary>
            <param name="match">A match.</param>
            <returns>A location instance.</returns>
        </member>
        <member name="M:Ranorex.Imaging.Match.ToLocation(Ranorex.Imaging.Match)">
            <summary>
            Converts the match to a location that points to the middle of the
            feature that matched at the matching location.
            </summary>
            <param name="match">A match.</param>
            <returns>A location instance.</returns>
        </member>
        <member name="T:Ranorex.Imaging.MatchSimilarityComparer">
            <summary>
            Compares to matches by their similarity.
            </summary>
        </member>
        <member name="M:Ranorex.Imaging.MatchSimilarityComparer.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Ranorex.Imaging.MatchSimilarityComparer.#ctor(System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="descending"><c>True</c> to compare matches in descending order.</param>
        </member>
        <member name="M:Ranorex.Imaging.MatchSimilarityComparer.Compare(Ranorex.Imaging.Match,Ranorex.Imaging.Match)">
            <summary>
            Compares two matches and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">Match one.</param>
            <param name="y">Match two.</param>
            <returns>A value indicating whether one is less than, equal to, or greater
            than the other.</returns>
        </member>
        <member name="M:Ranorex.Imaging.MatchSimilarityComparer.Sort(System.Collections.Generic.List{Ranorex.Imaging.Match},System.Boolean)">
            <summary>
            Sorts the specified list of matches by their similarity.
            </summary>
            <param name="matches">A list of matches.</param>
            <param name="descending"><c>True</c> to sort descending, <c>false</c> to sort ascending.</param>
        </member>
        <member name="T:Ranorex.Imaging.BitmapMemoryPressure">
            <summary>
            Adds memory pressure to a bitmap.
            </summary>
            <remarks>The .NET <see cref="T:System.Drawing.Bitmap"/> class does not handle garbage collection very well,
            because most of the memory needed by such instances are unmanaged. This class provides
            memory management for <see cref="T:System.Drawing.Bitmap"/> instances without the need to dispose each
            instance.
            <para>This is done by adding an object to the <see cref="P:System.Drawing.Image.Tag"/> property that
            tracks the unmanaged memory of the bitmap.</para></remarks>
        </member>
        <member name="M:Ranorex.Imaging.BitmapMemoryPressure.Finalize">
            <summary>
            Finalizes an instance of this class.
            </summary>
            <remarks>Removes the GC memory pressure added for the associated bitmap.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.BitmapMemoryPressure.Add(System.Drawing.Image)">
            <summary>
            Adds memory pressure to the image if it is a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="image">An image.</param>
            <returns>The image with memory pressure added.</returns>
        </member>
        <member name="M:Ranorex.Imaging.BitmapMemoryPressure.Add(System.Drawing.Bitmap)">
            <summary>
            Adds memory pressure to the bitmap.
            </summary>
            <param name="b">A bitmap image.</param>
            <returns>The bitmap with memory pressure added.</returns>
        </member>
        <member name="T:Ranorex.Imaging.Processing">
            <summary>
            Provides low-level image processing routines.
            </summary>
        </member>
        <member name="P:Ranorex.Imaging.Processing.LaplaceKernel3x3">
            <summary>
            Gets a 3x3 laplace filter kernel.
            </summary>
        </member>
        <member name="P:Ranorex.Imaging.Processing.LaplaceKernel5x5">
            <summary>
            Gets a 5x5 laplace filter kernel.
            </summary>
        </member>
        <member name="M:Ranorex.Imaging.Processing.Preprocess(System.Drawing.Bitmap,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Preprocesses the specified <paramref name="image"/> by converting it
            to a grayscale image, detecting object edges, thresholding, and/or
            resizing/scaling it.
            </summary>
            <param name="image">An image.</param>
            <param name="grayscale">If <c>true</c> and <paramref name="image"/> is not already
            a grayscale image, converts the image to a grayscale image
            (see <see cref="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImage(System.Drawing.Bitmap)"/>).</param>
            <param name="edges">If <c>true</c>, tries to detect object edges in the image
            (see <see cref="M:Ranorex.Imaging.Processing.DetectEdges(System.Drawing.Bitmap)"/>).</param>
            <param name="threshold">If <c>true</c>, a threshold (128) is applied to the
            image (see <see cref="M:Ranorex.Imaging.Processing.Threshold(System.Drawing.Bitmap,System.Byte)"/>).</param>
            <param name="scaleWidth">If not equal to 1.0, the width of the image will be
            scaled using the specified factor (see <see cref="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double,System.Double)"/>).</param>
            <param name="scaleHeight">If not equal to 1.0, the height of the image will be
            scaled using the specified factor (see <see cref="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double,System.Double)"/>).</param>
            <returns>The preprocessed image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the input <paramref name="image"/> is not
            a grayscale image, needs to be converted to such, and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.Preprocess(System.Drawing.Bitmap,System.Boolean,System.Boolean@,System.Boolean,System.Double,System.Double,System.Drawing.Point@)">
            <summary>
            Preprocesses the specified <paramref name="image"/> by converting it
            to a grayscale image, detecting object edges, thresholding, and/or
            resizing/scaling it.
            </summary>
            <param name="image">An image.</param>
            <param name="grayscale">If <c>true</c> and <paramref name="image"/> is not already
            a grayscale image, converts the image to a grayscale image
            (see <see cref="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImage(System.Drawing.Bitmap)"/>).</param>
            <param name="edges">If <c>true</c>, tries to detect object edges in the image
            (see <see cref="M:Ranorex.Imaging.Processing.DetectEdges(System.Drawing.Bitmap)"/>). If the image width or height is smaller than
            3 pixels, no edge detection will be performed and this parameter will be
            <c>false</c> when the method returns.</param>
            <param name="threshold">If <c>true</c>, a threshold (128) is applied to the
            image (see <see cref="M:Ranorex.Imaging.Processing.Threshold(System.Drawing.Bitmap,System.Byte)"/>).</param>
            <param name="scaleWidth">If not equal to 1.0, the width of the image will be
            scaled using the specified factor (see <see cref="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double,System.Double)"/>).</param>
            <param name="scaleHeight">If not equal to 1.0, the height of the image will be
            scaled using the specified factor (see <see cref="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double,System.Double)"/>).</param>
            <param name="offset">When this method returns, contains a point that specifies the
            number of pixels the image has been cropped. Cropping takes place to remove a
            margin that comes from applying an edge detection filter on the image.</param>
            <returns>The preprocessed image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the input <paramref name="image"/> is not
            a grayscale image, needs to be converted to such, and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.Preprocess(System.Drawing.Bitmap,System.Boolean,System.Boolean@,System.Boolean,System.Boolean,System.Double,System.Double,System.Drawing.Point@)">
            <summary>
            Preprocesses the specified <paramref name="image"/> by converting it
            to a grayscale image, detecting object edges, thresholding, and/or
            resizing/scaling it.
            </summary>
            <param name="image">An image.</param>
            <param name="grayscale">If <c>true</c> and <paramref name="image"/> is not already
            a grayscale image, converts the image to a grayscale image
            (see <see cref="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImage(System.Drawing.Bitmap)"/>).</param>
            <param name="edges">If <c>true</c>, tries to detect object edges in the image
            (see <see cref="M:Ranorex.Imaging.Processing.DetectEdges(System.Drawing.Bitmap)"/>). If the image width or height is smaller than
            3 pixels, no edge detection will be performed and this parameter will be
            <c>false</c> when the method returns.</param>
            <param name="useSobel">Decides which edge detection algorithm to use if <paramref name="edges"/>
            is <c>true</c>. If <c>true</c>, the Sobel edge detection algorithm is used (see
            <see cref="M:Ranorex.Imaging.Processing.DetectEdgesSobel(System.Drawing.Bitmap)"/>), otherwise Laplace is used (see <see cref="M:Ranorex.Imaging.Processing.DetectEdgesLaplace(System.Drawing.Bitmap)"/>).</param>
            <param name="threshold">If <c>true</c>, a threshold (128) is applied to the
            image (see <see cref="M:Ranorex.Imaging.Processing.Threshold(System.Drawing.Bitmap,System.Byte)"/>).</param>
            <param name="scaleWidth">If not equal to 1.0, the width of the image will be
            scaled using the specified factor (see <see cref="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double,System.Double)"/>).</param>
            <param name="scaleHeight">If not equal to 1.0, the height of the image will be
            scaled using the specified factor (see <see cref="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double,System.Double)"/>).</param>
            <param name="offset">When this method returns, contains a point that specifies the
            number of pixels the image has been cropped. Cropping takes place to remove a
            margin that comes from applying an edge detection filter on the image.</param>
            <returns>The preprocessed image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the input <paramref name="image"/> is not
            a grayscale image, needs to be converted to such, and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImage(System.Drawing.Bitmap)">
            <summary>
            Converts a color to a grayscale image (bitmap format <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>).
            </summary>
            <param name="input">A color image.</param>
            <returns>A grayscale image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
            <remarks>This method is equivalent to method <see cref="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImageY(System.Drawing.Bitmap)"/>.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImageY(System.Drawing.Bitmap)">
            <summary>
            Converts a color to a grayscale image (bitmap format <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>)
            using color component coefficients specified by the ITU-R Recommendation BT.601:
            { 0.299, 0.587, 0.114 }.
            </summary>
            <param name="input">A color image.</param>
            <returns>A grayscale image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImageBT709(System.Drawing.Bitmap)">
            <summary>
            Converts a color to a grayscale image (bitmap format <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>)
            using color component coefficients specified by the ITU-R Recommendation BT.709:
            { 0.2126, 0.7152, 0.0722 }.
            </summary>
            <param name="input">A color image.</param>
            <returns>A grayscale image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImageRMY(System.Drawing.Bitmap)">
            <summary>
            Converts a color to a grayscale image (bitmap format <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>)
            using color component coefficients { 0.5, 0.419, 0.081 }.
            </summary>
            <param name="input">A color image.</param>
            <returns>A grayscale image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImage(System.Drawing.Bitmap,System.Double,System.Double,System.Double)">
            <summary>
            Converts a color to a grayscale image (bitmap format <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>)
            by calculating grayscale values according to the specified color component coefficients.
            </summary>
            <param name="input">A color image.</param>
            <param name="coeffR">The coefficient for the red color component.</param>
            <param name="coeffG">The coefficient for the green color component.</param>
            <param name="coeffB">The coefficient for the blue color component.</param>
            <returns>A grayscale image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.Threshold(System.Drawing.Bitmap,System.Byte)">
            <summary>
            Converts the input image to a black/white image (i.e. an image that contains only
            two different colors) using the specified threshold value.
            </summary>
            <param name="input">An image.</param>
            <param name="threshold">The threshold value that decides whether an output pixel
            is colored black or white. If the input value is smaller than the threshold, the
            output pixel is colored black, otherwise white.</param>
            <returns>A grayscale image that contains only black and white pixels.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image is not
            a grayscale image and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
            <remarks>If the image is not a grayscale image, it will be converted using
            the <see cref="M:Ranorex.Imaging.Processing.ConvertRgbToGrayscaleImage(System.Drawing.Bitmap)"/> method.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.Processing.DetectEdges(System.Drawing.Bitmap)">
            <summary>
            Converts the input images to a grayscale image that contains object edges from
            the input image.
            </summary>
            <param name="input">An image.</param>
            <returns>A grayscale image containing object edges.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image is not
            a grayscale image and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
            <remarks>This method is equivalent to <see cref="M:Ranorex.Imaging.Processing.DetectEdgesLaplace(System.Drawing.Bitmap)"/>.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.Processing.DetectEdgesSobel(System.Drawing.Bitmap)">
            <summary>
            Converts the input images to a grayscale image that contains object edges from
            the input image using the Sobel filtering algorithm.
            </summary>
            <param name="input">An image.</param>
            <returns>A grayscale image containing object edges.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image is not
            a grayscale image and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.DetectEdgesLaplace(System.Drawing.Bitmap)">
            <summary>
            Converts the input images to a grayscale image that contains object edges from
            the input image using a Laplace filter kernel.
            </summary>
            <param name="input">An image.</param>
            <returns>A grayscale image containing object edges.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image is not
            a grayscale image and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
            <remarks>
            By default the <see cref="P:Ranorex.Imaging.Processing.LaplaceKernel5x5"/> is used as the filter kernel,
            unless the image with or height is smaller than 5 pixels; in that case
            the <see cref="P:Ranorex.Imaging.Processing.LaplaceKernel3x3"/> is used instead.
            </remarks>
        </member>
        <member name="M:Ranorex.Imaging.Processing.DetectEdgesLaplace(System.Drawing.Bitmap,System.Boolean,System.Int32@)">
            <summary>
            Converts the input images to a grayscale image that contains object edges from
            the input image using a Laplace filter kernel, optionally scaling grayscale
            values in the output image.
            </summary>
            <param name="input">An image.</param>
            <param name="scale">If <c>true</c>, the <see cref="M:Ranorex.Imaging.Processing.FilterScaled(System.Drawing.Bitmap,System.Int32[0:,0:])"/> method is used to filter
            the input image; otherwise the <see cref="M:Ranorex.Imaging.Processing.Filter(System.Drawing.Bitmap,System.Int32[0:,0:])"/> method is used.</param>
            <param name="margin">When this method returns, contains an integer that specifies
            the pixel margin in the output image that has not been written to because of the
            filter size.</param>
            <returns>A grayscale image containing object edges.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image is not
            a grayscale image and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
            <remarks>
            By default the <see cref="P:Ranorex.Imaging.Processing.LaplaceKernel5x5"/> is used as the filter kernel,
            unless the image with or height is smaller than 5 pixels; in that case
            the <see cref="P:Ranorex.Imaging.Processing.LaplaceKernel3x3"/> is used instead.
            </remarks>
        </member>
        <member name="M:Ranorex.Imaging.Processing.Filter(System.Drawing.Bitmap,System.Int32[0:,0:])">
            <summary>
            Creates a new grayscale image by applying the specified filter kernel on the input image.
            </summary>
            <param name="input">An image.</param>
            <param name="filterKernel">The filter kernel used to filter the input image.</param>
            <returns>A grayscale image filtered by the specified filter kernel.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image is not
            a grayscale image and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="filterKernel"/> is not
            a 3x3 or 5x5 filter kernel.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.FilterScaled(System.Drawing.Bitmap,System.Int32[0:,0:])">
            <summary>
            Creates a new grayscale image by applying the specified filter kernel on the input image.
            The grayscale values in the output image are scaled to avoid cropping, i.e. so that
            no output value is smaller than zero or greather than 255.
            </summary>
            <param name="input">An image.</param>
            <param name="filterKernel">The filter kernel used to filter the input image.</param>
            <returns>A grayscale image filtered by the specified filter kernel.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="input"/> image is not
            a grayscale image and cannot
            be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format (i.e. if
            it is no color image in a 32 bit format).</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="filterKernel"/> is not
            a 3x3 or 5x5 filter kernel.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.FindImage(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double,System.Int32,System.Int32,System.Boolean[0:,0:])">
            <summary>
            Searches for the specified <paramref name="feature"/> in the <paramref name="image"/>
            and returns a list of <see cref="T:Ranorex.Imaging.Match"/>es.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <param name="similarityThreshold">A value between 0.0 and 1.0 (inclusive) that defines the
            similarity the feature needs to have with the image to be considered a match.</param>
            <param name="windowRadius">Specifies the radius of a window in which only the
            match with the greatest similarity is reported.</param>
            <param name="maxMatches">Defines the maximum number of matches to return; or 0 to
            not define a limit for the number of matches.</param>
            <param name="ignoreMap">A two dimensional map of the reference image pixels.
            Is the pixel set to true in this map it will be ignored for comparison.</param>
            <returns>A list of <see cref="T:Ranorex.Imaging.Match"/>es found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="similarityThreshold"/>
            lies outside the interval 0.0 and 1.0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxMatches"/>
            is negative.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the <paramref name="image"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Processing.DetectClickRegion(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle@)">
            <summary>
            Tries to find a region in the image containing useful information by iterative inflation of the start rectangle.
            The algorithm stops if no more information is gained through inflation.
            </summary>
            <param name="input">The input image.</param>
            <param name="startRect">The start region.</param>
            <param name="result">The resulting region.</param>
            <returns>The resulting detected region. Returns a empty region if the information content in the region is too low.</returns>
        </member>
        <member name="P:Ranorex.Imaging.UseMultiThreading">
            <summary>
            Gets a sets a value disabling or enabling multi-threading for <see cref="M:Ranorex.Imaging.Contains(Ranorex.Core.Element,System.Drawing.Bitmap)"/> or <see cref="M:Ranorex.Imaging.Find(Ranorex.Core.Element,System.Drawing.Bitmap)"/> operations.
            <c>True</c> by default.
            </summary>
            <remarks>
            If this is set to <c>false</c> operations related to <see cref="M:Ranorex.Imaging.Contains(Ranorex.Core.Element,System.Drawing.Bitmap)"/> or <see cref="M:Ranorex.Imaging.Find(Ranorex.Core.Element,System.Drawing.Bitmap)"/> will take longer, if this is set to <c>true</c>
            the processor may be fully utilized until the operation finishes and other tasks may take longer.
            </remarks>
        </member>
        <member name="M:Ranorex.Imaging.CaptureImage(Ranorex.Core.Element)">
            <summary>
            Captures an image of an element.
            </summary>
            <param name="element">The element to capture.</param>
            <returns>The captured image.</returns>
            <remarks>
            Note that the element must be visible to capture a useful image.
            </remarks>
        </member>
        <member name="M:Ranorex.Imaging.CaptureImage(Ranorex.Core.Element,System.Int32,System.Boolean)">
            <summary>
            Captures an image of an element.
            </summary>
            <param name="element">The element to capture.</param>
            <param name="delay">Capture wait delay.</param>
            <param name="ensureVisible">If true, the element is made visible before any capturing is done.</param>
            <returns>The captured image.</returns>
            <remarks>
            Note that the element must be visible to capture a useful image.
            </remarks>
        </member>
        <member name="M:Ranorex.Imaging.CaptureDesktopImage(System.Drawing.Rectangle)">
            <summary>
            Captures an image region from the desktop.
            </summary>
            <param name="rect">The region to capture.</param>
            <returns>The captured image region.</returns>
        </member>
        <member name="M:Ranorex.Imaging.CaptureDesktopImage(Ranorex.Core.Element)">
            <summary>
            Captures an image of <paramref name="element"/> from the desktop.
            </summary>
            <param name="element">The element to capture or <c>null</c> to capture the whole desktop.</param>
            <returns>The captured image.</returns>
        </member>
        <member name="M:Ranorex.Imaging.CaptureDesktopImageWithSurroundingArea(Ranorex.Core.Element,System.Nullable{System.Drawing.Point},System.Drawing.Color)">
            <summary>
            Captures an image of the of the <paramref name="element"/> and its surrounding area from the desktop.
            </summary>
            <param name="element">The element to capture within its periphery.</param>
            <param name="mousePoint">A point specifying the screen coordinates of the current
            mouse cursor or <c>null</c> in order not to capture the mouse cursor.</param>
            <param name="highlightColor">The color used to highlight the element within its surrounding area
            or <see cref="F:System.Drawing.Color.Empty"/> to not highlight the element.</param>
            <returns>The captured image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Ranorex.Imaging.CaptureDesktopImagesWithSurroundingArea(Ranorex.Core.Element,System.Nullable{System.Drawing.Point},System.Drawing.Color,System.Drawing.Color,System.Int32,System.Drawing.Bitmap@)">
            <summary>
            Captures an image of the of the <paramref name="element"/> and its surrounding area from the desktop, creating two images, with different borders and sizes.
            </summary>
            <param name="element">The element to capture within its periphery.</param>
            <param name="mousePoint">A point specifying the screen coordinates of the current
            mouse cursor or <c>null</c> in order not to capture the mouse cursor.</param>
            <param name="highlightColor1">The color used to highlight the element within its surrounding area
            or <see cref="F:System.Drawing.Color.Empty"/> to not highlight the element.</param>
             <param name="highlightColor2">The color used to highlight the element within its surrounding area
            or <see cref="F:System.Drawing.Color.Empty"/> to not highlight the element, used for elemImage.</param>
            <param name="elemImage">The captured image of the element rectangle without surround areas or borders.</param>
            <param name="alpha">The alpha value used for blending the non-highlighted area with the background.</param>
            <returns>The captured image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Ranorex.Imaging.CaptureCompressedImage(Ranorex.Core.Element)">
            <summary>
            Captures a compressed image of an element.
            </summary>
            <param name="element">The element to capture.</param>
            <returns>The captured compressed image.</returns>
        </member>
        <member name="M:Ranorex.Imaging.CaptureCompressedImage(Ranorex.Adapter)">
            <summary>
            Captures a compressed image of an adapter.
            </summary>
            <param name="adapter">The adapter to capture.</param>
            <returns>The captured compressed image.</returns>
        </member>
        <member name="M:Ranorex.Imaging.CaptureImageHidden(Ranorex.Core.Element)">
            <summary>
            Captures an image of the element even if it is hidden by other elements.
            </summary>
            <param name="element">The element to capture.</param>
            <returns>The captured image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Ranorex.Imaging.CaptureImageHidden(System.IntPtr)">
            <summary>
            Captures an image of the window even if it is hidden by other windows.
            </summary>
            <param name="handle">The handle of the window to capture.</param>
            <returns>The captured image or <c>null</c> if capturing a hidden image fails.</returns>
            <remarks>This methods does not consider the <see cref="P:Ranorex.Core.Flavor.UseDesktopImageCapture"/> property.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.CaptureImageAuto(Ranorex.Core.Element)">
            <summary>
            Captures an image of the element even if it is hidden by other elements.
            If this does not succeed, the visible portion of the element is captured using a screenshot.
            </summary>
            <param name="element">The element to capture.</param>
            <returns>The captured image.</returns>
        </member>
        <member name="M:Ranorex.Imaging.CaptureImageAuto(Ranorex.Core.Element,System.Boolean)">
            <summary>
            Captures an image of the element even if it is hidden by other elements.
            If this does not succeed, the visible portion of the element is captured using a screenshot.
            </summary>
            <param name="element">The element to capture.</param>
            <param name="ensureVisibleIfNeeded">If capturing the image hidden does not succeed,
            this value specified if the element should be made visible before capturing
            the screenshot.</param>
            <returns>The captured image.</returns>
        </member>
        <member name="M:Ranorex.Imaging.Compare(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Compares the specified <paramref name="feature"/> with (a screenshot of) the
            <paramref name="element"/> and returns whether
            their similarity is greater than or equal to the value specified by
            <paramref name="options"/>.<see cref="P:Ranorex.Imaging.FindOptions.Similarity"/>.
            </summary>
            <param name="element">The element to make a screenshot of.</param>
            <param name="feature">The image to compare the screenshot with.</param>
            <param name="options">The options for the image comparison. The <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> options
            are applied to both images, the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> rectangle only to the
            screenshot of the <paramref name="element"/>.
            The <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> defines the minimum similarity the images need to have.</param>
            <returns><c>True</c> if the similarity of the two (preprocessed) images is greater than or equal
            to <paramref name="options"/>.<see cref="P:Ranorex.Imaging.FindOptions.Similarity"/>.</returns>
            <exception cref="T:Ranorex.RanorexException">If capturing a screenshot of the element fails.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the screenshot of the <paramref name="element"/>.</exception>
            <remarks><c>False</c> will be returned if the <paramref name="feature"/> and the screenshot of the
            <paramref name="element"/> (after clipping using the rectangle value of
            <paramref name="options"/>.<see cref="P:Ranorex.Imaging.FindOptions.Clipping"/>) do not have the same size.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.Compare(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double)">
            <summary>
            Compares <paramref name="imageA"/> and <paramref name="imageB"/> and returns whether
            their similarity is greater than or equal to <paramref name="similarity"/>.
            </summary>
            <param name="imageA">The first image.</param>
            <param name="imageB">The second image.</param>
            <param name="similarity">The minimum similarity of the two images in order
            to return <c>true</c>.</param>
            <returns><c>True</c> if the similarity of the two images is greater than or equal
            to <paramref name="similarity"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="imageA"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="imageB"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="imageB"/>
            cannot be converted to that of the <paramref name="imageA"/>.</exception>
            <remarks><c>False</c> will be returned if the two images do not have the same size. If
            <paramref name="similarity"/> is smaller than or equal to zero, <c>true</c> is returned.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.Compare(System.Drawing.Bitmap,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Compares <paramref name="image"/> and <paramref name="feature"/> and returns whether
            their similarity is greater than or equal to the value specified by
            <paramref name="options"/>.<see cref="P:Ranorex.Imaging.FindOptions.Similarity"/>.
            </summary>
            <param name="image">The first image.</param>
            <param name="feature">The second image.</param>
            <param name="options">The options for the image comparison. The <see cref="P:Ranorex.Imaging.FindOptions.Preprocessing"/> options
            are applied to both images, the <see cref="P:Ranorex.Imaging.FindOptions.Clipping"/> rectangle only to <paramref name="image"/>.
            The <see cref="P:Ranorex.Imaging.FindOptions.Similarity"/> defines the minimum similarity the images need to have.</param>
            <returns><c>True</c> if the similarity of the two (preprocessed) images is greater than or equal
            to <paramref name="options"/>.<see cref="P:Ranorex.Imaging.FindOptions.Similarity"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
            <remarks><c>False</c> will be returned if the two images (after clipping <paramref name="image"/>
            using the rectangle value of <paramref name="options"/>.<see cref="P:Ranorex.Imaging.FindOptions.Clipping"/>)
            do not have the same size.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.Compare(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Compares <paramref name="imageA"/> and <paramref name="imageB"/> and returns their
            similarity.
            </summary>
            <param name="imageA">The first image.</param>
            <param name="imageB">The second image.</param>
            <returns>The similarity of the two images.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="imageA"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="imageB"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="imageB"/>
            cannot be converted to that of the <paramref name="imageA"/>.</exception>
            <remarks>A similarity of zero will be returned if the two images do not have
            the same size. No preprocessing or clipping is done on the specified images.</remarks>
        </member>
        <member name="M:Ranorex.Imaging.Contains(Ranorex.Core.Element,System.Drawing.Bitmap)">
            <summary>
            Searches for the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/>
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>
            and returns whether the <paramref name="feature"/> is found.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <returns><c>True</c> if the <paramref name="feature"/> is found, otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.RanorexException">If capturing a screenshot of the element fails.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that (color image, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>)
            of the screenshot of the <paramref name="element"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Contains(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Searches for the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/>
            and returns whether the <paramref name="feature"/> is found.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <returns><c>True</c> if the <paramref name="feature"/> is found, otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.RanorexException">If capturing a screenshot of the element fails.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that (color image, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>)
            of the screenshot of the <paramref name="element"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Contains(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Searches for the specified <paramref name="feature"/> in the <paramref name="image"/>
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>
            and returns whether the <paramref name="feature"/> is found.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <returns><c>True</c> if the <paramref name="feature"/> is found, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the <paramref name="image"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Contains(System.Drawing.Bitmap,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Searches for the specified <paramref name="feature"/> in the <paramref name="image"/>
            and returns whether the <paramref name="feature"/> is found.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <returns><c>True</c> if the <paramref name="feature"/> is found, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the <paramref name="image"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Find(Ranorex.Core.Element,System.Drawing.Bitmap)">
            <summary>
            Searches for the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/> and returns a list of <see cref="T:Ranorex.Imaging.Match"/>es
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <returns>A list of <see cref="T:Ranorex.Imaging.Match"/>es found.</returns>
            <exception cref="T:Ranorex.RanorexException">If capturing a screenshot of the element fails.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that (color image, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>)
            of the screenshot of the <paramref name="element"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Find(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Searches for the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/> and returns a list of <see cref="T:Ranorex.Imaging.Match"/>es.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <returns>A list of <see cref="T:Ranorex.Imaging.Match"/>es found.</returns>
            <exception cref="T:Ranorex.RanorexException">If capturing a screenshot of the element fails.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that (color image, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>)
            of the screenshot of the <paramref name="element"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Find(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Searches for the specified <paramref name="feature"/> in the <paramref name="image"/>
            and returns a list of <see cref="T:Ranorex.Imaging.Match"/>es
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <returns>A list of <see cref="T:Ranorex.Imaging.Match"/>es found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the <paramref name="image"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Find(System.Drawing.Bitmap,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Searches for the specified <paramref name="feature"/> in the <paramref name="image"/>
            and returns a list of <see cref="T:Ranorex.Imaging.Match"/>es.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <returns>A list of <see cref="T:Ranorex.Imaging.Match"/>es found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the <paramref name="image"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
        </member>
        <member name="M:Ranorex.Imaging.FindSingle(Ranorex.Core.Element,System.Drawing.Bitmap)">
            <summary>
            Searches for the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/>
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <returns>The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <see cref="P:Ranorex.Imaging.FindOptions.Default"/> options).</returns>
            <exception cref="T:Ranorex.RanorexException">If capturing a screenshot of the element fails.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that (color image, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>)
            of the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:Ranorex.ImageNotFoundException">If the <paramref name="feature"/> could
            not be found.</exception>
        </member>
        <member name="M:Ranorex.Imaging.FindSingle(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Searches for the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/>.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <returns>The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <paramref name="options"/>).</returns>
            <exception cref="T:Ranorex.RanorexException">If capturing a screenshot of the element fails.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that (color image, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>)
            of the screenshot of the <paramref name="element"/>.</exception>
            <exception cref="T:Ranorex.ImageNotFoundException">If the <paramref name="feature"/> could
            not be found.</exception>
        </member>
        <member name="M:Ranorex.Imaging.FindSingle(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Searches for the specified <paramref name="feature"/> in the <paramref name="image"/>
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <returns>The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <see cref="P:Ranorex.Imaging.FindOptions.Default"/> options).</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the <paramref name="image"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
            <exception cref="T:Ranorex.ImageNotFoundException">If the <paramref name="feature"/> could
            not be found.</exception>
        </member>
        <member name="M:Ranorex.Imaging.FindSingle(System.Drawing.Bitmap,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Searches for the specified <paramref name="feature"/> in the <paramref name="image"/>.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <returns>The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <paramref name="options"/>).</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="feature"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="feature"/> is greater in size
            than the <paramref name="image"/>.</exception>
            <exception cref="T:System.ArgumentException">If the bitmap format of the <paramref name="feature"/>
            cannot be converted to that of the <paramref name="image"/>.</exception>
            <exception cref="T:Ranorex.ImageNotFoundException">If the <paramref name="feature"/> could
            not be found.</exception>
        </member>
        <member name="M:Ranorex.Imaging.TryFindSingle(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.Match@)">
            <summary>
            Tries to find the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/>
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <param name="match">The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <see cref="P:Ranorex.Imaging.FindOptions.Default"/> options), <c>null</c> if the search failed for
            any reason or no match was found.</param>
            <returns><c>True</c> if a match was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ranorex.Imaging.TryFindSingle(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,Ranorex.Imaging.Match@)">
            <summary>
            Tries to find the specified <paramref name="feature"/> in (a screenshot of) the
            <paramref name="element"/>.
            </summary>
            <param name="element">The element to make a screenshot of in which will be searched.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="match">The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <paramref name="options"/>), <c>null</c> if the search failed for
            any reason or no match was found.</param>
            <returns><c>True</c> if a match was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ranorex.Imaging.TryFindSingle(System.Drawing.Bitmap,System.Drawing.Bitmap,Ranorex.Imaging.Match@)">
            <summary>
            Tries to find the specified <paramref name="feature"/> in the <paramref name="image"/>
            using <see cref="P:Ranorex.Imaging.FindOptions.Default"/> <see cref="T:Ranorex.Imaging.FindOptions"/>.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <param name="match">The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <see cref="P:Ranorex.Imaging.FindOptions.Default"/> options), <c>null</c> if the search failed for
            any reason or no match was found.</param>
            <returns><c>True</c> if a match was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ranorex.Imaging.TryFindSingle(System.Drawing.Bitmap,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,Ranorex.Imaging.Match@)">
            <summary>
            Tries to find the specified <paramref name="feature"/> in the <paramref name="image"/>.
            </summary>
            <param name="image">The image to search in.</param>
            <param name="feature">The image to search for.</param>
            <param name="options">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="match">The first or best <see cref="T:Ranorex.Imaging.Match"/> found (as specified in the
            <paramref name="options"/>), <c>null</c> if the search failed for
            any reason or no match was found.</param>
            <returns><c>True</c> if a match was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ranorex.Imaging.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Crops the given image by the specified rectangle.
            </summary>
            <param name="image">An image.</param>
            <param name="cropRect">The bounds of the sub-image in <paramref name="image"/> to return.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double)">
            <summary>
            Resizes the input image.
            </summary>
            <param name="input">An image.</param>
            <param name="factor">The factor by which the image should be resized.</param>
            <returns>The resized image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If width or height of the output
            image are not positive.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Double,System.Double)">
            <summary>
            Resizes the input image.
            </summary>
            <param name="input">An image.</param>
            <param name="widthFactor">The factor by which the width of the image
            should be resized.</param>
            <param name="heightFactor">The factor by which the height of the image
            should be resized.</param>
            <returns>The resized image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If width or height of the output
            image are not positive.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Resize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resizes the input image.
            </summary>
            <param name="input">An image.</param>
            <param name="width">The width the image should be resized to.</param>
            <param name="height">The height the image should be resized to.</param>
            <returns>The resized image with the specified <paramref name="width"/>
            and <paramref name="height"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If width or height are not positive.</exception>
        </member>
        <member name="M:Ranorex.Imaging.Load(System.String)">
            <summary>
            Loads a bitmap file.
            </summary>
            <param name="filename">The filename of the bitmap.</param>
            <returns>The loaded bitmap.</returns>
            <exception cref="T:System.ArgumentException">If a bitmap cannot be loaded from the specified
            file.</exception>
        </member>
        <member name="M:Ranorex.Imaging.IsAllBlack(System.Drawing.Bitmap)">
            <summary>
            Determines whether the specified image is completely black.
            </summary>
            <param name="image">The image to check.</param>
            <returns><c>True</c> if the image is all black; <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Ranorex.CompressedImage">
            <summary>
            Represents an image where the image data is internally stored in a byte array, compressed
            according to the specified image format (PNG by default).
            </summary>
        </member>
        <member name="M:Ranorex.CompressedImage.#ctor(System.Drawing.Image)">
            <summary>
            Creates a new compressed PNG image out of a given image.
            </summary>
            <param name="image">The image to compress.</param>
        </member>
        <member name="M:Ranorex.CompressedImage.#ctor(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates a new compressed image out of a given image.
            </summary>
            <param name="image">The image to compress.</param>
            <param name="format">The image format to use for storage.</param>
        </member>
        <member name="M:Ranorex.CompressedImage.#ctor(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Int32)">
            <summary>
            Creates a new compressed image out of a given image.
            </summary>
            <param name="image">The image to compress.</param>
            <param name="format">The image format to use for storage.</param>
            <param name="quality">The quality to use for JPEG. Ignored otherwise.</param>
        </member>
        <member name="M:Ranorex.CompressedImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.CompressedImage"/> class from a base64 string.
            </summary>
            <param name="base64Data">The image data encoded in a base64 string.</param>
        </member>
        <member name="P:Ranorex.CompressedImage.Image">
            <summary>
            The reconstructed image from the compressed data.
            </summary>
        </member>
        <member name="P:Ranorex.CompressedImage.Guid">
            <summary>
            A unique ID identifying the image. The Guid is chosen randomly and not
            connected to the image content in any way.
            </summary>
        </member>
        <member name="M:Ranorex.CompressedImage.op_Implicit(Ranorex.CompressedImage)~System.Drawing.Bitmap">
            <summary>
            Implicitly casts a <see cref="T:Ranorex.CompressedImage"/> object to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="cImg">The compressed image.</param>
            <returns>Returns an <see cref="P:Ranorex.CompressedImage.Image"/> instance.</returns>
        </member>
        <member name="M:Ranorex.CompressedImage.Store(System.String)">
            <summary>
            Writes the compressed data to a file.
            </summary>
            <param name="fileName">The name of the file to write to (png extension recommended).</param>
        </member>
        <member name="M:Ranorex.CompressedImage.Clone">
            <summary>
            Creates a clone of this instance.
            </summary>
            <returns>A new instance with the same data.</returns>
        </member>
        <member name="M:Ranorex.CompressedImage.ToBase64String">
            <summary>
            Creates a Base64 string representation of this instance.
            </summary>
            <returns>A Base64 string representation.</returns>
        </member>
        <member name="T:Ranorex.Delay">
            <summary>
            Provides simple delay functionality which is automatically scaled by a configurable speed factor.
            </summary>
        </member>
        <member name="P:Ranorex.Delay.SpeedFactor">
            <summary>
            Gets or sets the speed factor. Set to positive infinity or zero to disable delays. Defaults is '1.0'.
            </summary>
            <value>The speed factor. Delays get reduced by that factor, e.g. a speed factor of 2 reduces delays to half their value.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is negative, NaN, or negative infinity.</exception>
        </member>
        <member name="M:Ranorex.Delay.Ms(System.Int32)">
            <summary>
            Delays execution for the specified number of milliseconds.
            </summary>
            <param name="milliseconds">The number of ms to delay.</param>
            <remarks>The delay time is scaled by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</remarks>
        </member>
        <member name="M:Ranorex.Delay.Ms(System.Int32,System.Boolean)">
            <summary>
            Delays execution for the specified number of milliseconds.
            </summary>
            <param name="milliseconds">The number of ms to delay.</param>
            <param name="scaleBySpeedFactor">If set to <c>true</c> the delay time is scaled
            by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</param>
        </member>
        <member name="M:Ranorex.Delay.Milliseconds(System.Int32)">
            <summary>
            Delays execution for the specified number of milliseconds.
            </summary>
            <param name="milliseconds">The number of ms to delay.</param>
            <remarks>The delay time is scaled by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</remarks>
        </member>
        <member name="M:Ranorex.Delay.Milliseconds(System.Int32,System.Boolean)">
            <summary>
            Delays execution for the specified number of milliseconds.
            </summary>
            <param name="milliseconds">The number of ms to delay.</param>
            <param name="scaleBySpeedFactor">If set to <c>true</c> the delay time is scaled
            by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</param>
        </member>
        <member name="M:Ranorex.Delay.Seconds(System.Double)">
            <summary>
            Delays execution for the specified number of seconds.
            </summary>
            <param name="seconds">The seconds.</param>
            <remarks>The delay time is scaled by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</remarks>
        </member>
        <member name="M:Ranorex.Delay.Seconds(System.Double,System.Boolean)">
            <summary>
            Delays execution for the specified number of seconds.
            </summary>
            <param name="seconds">The seconds.</param>
            <param name="scaleBySpeedFactor">If set to <c>true</c> the delay time is scaled
            by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</param>
        </member>
        <member name="M:Ranorex.Delay.Duration(Ranorex.Duration)">
            <summary>
            Delays execution for the specified duration.
            </summary>
            <param name="duration">The duration.</param>
            <remarks>The delay time is scaled by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</remarks>
        </member>
        <member name="M:Ranorex.Delay.Duration(Ranorex.Duration,System.Boolean)">
            <summary>
            Delays execution for the specified duration.
            </summary>
            <param name="duration">The duration.</param>
            <param name="scaleBySpeedFactor">If set to <c>true</c> the delay time is scaled
            by the current <see cref="P:Ranorex.Delay.SpeedFactor"/>.</param>
        </member>
        <member name="T:Ranorex.Duration">
            <summary>
            Represents a span of time.
            </summary>
            <remarks>
            This class facilitates creating objects that represent a span of time by
            providing initializers that take an <see cref="T:System.Int32"/> (regarded as milliseconds)
            or a <see cref="P:Ranorex.Duration.TimeSpan"/>.
            </remarks>
        </member>
        <member name="F:Ranorex.Duration.Zero">
            <summary>
            Represents the zero <see cref="T:Ranorex.Duration"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:Ranorex.Duration.MinValue">
            <summary>
            Represents the minimum <see cref="T:Ranorex.Duration"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:Ranorex.Duration.MaxValue">
            <summary>
            Represents the maximum <see cref="T:Ranorex.Duration"/> value. This field is read-only.
            </summary>
        </member>
        <member name="M:Ranorex.Duration.#ctor">
            <summary>
            Constructs a new instance and initializes it with the value of
            <see cref="F:Ranorex.Duration.Zero"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Duration.#ctor(System.TimeSpan)">
            <summary>
            Constructs a new instance and initializes it with the value of
            the given <see cref="P:Ranorex.Duration.TimeSpan"/>.
            </summary>
            <param name="timeSpan">A <see cref="P:Ranorex.Duration.TimeSpan"/> instance.</param>
        </member>
        <member name="M:Ranorex.Duration.#ctor(System.Int32)">
            <summary>
            Constructs a new instance and initializes it with the given number
            of milliseconds.
            </summary>
            <param name="milliseconds">The number of milliseconds to assign.</param>
        </member>
        <member name="P:Ranorex.Duration.TimeSpan">
            <summary>
            Gets a <see cref="P:Ranorex.Duration.TimeSpan"/> representation of this instance.
            </summary>
        </member>
        <member name="P:Ranorex.Duration.Milliseconds">
            <summary>
            Gets the number of milliseconds this instance represents.
            </summary>
        </member>
        <member name="M:Ranorex.Duration.Equals(Ranorex.Duration)">
            <summary>
            Indicates whether the current <see cref="T:Ranorex.Duration"/> is equal to another <see cref="T:Ranorex.Duration"/>.
            </summary>
            <param name="other">A <see cref="T:Ranorex.Duration"/> tom compare this instance with.</param>
            <returns><c>true</c> if the current instance is equal to the <paramref name="other"/> parameter;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.Equals(System.Object)">
            <summary>
            Returns true if the two objects are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>True if <paramref name="obj"/> is a <see cref="T:Ranorex.Duration"/> and
            represents the same span of time as the current instance.</returns>
        </member>
        <member name="M:Ranorex.Duration.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Ranorex.Duration.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
            <remarks>
            Calling this method is equivalent to calling <see cref="M:Ranorex.Duration.ToString(System.String,System.IFormatProvider)"/>
            with parameters (<c>null</c>, <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>).
            </remarks>
        </member>
        <member name="M:Ranorex.Duration.ToString(System.String)">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use or
            <c>null</c> to use the default format.</param>
            <returns>A string representation of this instance.</returns>
            <remarks>
            The following string values are valid for <paramref name="format"/>:
            <list type="table">
            <listheader>
                <term>Format String</term>
                <description>Description and Associated Properties</description>
            </listheader>
            <item>
                <term>g</term>
                <description>General format. Replaces the format string by <b>ms</b>, <b>s</b>,
                <b>m</b>, or <b>t</b> as appropriate regarding the value of this instance.</description>
            </item>
            <item>
                <term>ms</term>
                <description>Millisecond format.</description>
            </item>
            <item>
                <term>s</term>
                <description>Second format.</description>
            </item>
            <item>
                <term>h</term>
                <description>Hour format.</description>
            </item>
            <item>
                <term>d</term>
                <description>Day format.</description>
            </item>
            <item>
                <term>t</term>
                <description>Full format, equal to the format returned by <see cref="M:System.TimeSpan.ToString"/>.</description>
            </item>
            </list>
            If you use capital letters for the string format, the precision of the returned
            string representation is extended by three decimal digits.
            Adding '0' as a suffix will result in non-significant zeros to always be displayed, e.g. 'g0'.
            </remarks>
        </member>
        <member name="M:Ranorex.Duration.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use or
            <c>null</c> to use the default format.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use or <c>null</c>
            to obtain the format information from the current locale setting of the operating system.</param>
            <returns>A string representation of this instance.</returns>
            <remarks>
            The following string values are valid for <paramref name="format"/>:
            <list type="table">
            <listheader>
                <term>Format String</term>
                <description>Description and Associated Properties</description>
            </listheader>
            <item>
                <term>g</term>
                <description>General format. Replaces the format string by <b>ms</b>, <b>s</b>,
                <b>m</b>, or <b>t</b> as appropriate regarding the value of this instance.</description>
            </item>
            <item>
                <term>ms</term>
                <description>Millisecond format.</description>
            </item>
            <item>
                <term>s</term>
                <description>Second format.</description>
            </item>
            <item>
                <term>h</term>
                <description>Hour format.</description>
            </item>
            <item>
                <term>d</term>
                <description>Day format.</description>
            </item>
            <item>
                <term>t</term>
                <description>Full format, equal to the format returned by <see cref="M:System.TimeSpan.ToString"/>.</description>
            </item>
            </list>
            If you use capital letters for the string format, the precision of the returned
            string representation is extended by three decimal digits.
            Adding '0' as a suffix will result in non-significant zeros to always be displayed, e.g. 'g0'.
            </remarks>
        </member>
        <member name="M:Ranorex.Duration.CompareTo(Ranorex.Duration)">
            <summary>
            Compares the current duration with another duration object.
            </summary>
            <param name="other">A duration to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            <list type="table">
            <listheader>
                <term>Value</term>
                <description>Meaning</description>
            </listheader>
            <item>
                <term>Less than zero</term>
                <description>This instance is less than <paramref name="other"/>.</description>
            </item>
            <item>
                <term>Zero</term>
                <description>This instance is equal to <paramref name="other"/>.</description>
            </item>
            <item>
                <term>Greater than zero</term>
                <description>This instance is greater than <paramref name="other"/>.</description>
            </item>
            </list></returns>
        </member>
        <member name="M:Ranorex.Duration.CompareTo(System.Object)">
            <summary>
            Compares the current duration with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            <list type="table">
            <listheader>
                <term>Value</term>
                <description>Meaning</description>
            </listheader>
            <item>
                <term>Less than zero</term>
                <description>This instance is less than <paramref name="obj"/>.</description>
            </item>
            <item>
                <term>Zero</term>
                <description>This instance is equal to <paramref name="obj"/>.</description>
            </item>
            <item>
                <term>Greater than zero</term>
                <description>This instance is greater than <paramref name="obj"/>.</description>
            </item>
            </list></returns>
            <exception cref="T:System.ArgumentException">obj is not of type <see cref="T:Ranorex.Duration"/>.</exception>
        </member>
        <member name="M:Ranorex.Duration.Compare(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Compares two <see cref="T:Ranorex.Duration"/> objects and returns an indication of their relative values.
            </summary>
            <param name="d1">The first duration.</param>
            <param name="d2">The second duration.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            <list type="table">
            <listheader>
                <term>Value</term>
                <description>Meaning</description>
            </listheader>
            <item>
                <term>Less than zero</term>
                <description><paramref name="d1"/> is less than <paramref name="d2"/>.</description>
            </item>
            <item>
                <term>Zero</term>
                <description><paramref name="d1"/> is equal to <paramref name="d2"/>.</description>
            </item>
            <item>
                <term>Greater than zero</term>
                <description><paramref name="d1"/> is greater than <paramref name="d2"/>.</description>
            </item>
            </list></returns>
        </member>
        <member name="M:Ranorex.Duration.op_Implicit(Ranorex.Duration)~System.Int32">
            <summary>
            Returns the number of milliseconds represented by the <see cref="T:Ranorex.Duration"/> instance.
            </summary>
            <param name="duration">A <see cref="T:Ranorex.Duration"/> instance.</param>
            <returns>Milliseconds.</returns>
        </member>
        <member name="M:Ranorex.Duration.ToMilliseconds(Ranorex.Duration)">
            <summary>
            Returns the number of milliseconds represented by the <see cref="T:Ranorex.Duration"/> instance.
            </summary>
            <param name="duration">A <see cref="T:Ranorex.Duration"/> instance.</param>
            <returns>Milliseconds.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Implicit(System.Int32)~Ranorex.Duration">
            <summary>
            Returns a new <see cref="T:Ranorex.Duration"/> instance initialized by the milliseconds value.
            </summary>
            <param name="milliseconds">The number of milliseconds.</param>
            <returns>The new <see cref="T:Ranorex.Duration"/> instance.</returns>
        </member>
        <member name="M:Ranorex.Duration.FromMilliseconds(System.Int32)">
            <summary>
            Returns a new <see cref="T:Ranorex.Duration"/> instance initialized by the milliseconds value.
            </summary>
            <param name="milliseconds">The number of milliseconds.</param>
            <returns>The new <see cref="T:Ranorex.Duration"/> instance.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Implicit(Ranorex.Duration)~System.TimeSpan">
            <summary>
            Returns a <see cref="P:Ranorex.Duration.TimeSpan"/> value corresponding to the <see cref="T:Ranorex.Duration"/> instance.
            </summary>
            <param name="duration">A <see cref="T:Ranorex.Duration"/> instance.</param>
            <returns>A <see cref="P:Ranorex.Duration.TimeSpan"/> value.</returns>
        </member>
        <member name="M:Ranorex.Duration.ToTimeSpan(Ranorex.Duration)">
            <summary>
            Returns a <see cref="P:Ranorex.Duration.TimeSpan"/> value corresponding to the <see cref="T:Ranorex.Duration"/> instance.
            </summary>
            <param name="duration">A <see cref="T:Ranorex.Duration"/> instance.</param>
            <returns>A <see cref="P:Ranorex.Duration.TimeSpan"/> value.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Implicit(System.TimeSpan)~Ranorex.Duration">
            <summary>
            Returns a new <see cref="T:Ranorex.Duration"/> instance initialized by the <see cref="P:Ranorex.Duration.TimeSpan"/> value.
            </summary>
            <param name="timeSpan">The <see cref="P:Ranorex.Duration.TimeSpan"/> value.</param>
            <returns>The new <see cref="T:Ranorex.Duration"/> instance.</returns>
        </member>
        <member name="M:Ranorex.Duration.FromTimeSpan(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Ranorex.Duration"/> instance initialized by the <see cref="P:Ranorex.Duration.TimeSpan"/> value.
            </summary>
            <param name="timeSpan">The <see cref="P:Ranorex.Duration.TimeSpan"/> value.</param>
            <returns>The new <see cref="T:Ranorex.Duration"/> instance.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Equality(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Returns true if the two <see cref="T:Ranorex.Duration"/> instances are equal.
            </summary>
            <param name="d1">Duration 1.</param>
            <param name="d2">Duration 2.</param>
            <returns><c>True</c> if the two <see cref="T:Ranorex.Duration"/> instances are equal,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Inequality(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Returns true if the two <see cref="T:Ranorex.Duration"/> instances are not equal.
            </summary>
            <param name="d1">Duration 1.</param>
            <param name="d2">Duration 2.</param>
            <returns><c>True</c> if the two <see cref="T:Ranorex.Duration"/> instances are not equal,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Multiply(Ranorex.Duration,System.Double)">
            <summary>
            Multiplies a <paramref name="duration"/> by the specified <paramref name="factor"/>.
            </summary>
            <param name="duration">A duration.</param>
            <param name="factor">The factor to multiply the duration with.</param>
            <returns>
            The duration multiplied by the specified factor.
            </returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThan(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThan(System.Int32,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThan(System.TimeSpan,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThan(Ranorex.Duration,System.Int32)">
            <summary>
            Returns whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThan(Ranorex.Duration,System.TimeSpan)">
            <summary>
            Returns whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThan(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThan(System.Int32,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThan(System.TimeSpan,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThan(Ranorex.Duration,System.Int32)">
            <summary>
            Returns whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThan(Ranorex.Duration,System.TimeSpan)">
            <summary>
            Returns whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThanOrEqual(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThanOrEqual(System.Int32,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThanOrEqual(System.TimeSpan,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThanOrEqual(Ranorex.Duration,System.Int32)">
            <summary>
            Returns whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_LessThanOrEqual(Ranorex.Duration,System.TimeSpan)">
            <summary>
            Returns whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThanOrEqual(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThanOrEqual(System.Int32,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThanOrEqual(System.TimeSpan,Ranorex.Duration)">
            <summary>
            Returns whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThanOrEqual(Ranorex.Duration,System.Int32)">
            <summary>
            Returns whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_GreaterThanOrEqual(Ranorex.Duration,System.TimeSpan)">
            <summary>
            Returns whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns><c>True</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Addition(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Adds two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of adding <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Addition(System.Int32,Ranorex.Duration)">
            <summary>
            Adds two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of adding <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Addition(System.TimeSpan,Ranorex.Duration)">
            <summary>
            Adds two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of adding <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Addition(Ranorex.Duration,System.Int32)">
            <summary>
            Adds two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of adding <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Addition(Ranorex.Duration,System.TimeSpan)">
            <summary>
            Adds two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of adding <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Subtraction(Ranorex.Duration,Ranorex.Duration)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Subtraction(System.Int32,Ranorex.Duration)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Subtraction(System.TimeSpan,Ranorex.Duration)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Subtraction(Ranorex.Duration,System.Int32)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.op_Subtraction(Ranorex.Duration,System.TimeSpan)">
            <summary>
            Subtracts two values.
            </summary>
            <param name="left">A value.</param>
            <param name="right">Another value.</param>
            <returns>The result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.Copy(Ranorex.Duration)">
            <summary>
            Returns a copy of the specified duration.
            </summary>
            <param name="d">A duration.</param>
            <returns>A copy of duration <paramref name="d"/>.</returns>
        </member>
        <member name="M:Ranorex.Duration.Parse(System.String)">
            <summary>
            Parses the given <see cref="T:System.String"/> and returns a new <see cref="T:Ranorex.Duration"/> instance.
            </summary>
            <param name="durationString">A string representing a duration.</param>
            <returns>A new <see cref="T:Ranorex.Duration"/> corresponding to the given <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="durationString"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">If <paramref name="durationString"/> has an invalid format.</exception>
        </member>
        <member name="M:Ranorex.Duration.TryParse(System.String,Ranorex.Duration@)">
            <summary>
            Tries parsing the given <see cref="T:System.String"/> to a <see cref="T:Ranorex.Duration"/> instance.
            </summary>
            <param name="durationString">A string representing a duration.</param>
            <param name="duration">When this method returns, contains a <see cref="T:Ranorex.Duration"/> instance
            if parsing succeeded, <c>null</c> otherwise.</param>
            <returns><c>True</c> if parsing succeeded, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Ranorex.Duration.DurationConverter">
            <summary>
            Converts from <see cref="T:Ranorex.Duration"/> to <see cref="T:System.String"/> and vice versa.
            </summary>
        </member>
        <member name="F:Ranorex.Duration.DurationConverter.CustomStandardValues">
            <summary>
            A collection of standard and custom <see cref="T:Ranorex.Duration"/> values.
            </summary>
        </member>
        <member name="M:Ranorex.Duration.DurationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns <c>true</c> for <see cref="T:System.String"/> type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns><c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Duration.DurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Creates a <see cref="T:Ranorex.Duration"/> instance from a <see cref="T:System.String"/>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>A <see cref="T:Ranorex.Duration"/> that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Ranorex.Duration.DurationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Ranorex.Duration.DurationConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets standard <see cref="T:Ranorex.Duration"/> values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>A set of default <see cref="T:Ranorex.Duration"/> values.</returns>
        </member>
        <member name="M:Ranorex.Duration.DurationConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns <c>true</c>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="T:Ranorex.KeyEventHandler">
            <summary>
            Represents the method that will handle the events of the <see cref="T:Ranorex.Keyboard"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Ranorex.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Ranorex.KeyEventArgs">
            <summary>
            Provides data for the events of the <see cref="T:Ranorex.Keyboard"/> class.
            </summary>
        </member>
        <member name="M:Ranorex.KeyEventArgs.#ctor(System.Windows.Forms.Keys,System.Int32,System.Boolean,System.DateTime,Ranorex.Keyboard.ModifierState)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="keyData">A <see cref="T:System.Windows.Forms.Keys"/> representing the key that was pressed,
            combined with any modifier flags that indicate which CTRL, SHIFT, and ALT keys were pressed
            at the same time. Possible values are obtained be applying the bitwise OR (|) operator
            to constants from the <see cref="T:System.Windows.Forms.Keys"/> enumeration.</param>
            <param name="scanCode">The hardware scan code of the key.</param>
            <param name="simulated">A value indicating whether the event has been simulated or issued because of a physical
            keyboard action.</param>
            <param name="modifierState">Specifies all modifiers for the key event.</param>
            <param name="time">The time the event was raised at.</param>
        </member>
        <member name="P:Ranorex.KeyEventArgs.Simulated">
            <summary>
            Gets a value indicating whether the event has been simulated or issued because of a physical
            keyboard action.
            </summary>
        </member>
        <member name="P:Ranorex.KeyEventArgs.ScanCode">
            <summary>
            Gets the hardware scan code of the key that raised this event.
            </summary>
        </member>
        <member name="P:Ranorex.KeyEventArgs.Time">
            <summary>
            Gets the time the event was raised at.
            </summary>
        </member>
        <member name="T:Ranorex.Keyboard">
            <summary>
            Provides keyboard actions and events.
            </summary>
        </member>
        <member name="F:Ranorex.Keyboard.DefaultScanCode">
            <summary>
            Specify this value if you want to use the default hardware scan code corresponding
            to a specified virtual key code (see <see cref="T:System.Windows.Forms.Keys"/>).
            </summary>
        </member>
        <member name="M:Ranorex.Keyboard.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="E:Ranorex.Keyboard.KeyUp">
            <summary>
            Occurs when a key is released.
            </summary>
        </member>
        <member name="E:Ranorex.Keyboard.KeyDown">
            <summary>
            Occurs when a key is pressed or hold down.
            </summary>
        </member>
        <member name="P:Ranorex.Keyboard.Enabled">
            <summary>
            Gets or sets a value indicating whether physical keyboard actions are enabled.
            </summary>
            <remarks>
            If the keyboard is disabled, physical keyboard actions will be ignored, i.e. they are not passed
            on to the system. However, the <see cref="T:Ranorex.Keyboard"/> events (like <see cref="E:Ranorex.Keyboard.KeyDown"/>) will
            still be raised with the <see cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress"/> property of the event
            arguments set to <c>true</c>. To re-enable specific keyboard events, set the
            <see cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress"/> of the event arguments to <c>false</c>.
            </remarks>
        </member>
        <member name="P:Ranorex.Keyboard.CharacterMappingEnabled">
            <summary>
            Gets or sets a value whether Unicode characters are tried to be mapped to
            virtual keyboard inputs.
            </summary>
            <value><c>True</c> to enable Unicode character mapping, <c>false</c> to disable.
            Default is <c>true</c>.</value>
            <remarks>
            If this property is <c>true</c>, in the keyboard methods that take Unicode characters as input
            the Unicode characters are tried to be mapped to virtual keyboard inputs instead of being
            directly send to the system as Unicode character input.
            <para>
            If you are working with multiple input locales at the same time, it is usually better to
            turn character mapping off, i.e. to set this property to <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Ranorex.Keyboard.DefaultKeyPressTime">
            <summary>
            Gets or sets the default time for a key press, i.e. the time elapsed between a
            key being pressed (<see cref="E:Ranorex.Keyboard.KeyDown"/> event) and released (<see cref="E:Ranorex.Keyboard.KeyUp"/> event) again.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is negative.</exception>
        </member>
        <member name="P:Ranorex.Keyboard.AbortKey">
            <summary>
            Gets or sets a key-modifier combination that aborts the current thread if pressed.
            </summary>
            <remarks>
            If the abort key is pressed, the thread that set the <see cref="P:Ranorex.Keyboard.AbortKey"/> is aborted;
            i.e. a <see cref="T:System.Threading.ThreadAbortException"/> is raised in the thread that set the
            <see cref="P:Ranorex.Keyboard.AbortKey"/>.
            </remarks>
        </member>
        <member name="P:Ranorex.Keyboard.PauseKey">
            <summary>
            Gets or sets a key-modifier combination that pauses or resumes the current test execution if pressed.
            </summary>
        </member>
        <member name="M:Ranorex.Keyboard.ToKey(System.String)">
            <summary>
            Converts the specified string representation (see <see cref="M:Ranorex.Keyboard.ToString(System.Windows.Forms.Keys)"/>)
            to a <see cref="T:System.Windows.Forms.Keys"/> value.
            </summary>
            <param name="key">The string representation of a key.</param>
            <returns>The key value.</returns>
            <exception cref="T:System.ArgumentException">If the string representation of the key is invalid.</exception>
        </member>
        <member name="M:Ranorex.Keyboard.ToString(System.Windows.Forms.Keys)">
            <summary>
            Returns a string representation of the specified key.
            </summary>
            <param name="key">A key.</param>
            <returns>A string representation of the key.</returns>
        </member>
        <member name="M:Ranorex.Keyboard.Set(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Sets the state of the specified key to either pressed/down or released/up.
            </summary>
            <param name="keyCode">The key.</param>
            <param name="down"><c>True</c> to press the key, <c>false</c> to release it.</param>
            <remarks>
            This method does not consider modifier flags (like <see cref="F:System.Windows.Forms.Keys.Control"/>
            or <see cref="F:System.Windows.Forms.Keys.Shift"/>) in the <paramref name="keyCode"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Set(System.Windows.Forms.Keys,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the state of the specified key to either pressed/down or released/up.
            </summary>
            <param name="key">The key.</param>
            <param name="down"><c>True</c> to press the key, <c>false</c> to release it.</param>
            <param name="scanCode">The hardware scan code for the key. Specify <see cref="F:Ranorex.Keyboard.DefaultScanCode"/>
            to use the default scan code for the specified virtual <paramref name="key"/>.</param>
            <param name="setModifiers">A value specifying whether to set the modifiers specified
            in the <paramref name="key"/>.</param>
        </member>
        <member name="M:Ranorex.Keyboard.Set(System.Char,System.Boolean)">
            <summary>
            Sets the state of the key associated with the specified character to either
            pressed/down or released/up.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="down"><c>True</c> to press the key, <c>false</c> to release it.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released. The original
            state of these modifier keys is restored by this method.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Set(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Sets the state of the key associated with the specified character to either
            pressed/down or released/up.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="down"><c>True</c> to press the key, <c>false</c> to release it.</param>
            <param name="resetModifiers"><c>True</c> to reset the state of modifier keys (e.g. the
            <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to the original state before the call
            to this method.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Down(System.Windows.Forms.Keys)">
            <summary>
            Sets the state of the specified key to pressed/down.
            </summary>
            <param name="keyCode">The key.</param>
            <remarks>
            This method does not consider modifier flags (like <see cref="F:System.Windows.Forms.Keys.Control"/>
            or <see cref="F:System.Windows.Forms.Keys.Shift"/>) in the <paramref name="keyCode"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Down(System.Windows.Forms.Keys,System.Int32,System.Boolean)">
            <summary>
            Sets the state of the specified key to pressed/down.
            </summary>
            <param name="key">The key.</param>
            <param name="scanCode">The hardware scan code for the key. Specify <see cref="F:Ranorex.Keyboard.DefaultScanCode"/>
            to use the default scan code for the specified virtual <paramref name="key"/>.</param>
            <param name="setModifiers">A value specifying whether to set the modifiers specified
            in the <paramref name="key"/>.</param>
        </member>
        <member name="M:Ranorex.Keyboard.Up(System.Windows.Forms.Keys)">
            <summary>
            Sets the state of the specified key to released/up.
            </summary>
            <param name="keyCode">The key.</param>
            <remarks>
            This method does not consider modifier flags (like <see cref="F:System.Windows.Forms.Keys.Control"/>
            or <see cref="F:System.Windows.Forms.Keys.Shift"/>) in the <paramref name="keyCode"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Up(System.Windows.Forms.Keys,System.Int32,System.Boolean)">
            <summary>
            Sets the state of the specified key to released/up.
            </summary>
            <param name="key">The key.</param>
            <param name="scanCode">The hardware scan code for the key. Specify <see cref="F:Ranorex.Keyboard.DefaultScanCode"/>
            to use the default scan code for the specified virtual <paramref name="key"/>.</param>
            <param name="setModifiers">A value specifying whether to set the modifiers specified
            in the <paramref name="key"/>.</param>
        </member>
        <member name="M:Ranorex.Keyboard.Down(System.Char)">
            <summary>
            Sets the state of the key associated with the specified character to pressed/down.
            </summary>
            <param name="character">A character associated with a key.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Up(System.Char)">
            <summary>
            Sets the state of the key associated with the specified character to released/up.
            </summary>
            <param name="character">A character associated with a key.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released. The original
            state of these modifier keys is restored by this method.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Down(System.Char,System.Boolean)">
            <summary>
            Sets the state of the key associated with the specified character to pressed/down.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="resetModifiers"><c>True</c> to reset the state of modifier keys (e.g. the
            <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to the original state before the call
            to this method.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Up(System.Char,System.Boolean)">
            <summary>
            Sets the state of the key associated with the specified character to released/up.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="resetModifiers"><c>True</c> to reset the state of modifier keys (e.g. the
            <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to the original state before the call
            to this method.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Windows.Forms.Keys)">
            <summary>
            Presses the specified key and releases it again.
            </summary>
            <param name="keyCode">The key.</param>
            <remarks>
            This method does not consider modifier flags (like <see cref="F:System.Windows.Forms.Keys.Control"/>
            or <see cref="F:System.Windows.Forms.Keys.Shift"/>) in the <paramref name="keyCode"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Windows.Forms.Keys,Ranorex.Duration)">
            <summary>
            Presses the specified key and releases it again after the specified time.
            </summary>
            <param name="keyCode">The key.</param>
            <param name="keyPressTime">The time between pressing and releasing the key.</param>
            <remarks>
            This method does not consider modifier flags (like <see cref="F:System.Windows.Forms.Keys.Control"/>
            or <see cref="F:System.Windows.Forms.Keys.Shift"/>) in the <paramref name="keyCode"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Windows.Forms.Keys,Ranorex.Duration,System.Int32)">
            <summary>
            Presses and releases the specified key for the specified number of times.
            </summary>
            <param name="keyCode">The key.</param>
            <param name="keyPressTime">The time between pressing and releasing the key.</param>
            <param name="times">The number of times to press the key.</param>
            <remarks>
            This method does not consider modifier flags (like <see cref="F:System.Windows.Forms.Keys.Control"/>
            or <see cref="F:System.Windows.Forms.Keys.Shift"/>) in the <paramref name="keyCode"/>.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Windows.Forms.Keys,System.Int32,Ranorex.Duration,System.Int32,System.Boolean)">
            <summary>
            Presses and releases the specified key for the specified number of times.
            </summary>
            <param name="key">The key.</param>
            <param name="keyPressTime">The time between pressing and releasing the key.</param>
            <param name="times">The number of times to press the key.</param>
            <param name="scanCode">The hardware scan code for the key. Specify <see cref="F:Ranorex.Keyboard.DefaultScanCode"/>
            to use the default scan code for the specified virtual <paramref name="key"/>.</param>
            <param name="setModifiers">A value specifying whether to set the modifiers specified
            in the <paramref name="key"/>.</param>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Char)">
            <summary>
            Presses the key associated with the specified character and releases it again.
            </summary>
            <param name="character">A character associated with a key.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released. The original
            state of these modifier keys is restored by this method.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Char,Ranorex.Duration)">
            <summary>
            Presses the key associated with the specified character and releases it again
            after the specified time.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="keyPressTime">The time between pressing and releasing the key.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released. The original
            state of these modifier keys is restored by this method.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Char,System.Boolean)">
            <summary>
            Presses the key associated with the specified character and releases it again.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="resetModifiers"><c>True</c> to reset the state of modifier keys (e.g. the
            <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to the original state before the call
            to this method.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Char,Ranorex.Duration,System.Int32)">
            <summary>
            Presses and releases the key associated with the specified character
            for the specified number of times.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="keyPressTime">The time between pressing and releasing the key.</param>
            <param name="times">The number of times to press the key.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released. The original
            state of these modifier keys is restored by this method.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Char,Ranorex.Duration,System.Boolean)">
            <summary>
            Presses the key associated with the specified character and releases it again
            after the specified time.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="keyPressTime">The time between pressing and releasing the key.</param>
            <param name="resetModifiers"><c>True</c> to reset the state of modifier keys (e.g. the
            <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to the original state before the call
            to this method.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.Char,Ranorex.Duration,System.Int32,System.Boolean)">
            <summary>
            Presses and releases the key associated with the specified character
            for the specified number of times.
            </summary>
            <param name="character">A character associated with a key.</param>
            <param name="keyPressTime">The time between pressing and releasing the key.</param>
            <param name="times">The number of times to press the key.</param>
            <param name="resetModifiers"><c>True</c> to reset the state of modifier keys (e.g. the
            <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to the original state before the call
            to this method.</param>
            <remarks>
            This method may cause modifier keys (like <see cref="F:System.Windows.Forms.Keys.ControlKey"/>
            or <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>) to be pressed or released.
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.EscapeSequence(System.String)">
            <summary>
            Replaces escape characters in <paramref name="sequence"/> by their
            escaped representation to be used with the <see cref="M:Ranorex.Keyboard.Press(System.String)"/> method.
            </summary>
            <param name="sequence">An unescaped sequence of characters.</param>
            <returns>An escaped sequence of characters.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sequence"/> is a
            <c>null</c> reference.</exception>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.String,Ranorex.Duration)">
            <summary>
            Presses the keys specified by <paramref name="sequence"/>.
            </summary>
            <param name="sequence">A sequence of characters and escape groups
            that specify the keys to press.</param>
            <param name="keyPressTime">The key press time.</param>
            <remarks>
            Each key is represented by a single character or an escape group. To specify a single
            keyboard character, use the character itself (e.g. use "aBc" to press the keys A, B+Shift,
            and C after another). Only the '{' character has a special meaning and needs to be escaped
            by preceding it with another '{' (specify "{{" to issue a '{' key press).
            <para>Escape groups, signaled by braces "{}", may be used to produce a key action
            with any of the keys specified by the <see cref="T:System.Windows.Forms.Keys"/> enumeration.
            "{Z}" means that the 'z' key should be pressed, and "{return}" or "{enter}" that the
            Return key is to be pressed.</para>
                <para>
            Additionally, in an escape group you can specify a modifier that determines whether the key
            should be hold down (e.g. {CONTROL down}), released (e.g. {shift up}), or pressed a number
            of times (e.g. {z 3}). In an escape group, key name and modifier must be separated by
            a single shift character.
            </para>
            <para>The keys <see cref="F:System.Windows.Forms.Keys.A"/> to <see cref="F:System.Windows.Forms.Keys.Z"/> set the key
            modifiers (ALT, CTRL, SHIFT) and in particular the shift key depending on their case, even
            if used in an escape group. If these keys should not modify the shift key state, wrap them
            into an escape group and add "key" to the character, e.g. "{Rkey}"
            to press the R key without changing the shift key state.</para>
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(System.String)">
            <summary>
            Presses the keys specified by <paramref name="sequence"/>.
            </summary>
            <param name="sequence">A sequence of characters and escape groups
            that specify the keys to press.</param>
            <remarks>
            Each key is represented by a single character or an escape group. To specify a single
            keyboard character, use the character itself (e.g. use "aBc" to press the keys A, B+Shift,
            and C after another). Only the '{' character has a special meaning and needs to be escaped
            by preceding it with another '{' (specify "{{" to issue a '{' key press).
            <para>Escape groups, signaled by braces "{}", may be used to produce a key action
            with any of the keys specified by the <see cref="T:System.Windows.Forms.Keys"/> enumeration.
            "{Z}" means that the 'z' key should be pressed, and "{return}" or "{enter}" that the
            Return key is to be pressed.</para>
            <para>
            Additionally, in an escape group you can specify a modifier that determines whether the key
            should be hold down (e.g. {CONTROL down}), released (e.g. {shift up}), or pressed a number
            of times (e.g. {z 3}). In an escape group, key name and modifier must be separated by
            a single shift character.
            </para>
            <para>The keys <see cref="F:System.Windows.Forms.Keys.A"/> to <see cref="F:System.Windows.Forms.Keys.Z"/> set the key
            modifiers (ALT, CTRL, SHIFT) and in particular the shift key depending on their case, even
            if used in an escape group. If these keys should not modify the shift key state, wrap them
            into an escape group and add "key" to the character, e.g. "{Rkey}"
            to press the R key without changing the shift key state.</para>
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(Ranorex.Core.Element,System.String,Ranorex.Duration)">
            <summary>
            Presses the keys specified by <paramref name="sequence"/>.
            </summary>
            <param name="focusTarget">The element to set the focus to, if possible, before entering the sequence.</param>
            <param name="sequence">A sequence of characters and escape groups
            that specify the keys to press.</param>
            <param name="keyPressTime">The key press time.</param>
            <remarks>
            Each key is repesented by a single character or an escape group. To specify a single
            keyboard character, use the character itself (e.g. use "aBc" to press the keys A, B+Shift,
            and C after another). Only the '{' character has a special meaning and needs to be escaped
            by preceding it with another '{' (specify "{{" to issue a '{' key press).
            <para>Escape groups, signalled by braces "{}", may be used to produce a key action
            with any of the keys specified by the <see cref="T:System.Windows.Forms.Keys"/> enumeration.
            "{Z}" means that the 'z' key should be pressed, and "{return}" or "{enter}" that the
            Return key is to be pressed.</para>
                <para>
            Additionally, in an escape group you can specify a modifier that determines whether the key
            should be hold down (e.g. {CONTROL down}), released (e.g. {shift up}), or pressed a number
            of times (e.g. {z 3}). In an escape group, key name and modifier must be separated by
            a single shift character.
            </para>
            <para>The keys <see cref="F:System.Windows.Forms.Keys.A"/> to <see cref="F:System.Windows.Forms.Keys.Z"/> set the key
            modifiers (ALT, CTRL, SHIFT) and in particular the shift key depending on their case, even
            if used in an escape group. If these keys should not modify the shift key state, wrap them
            into an escape group and add "key" to the character, e.g. "{Rkey}"
            to press the R key without changing the shift key state.</para>
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.Press(Ranorex.Core.Element,System.String)">
            <summary>
            Presses the keys specified by <paramref name="sequence"/>.
            </summary>
            <param name="focusTarget">The element to set the focus to, if possible, before entering the sequence.</param>
            <param name="sequence">A sequence of characters and escape groups
            that specify the keys to press.</param>
            <remarks>
            Each key is repesented by a single character or an escape group. To specify a single
            keyboard character, use the character itself (e.g. use "aBc" to press the keys A, B+Shift,
            and C after another). Only the '{' character has a special meaning and needs to be escaped
            by preceding it with another '{' (specify "{{" to issue a '{' key press).
            <para>Escape groups, signalled by braces "{}", may be used to produce a key action
            with any of the keys specified by the <see cref="T:System.Windows.Forms.Keys"/> enumeration.
            "{Z}" means that the 'z' key should be pressed, and "{return}" or "{enter}" that the
            Return key is to be pressed.</para>
            <para>
            Additionally, in an escape group you can specify a modifier that determines whether the key
            should be hold down (e.g. {CONTROL down}), released (e.g. {shift up}), or pressed a number
            of times (e.g. {z 3}). In an escape group, key name and modifier must be separated by
            a single shift character.
            </para>
            <para>The keys <see cref="F:System.Windows.Forms.Keys.A"/> to <see cref="F:System.Windows.Forms.Keys.Z"/> set the key
            modifiers (ALT, CTRL, SHIFT) and in particular the shift key depending on their case, even
            if used in an escape group. If these keys should not modify the shift key state, wrap them
            into an escape group and add "key" to the character, e.g. "{Rkey}"
            to press the R key without changing the shift key state.</para>
            </remarks>
        </member>
        <member name="M:Ranorex.Keyboard.GetSequenceFromKeyEvents(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{Ranorex.KeyEventArgs,System.Boolean}})">
            <summary>
            Gets a string that can be passed to <see cref="M:Ranorex.Keyboard.Press(System.String)"/> from a list of key events.
            </summary>
            <param name="keyEvents">A list of key events. Each key event is a pair of <see cref="T:Ranorex.KeyEventArgs"/>
            and a <see cref="T:System.Boolean"/> that specifies whether the key was pressed (<c>true</c>)
            or released (<c>false</c>).</param>
            <returns>The key sequence represented as a string.</returns>
            <remarks>The default <c>upDownEventRearrangeMaxDistance</c> is used.</remarks>
        </member>
        <member name="M:Ranorex.Keyboard.GetSequenceFromKeyEvents(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{Ranorex.KeyEventArgs,System.Boolean}},System.Int32)">
            <summary>
            Gets a string that can be passed to <see cref="M:Ranorex.Keyboard.Press(System.String)"/> from a list of key events.
            </summary>
            <param name="keyEvents">A list of key events. Each key event is a pair of <see cref="T:Ranorex.KeyEventArgs"/>
            and a <see cref="T:System.Boolean"/> that specifies whether the key was pressed (<c>true</c>)
            or released (<c>false</c>).</param>
            <param name="upDownEventRearrangeMaxDistance">The maximum distance between up and down
            events of a single key to be merged into a key press.</param>
            <returns>The key sequence represented as a string.</returns>
        </member>
        <member name="M:Ranorex.Keyboard.PrepareFocus(Ranorex.Core.Element)">
            <summary>
            Tries to set the focus to the specified element if necessary and also tries
            to make the element visible (if EnsureVisible is specified).
            </summary>
            <param name="focusTarget">The target element to set the focus to.</param>
        </member>
        <member name="M:Ranorex.Keyboard.Parse(System.String)">
            <summary>
            Parses the given sequence (see <see cref="M:Ranorex.Keyboard.Press(System.String)"/> for available
            tokens) and returns a list of actions that can be passed to <see cref="M:Ranorex.Keyboard.Execute(System.Collections.Generic.IList{Ranorex.Keyboard.KeyboardAction},Ranorex.Duration)"/>.
            </summary>
        </member>
        <member name="M:Ranorex.Keyboard.Execute(System.Collections.Generic.IList{Ranorex.Keyboard.KeyboardAction},Ranorex.Duration)">
            <summary>
            Executes the given actions.
            </summary>
        </member>
        <member name="T:Ranorex.Keyboard.KeyboardAction">
            <summary>
            An action for a single character or key.
            </summary>
            <remarks>
            If the <see cref="P:Ranorex.Keyboard.KeyboardAction.Character"/> property is set, the character methods from the keyboard
            class are used (the value set to <see cref="P:Ranorex.Keyboard.KeyboardAction.Key"/> has no meaning then).
            If <see cref="P:Ranorex.Keyboard.KeyboardAction.PressedTimes"/> is set to a value greater than zero,
            the specified character or key, respectively, is pressed the number of times (the
            value set to <see cref="P:Ranorex.Keyboard.KeyboardAction.Down"/> has no meaning then).
            If <see cref="P:Ranorex.Keyboard.KeyboardAction.SetModifiers"/> is <c>true</c> and <see cref="P:Ranorex.Keyboard.KeyboardAction.Character"/> is <c>null</c>,
            modifier flags in the <see cref="P:Ranorex.Keyboard.KeyboardAction.Key"/> are also set.
            </remarks>
        </member>
        <member name="P:Ranorex.ImeEventArgs.Time">
            <summary>
            Gets the time at which the event was raised.
            </summary>
        </member>
        <member name="T:Ranorex.Location">
            <summary>
            Represents an abstract, relative location within an element or on the screen.
            </summary>
            <remarks>
            A location is a relative offset inside an element. It can either be specified by a fixed
            pixel value (x,y), a percentage of an element's height or width (e.g. <see cref="P:Ranorex.Location.Center"/>,
            <see cref="P:Ranorex.Location.UpperRight"/>), or an image that should be found inside the element.
            </remarks>
        </member>
        <member name="P:Ranorex.Location.UpperLeft">
            <summary>
            Represents the upper left corner of an element.
            </summary>
            <value>The upper left.</value>
        </member>
        <member name="P:Ranorex.Location.UpperCenter">
            <summary>
            Represents the upper center location of an element.
            </summary>
            <value>The upper center.</value>
        </member>
        <member name="P:Ranorex.Location.UpperRight">
            <summary>
            Represents the upper right corner of an element.
            </summary>
            <value>The upper right.</value>
        </member>
        <member name="P:Ranorex.Location.CenterLeft">
            <summary>
            Represents the left center location of an element.
            </summary>
            <value>The center left.</value>
        </member>
        <member name="P:Ranorex.Location.Center">
            <summary>
            Represents the center of an element.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Ranorex.Location.CenterRight">
             <summary>
            Represents the center right location of an element.
             </summary>
             <value>The center right.</value>
        </member>
        <member name="P:Ranorex.Location.LowerLeft">
            <summary>
            Represents the lower left corner of an element.
            </summary>
            <value>The lower left.</value>
        </member>
        <member name="P:Ranorex.Location.LowerCenter">
            <summary>
            Represents the lower center location of an element.
            </summary>
            <value>The lower center.</value>
        </member>
        <member name="P:Ranorex.Location.LowerRight">
             <summary>
            Represents the lower right corner of an element.
             </summary>
             <value>The lower right.</value>
        </member>
        <member name="P:Ranorex.Location.StandardValues">
            <summary>
            Gets an array of the standard locations.
            </summary>
        </member>
        <member name="M:Ranorex.Location.Clone">
            <summary>
            Creates a new instance that is equal to this instance.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="M:Ranorex.Location.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class. This is equivalent to using 'Location.Center'.
            </summary>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class, using a pixel value.
            </summary>
            <param name="fixedLocation">The fixed location, in pixels, relative to the upper left corner of the element.</param>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class, using a pixel value.
            </summary>
            <param name="dx">The horizontal distance from the upper left corner of the element in pixels.</param>
            <param name="dy">The vertical distance from the upper left corner of the element in pixels.</param>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class, using a proportional position.
            </summary>
            <param name="proportionalLocation">The proportional location. The <see cref="P:System.Drawing.PointF.X"/> value
            represents the horizontal location within an element proportional to its width, the
            <see cref="P:System.Drawing.PointF.Y"/> value the vertical location within an element proportional to its height.</param>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class, using a proportional position.
            </summary>
            <param name="xFactor">A value between 0 and 1 representing the horizontal location within
            an element proportional to its width.</param>
            <param name="yFactor">A value between 0 and 1 representing the vertical location within
            an element proportional to its height.</param>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class specifying an image to search for.
            </summary>
            <param name="feature">The image that should be found inside the element. The location
            refers to the center of the image found in the element.</param>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Drawing.Bitmap,Ranorex.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class specifying an image to search for
            and a relative location inside the found image.
            </summary>
            <param name="feature">The image that should be found inside the element. The location
            refers to the inner location inside the image found in the element.</param>
            <param name="locationInFeature">Specifies the location inside the image found in the
            element that this location refers to.</param>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class specifying an image to search for
            using the specified options.
            </summary>
            <param name="feature">The image that should be found inside the element. The location
            refers to the center of the image found in the element.</param>
            <param name="featureOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines
            the options for the search.</param>
        </member>
        <member name="M:Ranorex.Location.#ctor(System.Drawing.Bitmap,Ranorex.Location,Ranorex.Imaging.FindOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Location"/> class using an image to search for
            and a relative location inside the found image.
            </summary>
            <param name="feature">The image that should be found inside the element. The location
            refers to the inner location inside the image found in the element.</param>
            <param name="locationInFeature">Specifies the location inside the image found in the
            element that this location refers to.</param>
            <param name="featureOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines
            the options for the search.</param>
        </member>
        <member name="M:Ranorex.Location.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Ranorex.Location"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <remarks>The string created by this method is always a valid location string.</remarks>
        </member>
        <member name="M:Ranorex.Location.Parse(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Ranorex.Location"/> class from its string representation.
            </summary>
            <param name="locationString">The location string. Supports various different formats.</param>
            <example>
            Examples for location strings: <br/>
            '1;2' or '1,2' results in a fixed relative location in pixels.<br/>
            '0.4;0.6' or '.3,.7' results in a location proportional to the elements size.<br/>
            Use of the names of location presets (e.g. 'center') is also permitted.
            </example>
            <returns>The new instance.</returns>
            <exception cref="T:System.FormatException">If the string representation is not valid.</exception>
        </member>
        <member name="M:Ranorex.Location.TryParse(System.String,Ranorex.Location@)">
            <summary>
            Tries to creates a new instance of the <see cref="T:Ranorex.Location"/> class from its string representation.
            </summary>
            <param name="locationString">The location string. Supports various different formats.</param>
            <param name="location">When this method returns, contains the new <see cref="T:Ranorex.Location"/> instance
            if conversion was successful, otherwise <c>null</c>.</param>
            <example>
            Examples for location strings: <br/>
            '1;2' or '1,2' results in a fixed relative location in pixels.<br/>
            '0.4;0.6' or '.3,.7' results in a location proportional to the elements size.<br/>
            Use of the names of location presets (e.g. 'center') is also permitted.
            </example>
            <returns><c>True</c> if the conversion was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Location.op_Implicit(System.Drawing.Point)~Ranorex.Location">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Point"/> to <see cref="T:Ranorex.Location"/>.
            </summary>
            <param name="fixedLocation">The location (with fixed relative position).</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Ranorex.Location.op_Implicit(System.Drawing.PointF)~Ranorex.Location">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.PointF"/> to <see cref="T:Ranorex.Location"/>.
            </summary>
            <param name="proportionalLocation">The location (with a position proportional to an element's size).</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Ranorex.Location.op_Implicit(System.String)~Ranorex.Location">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Ranorex.Location"/>.
            </summary>
            <param name="location">The location (as string).</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.FormatException">If the string representation is not valid.</exception>
        </member>
        <member name="M:Ranorex.Location.op_Implicit(System.Drawing.Bitmap)~Ranorex.Location">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Bitmap"/> to <see cref="T:Ranorex.Location"/>.
            </summary>
            <param name="feature">A bitmap to search for inside an element.</param>
            <returns>A <see cref="T:Ranorex.Location"/> instance that refers to the center of the image
            found in an element.</returns>
        </member>
        <member name="M:Ranorex.Location.GetScreenLocation(Ranorex.Core.Element)">
            <summary>
            Gets the screen coordinates of a given <see cref="T:Ranorex.Location"/> corresponding to the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>The screen location resulting from the location and the specified element.</returns>
        </member>
        <member name="M:Ranorex.Location.GetElementLocation(Ranorex.Core.Element,System.Boolean)">
            <summary>
            Gets the coordinates of a given <see cref="T:Ranorex.Location"/> corresponding to the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="relative">A value specifying if the returned coordinates are relative
            to the element location or absolute (=screen) coordinates.</param>
            <returns>The coordinates resulting from the location and the specified element.</returns>
        </member>
        <member name="M:Ranorex.Location.GetLocationForRect(System.Drawing.Rectangle)">
            <summary>
            Gets the coordinates of a given <see cref="T:Ranorex.Location"/> corresponding to the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>The coordinates resulting from the location and the specified rectangle.</returns>
            <exception cref="T:System.NotSupportedException">If the location is image based.</exception>
        </member>
        <member name="P:Ranorex.Location.FixedLocation">
            <summary>
            Gets the relative pixel location if <see cref="P:Ranorex.Location.IsFixed"/> is true. Throws an exception if the location is proportional.
            </summary>
            <value>The fixed location.</value>
            <exception cref="T:System.InvalidOperationException">If the location is not fixed.</exception>
        </member>
        <member name="P:Ranorex.Location.ProportionalLocation">
            <summary>
            Gets the proportional location if <see cref="P:Ranorex.Location.IsFixed"/> is false. Throws an exception if the location is fixed.
            </summary>
            <value>The proportional location.</value>
            <exception cref="T:System.InvalidOperationException">If the location is not proportional.</exception>
        </member>
        <member name="P:Ranorex.Location.Feature">
            <summary>
            Gets or sets an image that should be searched inside an element.
            </summary>
            <remarks>
            If this property is set (to a value different from <c>null</c>), this location refers
            to the image found inside an element. That mean, the <see cref="P:Ranorex.Location.FixedLocation"/> and
            <see cref="P:Ranorex.Location.ProportionalLocation"/> properties are relative to the location of the image
            found inside an element.
            </remarks>
        </member>
        <member name="P:Ranorex.Location.FeatureOptions">
            <summary>
            Gets or sets the options for searching the <see cref="P:Ranorex.Location.Feature"/> image.
            </summary>
            <value>Set this property to <c>null</c> to use the <see cref="P:Ranorex.Imaging.FindOptions.Default"/>
            options.</value>
        </member>
        <member name="P:Ranorex.Location.IsFixed">
            <summary>
            Gets a value indicating whether this instance is fixed, i.e. has a fixed pixel value.
            </summary>
            <value><c>true</c> if this instance is fixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ranorex.Location.IsProportional">
            <summary>
            Gets a value indicating whether this instance is proportional, i.e. is proportional
            to the width and height of the element.
            </summary>
        </member>
        <member name="P:Ranorex.Location.IsImageBased">
            <summary>
            Gets a value indicating whether this instance searches for a <see cref="P:Ranorex.Location.Feature"/> image
            inside an element to get a relative offset inside the element.
            </summary>
        </member>
        <member name="M:Ranorex.Location.op_Equality(Ranorex.Location,Ranorex.Location)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="l1">The l1.</param>
            <param name="l2">The l2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Ranorex.Location.op_Inequality(Ranorex.Location,Ranorex.Location)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="l1">The first parameter of the comparison.</param>
            <param name="l2">The second parameter of the comparison.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Ranorex.Location.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Ranorex.Location"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Ranorex.Location"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Ranorex.Location"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Ranorex.Location.Equals(Ranorex.Location)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ranorex.Location.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Ranorex.Location"/>.
            </returns>
        </member>
        <member name="T:Ranorex.Location.LocationConverter">
            <summary>
            Converts <see cref="T:Ranorex.Location"/> instances from and to <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="F:Ranorex.Location.LocationConverter.CustomStandardValues">
            <summary>
            A collection of standard and custom <see cref="T:Ranorex.Location"/> values.
            </summary>
        </member>
        <member name="M:Ranorex.Location.LocationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns <c>true</c> for <see cref="T:System.String"/> type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Ranorex.Location.LocationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Creates a <see cref="T:Ranorex.Location"/> instance from a <see cref="T:System.String"/>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Ranorex.Location.LocationConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets standard <see cref="T:Ranorex.Location"/> values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:Ranorex.Location.LocationConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns <c>true</c>.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="T:Ranorex.PopupItemCallback">
            <summary>
            A callback to notify the client of unexpected dialogs/popups.
            </summary>
            <param name="info">The info originally specified.</param>
            <param name="target">The target element found.</param>
        </member>
        <member name="T:Ranorex.PopupPathCallback">
            <summary>
            A callback to notify the client of unexpected dialogs/popups.
            </summary>
            <param name="path">The RanoreXPath originally specified.</param>
            <param name="target">The target element found.</param>
        </member>
        <member name="T:Ranorex.PopupWatcher">
            <summary>
            Allows watching for unexpected dialogs and popups in the background.<br/>
            Use <see cref="M:Ranorex.PopupWatcher.Watch(Ranorex.Core.Repository.RepoItemInfo,Ranorex.PopupItemCallback)"/> or
            <see cref="M:Ranorex.PopupWatcher.WatchAndClick(Ranorex.Core.Repository.RepoItemInfo,Ranorex.Core.Repository.RepoItemInfo)"/> to register for notifications
            by providing a repository item or RxPath to watch for, as well as a callback to get notified
            or another repository item to click on if the watched element is found.
            </summary>
        </member>
        <member name="M:Ranorex.PopupWatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.PopupWatcher"/> class.
            </summary>
        </member>
        <member name="P:Ranorex.PopupWatcher.EnableReportMessages">
            <summary>
            Gets or sets a value indicating whether to report message when watched items are found and/or clicked.
            </summary>
            <value>
                <c>true</c> if report messages should be enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.PopupWatcher.RestoreActiveWindow">
            <summary>
            Gets or sets a value indicating whether the active window should be restored after performing the callback/click action.
            </summary>
            <value>
              <c>true</c> if the previously active window should be restored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.PopupWatcher.ReportCategory">
            <summary>
            Gets or sets the report category used by the watcher to report messages.
            </summary>
            <value>
            The report category. Defaults to 'Popup Watcher'.
            </value>
        </member>
        <member name="P:Ranorex.PopupWatcher.UpdateInterval">
            <summary>
            Gets or sets the update interval used to search for popup windows in the background.
            </summary>
            <value>
            The update interval. Defaults to 100ms.
            </value>
        </member>
        <member name="M:Ranorex.PopupWatcher.Watch(Ranorex.Core.Repository.RepoGenBaseFolder,Ranorex.PopupItemCallback)">
            <summary>
            Watches the specified repository item and invokes the specified callback when the repository item is found.
            </summary>
            <param name="watchedItem">The repository item/folder to watch.</param>
            <param name="callback">The notification callback.</param>
            <remarks>
            After adding watched items, <see cref="M:Ranorex.PopupWatcher.Start"/> needs to be called to start the watcher.
            </remarks>
        </member>
        <member name="M:Ranorex.PopupWatcher.Watch(Ranorex.Core.RxPath,Ranorex.PopupPathCallback)">
            <summary>
            Watches the specified repository item and invokes the specified callback when the repository item is found.
            </summary>
            <param name="path">The repository item/folder to watch.</param>
            <param name="callback">The notification callback.</param>
            <remarks>
            After adding watched items, <see cref="M:Ranorex.PopupWatcher.Start"/> needs to be called to start the watcher.
            </remarks>
        </member>
        <member name="M:Ranorex.PopupWatcher.WatchAndClick(Ranorex.Core.Repository.RepoGenBaseFolder,Ranorex.Core.Repository.RepoItemInfo)">
             <summary>
             Watches the repository item specified by <paramref name="watchedItem"/> and clicks on the item specified by <paramref name="clickedItem"/>
             when the watched item is found.
             </summary>
             <param name="watchedItem">The repository item/folder to watch.</param>
            <param name="clickedItem">The repository item to click on when the specified watched item is found.</param>
             <remarks>
             After adding watched items, <see cref="M:Ranorex.PopupWatcher.Start"/> needs to be called to start the watcher.
             </remarks>
        </member>
        <member name="M:Ranorex.PopupWatcher.WatchAndClick(Ranorex.Core.Repository.RepoItemInfo,Ranorex.Core.Repository.RepoItemInfo)">
             <summary>
             Watches the repository item specified by <paramref name="watchedItem"/> and clicks on the item specified by <paramref name="clickedItem"/>
             when the watched item is found.
             </summary>
             <param name="watchedItem">The repository item/folder to watch.</param>
            <param name="clickedItem">The repository item to click on when the specified watched item is found.</param>
             <remarks>
             After adding watched items, <see cref="M:Ranorex.PopupWatcher.Start"/> needs to be called to start the watcher.
             </remarks>
        </member>
        <member name="M:Ranorex.PopupWatcher.Watch(Ranorex.Core.Repository.RepoItemInfo,Ranorex.PopupItemCallback)">
            <summary>
            Watches the specified repository item and invokes the specified callback when the repository item is found.
            </summary>
            <param name="watchedItem">The repository item/folder to watch.</param>
            <param name="callback">The notification callback.</param>
            <remarks>
            After adding watched items, <see cref="M:Ranorex.PopupWatcher.Start"/> needs to be called to start the watcher.
            </remarks>
        </member>
        <member name="M:Ranorex.PopupWatcher.Start">
            <summary>
            Starts watching for configured repository items and RxPaths in the background.
            </summary>
        </member>
        <member name="M:Ranorex.PopupWatcher.Stop">
            <summary>
            Stops watching for repository items and RxPaths.
            </summary>
        </member>
        <member name="M:Ranorex.PopupWatcher.Clear">
            <summary>
            Clears all watched repository items and paths.
            </summary>
        </member>
        <member name="M:Ranorex.PopupWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ranorex.Validate">
            <summary>
            Provides a number of different validation methods.
            </summary>
            <remarks>
            You can use the following variables in messages you pass to the <see cref="T:Ranorex.Validate"/>
            methods that are replaced by the following values depending on the result of
            the validation:
            <list type="table">
                <listheader>
                    <term>Variable</term>
                    <description>Value if validation succeeds</description>
                    <description>Value if the validation fails</description>
                </listheader>
                <item>
                    <term>"@ValidateRESULT@"</term>
                    <description>"succeeded"</description>
                    <description>"failed"</description>
                </item>
                <item>
                    <term>"@ValidateNOT@"</term>
                    <description>""</description>
                    <description>"not "</description>
                </item>
                <item>
                    <term>"@ValidateTRUENOT@"</term>
                    <description>"not "</description>
                    <description>""</description>
                </item>
            </list>
            For example, the following message will be transformed according to the outcome of the
            validation:
            <code>
            bool condition = true;
            Validate.IsTrue(condition, "The validation @ValidateRESULT@.");
            </code>
            </remarks>
        </member>
        <member name="F:Ranorex.Validate.DefaultMessage">
            <summary>
            Use the value of this property to specify that the default
            validation message should be used.
            </summary>
        </member>
        <member name="P:Ranorex.Validate.EnableReport">
            <summary>
            Gets or sets a value indicating whether validations should produce report
            messages or not.
            </summary>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.Object,System.Object)">
            <summary>
            Validates if the actual value of an object equals an expected value.
            </summary>
            <param name="actual">The actual value of the object.</param>
            <param name="expected">The expected value of the object.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Validates if the actual value of an object equals an expected value.
            </summary>
            <param name="actual">The actual value of the object.</param>
            <param name="expected">The expected value of the object.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of <paramref name="actual"/>, "<b>{1}</b>" by the string representation
            of <paramref name="expected"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            Validates if the actual value of an object equals an expected value.
            </summary>
            <param name="actual">The actual value of the object.</param>
            <param name="expected">The expected value of the object.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of <paramref name="actual"/>, "<b>{1}</b>" by the string representation
            of <paramref name="expected"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if <paramref name="actual"/> and <paramref name="expected"/> are
            equal; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.Object,System.Object,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the actual value of an object equals an expected value.
            </summary>
            <param name="actual">The actual value of the object.</param>
            <param name="expected">The expected value of the object.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of <paramref name="actual"/>, "<b>{1}</b>" by the string representation
            of <paramref name="expected"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if <paramref name="actual"/> and <paramref name="expected"/> are
            equal; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Validates if the given regular expression matches the given string.
            </summary>
            <param name="actual">The string to match.</param>
            <param name="regex">The regular expression.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Validates if the given regular expression matches the given string.
            </summary>
            <param name="actual">The string to match.</param>
            <param name="regex">The regular expression to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of <paramref name="actual"/>, "<b>{1}</b>" by the string representation
            of <paramref name="regex"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.String,System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
            <summary>
            Validates if the given regular expression matches the given string.
            </summary>
            <param name="actual">The string to match.</param>
            <param name="regex">The regular expression to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of <paramref name="actual"/>, "<b>{1}</b>" by the string representation
            of <paramref name="regex"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if <paramref name="regex"/> matches <paramref name="actual"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AreEqual(System.String,System.Text.RegularExpressions.Regex,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the given regular expression matches the given string.
            </summary>
            <param name="actual">The string to match.</param>
            <param name="regex">The regular expression to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of <paramref name="actual"/>, "<b>{1}</b>" by the string representation
            of <paramref name="regex"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if <paramref name="regex"/> matches <paramref name="actual"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not match a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not match a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not match a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value does not match the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not match a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value does not match the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.IElement,System.String,System.Object)">
            <summary>
            Validates if the attribute of the specified element does not match a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.IElement,System.String,System.Object,System.String)">
            <summary>
            Validates if the attribute of the specified element does not match a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.IElement,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the specified element does not match a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value does not match the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotEqual(Ranorex.Core.IElement,System.String,System.Object,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the specified element does not match a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute not to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value does not match the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Object)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Object,System.String)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Object,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Attribute(Ranorex.Core.Element,System.String,System.Text.RegularExpressions.Regex,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Validates if the screenshot of the specified repository item matches the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image which is compared to the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String)">
            <summary>
            Validates if the screenshot of the specified repository item matches the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image which is compared to the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,System.Boolean)">
            <summary>
            Validates if the screenshot of the specified repository item matches the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image which is compared to the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> matches the
            screenshot of the <paramref name="itemInfo"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the screenshot of the specified repository item matches the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image which is compared to the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> matches the
            screenshot of the <paramref name="itemInfo"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Validates if the screenshot of the specified element matches the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image which is compared to the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String)">
            <summary>
            Validates if the screenshot of the specified element matches the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image which is compared to the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,System.Boolean)">
            <summary>
            Validates if the screenshot of the specified element matches the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image which is compared to the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> matches the
            screenshot of the <paramref name="element"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.CompareImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the screenshot of the specified element matches the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image which is compared to the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the comparison.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> matches the
            screenshot of the <paramref name="element"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Validates if the screenshot of the specified repository item contains the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image to search inside the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String)">
            <summary>
            Validates if the screenshot of the specified repository item contains the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image to search inside the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,System.Boolean)">
            <summary>
            Validates if the screenshot of the specified repository item contains the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image to search inside the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> is contained in the
            screenshot of the <paramref name="itemInfo"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Repository.RepoItemInfo,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the screenshot of the specified repository item contains the given image.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="image">The image to search inside the item screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> is contained in the
            screenshot of the <paramref name="itemInfo"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions)">
            <summary>
            Validates if the screenshot of the specified element contains the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image to search inside the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String)">
            <summary>
            Validates if the screenshot of the specified element contains the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image to search inside the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,System.Boolean)">
            <summary>
            Validates if the screenshot of the specified element contains the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image to search inside the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> is contained in the
            screenshot of the <paramref name="element"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.ContainsImage(Ranorex.Core.Element,System.Drawing.Bitmap,Ranorex.Imaging.FindOptions,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the screenshot of the specified element contains the given image.
            </summary>
            <param name="element">The element to take the screenshot from.</param>
            <param name="image">The image to search inside the element screenshot.</param>
            <param name="findOptions">A <see cref="T:Ranorex.Imaging.FindOptions"/> instance that defines the options
            for the search.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="image"/> is contained in the
            screenshot of the <paramref name="element"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(System.String)">
            <summary>
            Validates if the element for the specified path exists using the <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/>
            to keep looking for an element matching the path.
            </summary>
            <param name="path">The path to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(System.String,Ranorex.Duration)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(System.String,Ranorex.Duration,System.String)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the
            <paramref name="path"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(System.String,Ranorex.Duration,System.String,System.Boolean)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the
            <paramref name="path"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the path is valid and the element for the path exists;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(System.String,Ranorex.Duration,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the
            <paramref name="path"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the path is valid and the element for the path exists;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.RxPath)">
            <summary>
            Validates if the element for the specified path exists using the <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/>
            to keep looking for an element matching the path.
            </summary>
            <param name="path">The path to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.RxPath,Ranorex.Duration,System.String)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="path"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.RxPath,Ranorex.Duration,System.String,System.Boolean)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="path"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the element for the path exists; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.RxPath,Ranorex.Duration,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the element for the specified path exists.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="path"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the element for the path exists; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Repository.RepoItemInfo)">
            <summary>
            Validates if the element for the specified repository item exists.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Repository.RepoItemInfo,System.String)">
            <summary>
            Validates if the element for the specified repository item exists.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Boolean)">
            <summary>
            Validates if the element for the specified repository item exists.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the element for the repository item exists; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Repository.RepoItemInfo,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the element for the specified repository item exists.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the element for the repository item exists; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Element)">
            <summary>
            Validates if the specified element exists.
            </summary>
            <param name="element">The element to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Element,System.String)">
            <summary>
            Validates if the specified element exists.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Element,System.String,System.Boolean)">
            <summary>
            Validates if the specified element exists.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the element exists; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Exists(Ranorex.Core.Element,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the specified element exists.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the element exists; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not contain the specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not contain the specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not contain the specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the element for the specified repository item does not contain the specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.IElement,System.String,System.String)">
            <summary>
            Validates if the attribute of the specified element does not contain the specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.IElement,System.String,System.String,System.String)">
            <summary>
            Validates if the attribute of the specified element does not contain the specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.IElement,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the specified element does not contain the specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeNotContains(Ranorex.Core.IElement,System.String,System.String,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the specified element does not contain the specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item contains a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item contains a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the element for the specified repository item contains a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.Repository.RepoItemInfo,System.String,System.String,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the element for the specified repository item contains a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.IElement,System.String,System.String)">
            <summary>
            Validates if the attribute of the specified element contains a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.IElement,System.String,System.String,System.String)">
            <summary>
            Validates if the attribute of the specified element contains a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.IElement,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the specified element contains a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeContains(Ranorex.Core.IElement,System.String,System.String,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the specified element contains a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to contain.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value contains the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Text.RegularExpressions.Regex,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific regular expression.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.IElement,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.IElement,System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.IElement,System.String,System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeRegex(Ranorex.Core.IElement,System.String,System.Text.RegularExpressions.Regex,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the specified element matches a specific regular expression.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="regex">The regular expression to validate the attribute value
            string representation against.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of <paramref name="regex"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the specified <paramref name="regex"/> matches the attribute value;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="regex"/> is <c>null</c>.</exception>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Object,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the element for the specified repository item matches a specific value.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name of the
            <paramref name="itemInfo"/> object, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.IElement,System.String,System.Object)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.IElement,System.String,System.Object,System.String)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.IElement,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.AttributeEqual(Ranorex.Core.IElement,System.String,System.Object,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the attribute of the specified element matches a specific value.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="name">The name of the attribute to validate.</param>
            <param name="value">The value of the attribute to match.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string representation of
            the <paramref name="element"/>, "<b>{1}</b>" by the attribute <paramref name="name"/>, "<b>{2}</b>" by
            the string representation of the actual attribute value (or "<i>(not retrieved)</i>" if the attribute
            could not be retrieved), and "<b>{3}</b>" by the string representation of the expected <paramref name="value"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the attribute value matches the specified <paramref name="value"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.Fail">
            <summary>
            Always lets the validation fail.
            </summary>
            <exception cref="T:Ranorex.ValidationException">Always thrown.</exception>
            <remarks>Use this method to mark a 'test case' or 'smart folder' as failed and
            immediately exit the current module and test iteration.</remarks>
        </member>
        <member name="M:Ranorex.Validate.Fail(System.String)">
            <summary>
            Always lets the validation fail.
            </summary>
            <param name="message">The message to log.</param>
            <exception cref="T:Ranorex.ValidationException">Always thrown.</exception>
            <remarks>Use this method to mark a 'test case' or 'smart folder' as failed and
            immediately exit the current module and test iteration.</remarks>
        </member>
        <member name="M:Ranorex.Validate.Fail(System.String,Ranorex.Validate.Options)">
            <summary>
            Always lets the validation fail.
            </summary>
            <param name="message">The message to log.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns>Always returns <c>false</c> (unless a <see cref="T:Ranorex.ValidationException"/> is thrown
            depending on the passed <paramref name="options"/>).</returns>
            <exception cref="T:Ranorex.ValidationException">If
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsTrue(System.Boolean)">
            <summary>
            Validates if the given condition is <c>true</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsTrue(System.Boolean,System.String)">
            <summary>
            Validates if the given condition is <c>true</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsTrue(System.Boolean,System.String,System.Boolean)">
            <summary>
            Validates if the given condition is <c>true</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to log.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>true</c> if the specified condition is true; otherwise, <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsTrue(System.Boolean,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the given condition is <c>true</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to log.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>true</c> if the specified condition is true; otherwise, <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsFalse(System.Boolean)">
            <summary>
            Validates if the given condition is <c>false</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsFalse(System.Boolean,System.String)">
            <summary>
            Validates if the given condition is <c>false</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsFalse(System.Boolean,System.String,System.Boolean)">
            <summary>
            Validates if the given condition is <c>false</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to log.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>true</c> if the specified condition is false; otherwise, <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.IsFalse(System.Boolean,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the given condition is <c>false</c>.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to log.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>true</c> if the specified condition is false; otherwise, <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(System.String)">
            <summary>
            Validates if the element for the specified path does not exist using the
            <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> to keep looking for an element matching the path.
            </summary>
            <param name="path">The path to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(System.String,Ranorex.Duration)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(System.String,Ranorex.Duration,System.String)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the
            <paramref name="path"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(System.String,Ranorex.Duration,System.String,System.Boolean)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the
            <paramref name="path"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the path is not valid or the element for the path does not exist;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(System.String,Ranorex.Duration,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the
            <paramref name="path"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the path is not valid or the element for the path does not exist;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.RxPath)">
            <summary>
            Validates if the element for the specified path does not exist using the
            <see cref="P:Ranorex.Adapter.DefaultSearchTimeout"/> to keep looking for an element matching the path.
            </summary>
            <param name="path">The path to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.RxPath,Ranorex.Duration)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.RxPath,Ranorex.Duration,System.String)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="path"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.RxPath,Ranorex.Duration,System.String,System.Boolean)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="path"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the element for the path does not exist; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.RxPath,Ranorex.Duration,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the element for the specified path does not exist.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="searchTimeout">The time to keep looking for an element matching the path.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="path"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the element for the path does not exist; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Repository.RepoItemInfo)">
            <summary>
            Validates if the element for the specified repository item does not exist.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Repository.RepoItemInfo,System.String)">
            <summary>
            Validates if the element for the specified repository item does not exist.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Repository.RepoItemInfo,System.String,System.Boolean)">
            <summary>
            Validates if the element for the specified repository item does not exist.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the element for the repository item does not exist; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Repository.RepoItemInfo,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the element for the specified repository item does not exist.
            </summary>
            <param name="itemInfo">The <see cref="T:Ranorex.Core.Repository.RepoItemInfo"/> object for the repository item.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the name
            of the <paramref name="itemInfo"/> object.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the element for the repository item does not exist; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Element)">
            <summary>
            Validates if the specified element does not exist.
            </summary>
            <param name="element">The element to validate.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Element,System.String)">
            <summary>
            Validates if the specified element does not exist.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <exception cref="T:Ranorex.ValidationException">If the validation fails.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Element,System.String,System.Boolean)">
            <summary>
            Validates if the specified element does not exist.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <returns><c>True</c> if the element does not exist; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="exceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="M:Ranorex.Validate.NotExists(Ranorex.Core.Element,System.String,Ranorex.Validate.Options)">
            <summary>
            Validates if the specified element does not exist.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="message">The message to log. "<b>{0}</b>" is replaced by the string
            representation of the <paramref name="element"/>.</param>
            <param name="options">Additional <see cref="T:Ranorex.Validate.Options"/> for this validation action.</param>
            <returns><c>True</c> if the element does not exist; otherwise <c>false</c>.</returns>
            <exception cref="T:Ranorex.ValidationException">If the validation fails and
            <paramref name="options"/>.<see cref="P:Ranorex.Validate.Options.ExceptionOnFail"/> is <c>true</c>.</exception>
        </member>
        <member name="T:Ranorex.Validate.ResultOption">
            <summary>
            Specifies whether to create the validation result
            </summary>
        </member>
        <member name="F:Ranorex.Validate.ResultOption.Never">
            <summary>
            Never create validation result.
            </summary>
        </member>
        <member name="F:Ranorex.Validate.ResultOption.OnFail">
            <summary>
            Create result if validation fails.
            </summary>
        </member>
        <member name="F:Ranorex.Validate.ResultOption.OnSuccess">
            <summary>
            Create result if the validation succeeds.
            </summary>
        </member>
        <member name="F:Ranorex.Validate.ResultOption.Always">
            <summary>
            Always create result.
            </summary>
        </member>
        <member name="T:Ranorex.Validate.Options">
            <summary>
            Provides additional options for a validation action.
            </summary>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class with default values.
            </summary>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(Ranorex.ReportLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="reportLevelOnFailure">The report level used if the validation fails.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(Ranorex.Validate.ResultOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="reportScreenshot">A value specifying whether to add a screenshot to the report.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(System.Boolean,Ranorex.ReportLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <param name="reportLevelOnFailure">The report level used if the validation fails.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(System.Boolean,Ranorex.Validate.ResultOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <param name="reportScreenshot">A value specifying whether to add a screenshot to the report.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(Ranorex.ReportLevel,Ranorex.Validate.ResultOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="reportLevelOnFailure">The report level used if the validation fails.</param>
            <param name="reportScreenshot">A value specifying whether to add a screenshot to the report.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(System.Boolean,Ranorex.ReportLevel,Ranorex.Validate.ResultOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <param name="reportLevelOnFailure">The report level used if the validation fails.</param>
            <param name="reportScreenshot">A value specifying whether to add a screenshot to the report.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(System.Boolean,Ranorex.ReportLevel,Ranorex.ReportLevel,Ranorex.Validate.ResultOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <param name="reportLevelOnFailure">The report level used if the validation fails.</param>
            <param name="reportLevelOnSuccess">The report level used if the validation succeeds.</param>
            <param name="reportScreenshot">A value specifying whether to add a screenshot to the report.</param>
        </member>
        <member name="M:Ranorex.Validate.Options.#ctor(System.Boolean,Ranorex.ReportLevel,Ranorex.ReportLevel,Ranorex.Validate.ResultOption,Ranorex.Validate.ResultOption,Ranorex.Validate.ResultOption,Ranorex.Validate.ResultOption,Ranorex.Duration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.Validate.Options"/> class.
            </summary>
            <param name="exceptionOnFail">A value specifying if an exception should be
            thrown if the validation fails.</param>
            <param name="reportLevelOnFailure">The report level used if the validation fails.</param>
            <param name="reportLevelOnSuccess">The report level used if the validation succeeds.</param>
            <param name="reportScreenshot">A value specifying whether to add a screenshot to the report.</param>
            <param name="reportSimilarity">A value specifying whether to add similarity results to the report.</param>
            <param name="reportDifferenceImages">A value specifying whether to add difference images to the report.</param>
            <param name="reportExpectedAndActualImages">A value specifying whether to add the expected and actual images to the report.</param>
            <param name="gracePeriod">The grace period allowed for values to stabilize</param>
        </member>
        <member name="P:Ranorex.Validate.Options.Default">
            <summary>
            Gets or set the default options for validation actions.
            </summary>
            <exception cref="T:System.ArgumentNullException">If setting this property to <c>null</c>.</exception>
            <remarks>If you do not want to modify the default options please use the empty constructor instead of this property.</remarks>
        </member>
        <member name="P:Ranorex.Validate.Options.ExceptionOnFail">
            <summary>
            Gets or sets a value indicating whether an exception should be
            thrown if the validation fails.
            </summary>
            <value>
              <c>true</c> if an exception should be thrown if the validation fails; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Validate.Options.ReportLevelOnFailure">
            <summary>
            Gets or sets the report level used if the validation fails.
            </summary>
            <value>
            The report level on failure.
            </value>
        </member>
        <member name="P:Ranorex.Validate.Options.ReportLevelOnSuccess">
            <summary>
            Gets or sets the report level used if the validation succeeds.
            </summary>
            <value>
            The report level on success.
            </value>
        </member>
        <member name="P:Ranorex.Validate.Options.ReportScreenshot">
            <summary>
            Gets or sets a value specifying whether to add a screenshot to the report.
            </summary>
            <value>
            A value specifying whether to add a screenshot to the report.
            </value>
        </member>
        <member name="P:Ranorex.Validate.Options.ReportSimilarity">
            <summary>
            Gets or sets a value specifying whether to add the effective image similarity to the report.
            </summary>
            <value>
            A value specifying whether to add the effective image similarity to the report.
            </value>
        </member>
        <member name="P:Ranorex.Validate.Options.ReportDifferenceImages">
            <summary>
            Gets or sets a value specifying whether to add difference images to the report for image comparisons.
            </summary>
            <value>
            A value specifying whether to add difference images to the report.
            </value>
        </member>
        <member name="P:Ranorex.Validate.Options.ReportExpectedAndActualImages">
            <summary>
            Gets or sets a value specifying whether to add the expected and actual images to the report for image validations.
            </summary>
            <value>
            A value specifying whether to add the expected and actual images to the report.
            </value>
        </member>
        <member name="P:Ranorex.Validate.Options.GracePeriod">
            <summary>
            Gets or sets the grace period allowed for attribute validations to stabilize before the validation fails.
            </summary>
            <value>
            The grace period.
            </value>
        </member>
        <member name="M:Ranorex.Validate.Options.Parse(System.String)">
            <summary>
            Parses the given <see cref="T:System.String"/> and returns a new <see cref="T:Ranorex.Validate.Options"/> instance.
            </summary>
            <param name="optionsString">A string representing the find options.</param>
            <returns>A new <see cref="T:Ranorex.Validate.Options"/> corresponding to the given <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="optionsString"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">If <paramref name="optionsString"/> has an invalid format.</exception>
        </member>
        <member name="M:Ranorex.Validate.Options.TryParse(System.String,Ranorex.Validate.Options@)">
            <summary>
            Tries parsing the given <see cref="T:System.String"/> to a <see cref="T:Ranorex.Validate.Options"/> instance.
            </summary>
            <param name="optionsString">A string representing the validate options.</param>
            <param name="options">When this method returns, contains a <see cref="T:Ranorex.Validate.Options"/> instance
            if parsing succeeded, <c>null</c> otherwise.</param>
            <returns><c>True</c> if parsing succeeded, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Validate.Options.ToString">
            <summary>
            Returns a string representation of the instance.
            </summary>
            <returns>A string representation of the instance.</returns>
        </member>
        <member name="M:Ranorex.Validate.Options.op_Equality(Ranorex.Validate.Options,Ranorex.Validate.Options)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A <see cref="T:Ranorex.Validate.Options"/> instance.</param>
            <param name="b">Another <see cref="T:Ranorex.Validate.Options"/> instance.</param>
            <returns><c>True</c> if the two instances are equal.</returns>
        </member>
        <member name="M:Ranorex.Validate.Options.op_Inequality(Ranorex.Validate.Options,Ranorex.Validate.Options)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A <see cref="T:Ranorex.Validate.Options"/> instance.</param>
            <param name="b">Another <see cref="T:Ranorex.Validate.Options"/> instance.</param>
            <returns><c>True</c> if the two instances are not equal.</returns>
        </member>
        <member name="M:Ranorex.Validate.Options.Equals(Ranorex.Validate.Options,Ranorex.Validate.Options)">
            <summary>
            Returns <c>true</c> if the two instances are equal.
            </summary>
            <param name="a">An instance.</param>
            <param name="b">Another instance.</param>
            <returns><c>True</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Validate.Options.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to <paramref name="obj"/>.
            </summary>
            <param name="obj">Another instance.</param>
            <returns><c>True</c> if this instance is equal to <paramref name="obj"/>,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.Validate.Options.Equals(Ranorex.Validate.Options)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ranorex.Validate.Options.GetHashCode">
            <summary>
            Returns a static, very poor performing hash code!
            </summary>
            <returns>A hash code for this instance.</returns>
            <remarks>Since <see cref="T:Ranorex.Validate.Options"/> instances are not immutable, the only way to
            satisfy all <see cref="M:Ranorex.Validate.Options.Equals(System.Object)"/> and <see cref="M:Ranorex.Validate.Options.GetHashCode"/> requirements is
            to return a static number for all <see cref="T:Ranorex.Validate.Options"/> instances. Consequently,
            the performance of a hash table storing <see cref="T:Ranorex.Validate.Options"/> instances will be
            very poor (hash table degenerates to list)!</remarks>
        </member>
        <member name="T:Ranorex.Touch">
            <summary>
            Provides touch input actions.
            </summary>
        </member>
        <member name="P:Ranorex.Touch.IsSupported">
            <summary>
            Gets a value indicating whether touch input is supported on this system.
            </summary>
            <value>
                <c>true</c> if touch input is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ranorex.Touch.HasActivePointers">
            <summary>
            Gets a value indicating whether the touch input state has active (in contact) pointers.
            </summary>
            <value>
                <c>true</c> if the touch input state has active pointers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element)">
            <summary>
            Performs a touch action.
            </summary>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element,Ranorex.Duration)">
            <summary>
            Performs a touch action.
            </summary>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element,System.Int32,System.Int32)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to touch within the element rectangle in pixels. If the value is greater than the width of the
            element the click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to touch within the element rectangle in pixels. If the value is greater than the height of the
            element the click will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element,System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to touch within the element rectangle in pixels. If the value is greater than the width of the
            element the click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to touch within the element rectangle in pixels. If the value is greater than the height of the
            element the click will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element,System.Double,System.Double)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element,System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            touch will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element,System.Int32,Ranorex.Location)">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.Tap(Ranorex.Core.Element,System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="touchDuration">The duration between the down and up phase of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element)">
            <summary>
            Performs a long touch action on the adapter.
            </summary>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter.
            </summary>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="longTouchDuration">The timespan between the down and up event of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element,System.Int32,System.Int32)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element,System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="longTouchDuration">The timespan between the down and up event of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element,System.Double,System.Double)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element,System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="longTouchDuration">The timespan between the down and up event of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element,System.Int32,Ranorex.Location)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.LongTouch(Ranorex.Core.Element,System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a long touch action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="longTouchDuration">The timespan between the down and up event of the touch.</param>
        </member>
        <member name="M:Ranorex.Touch.DoubleTap(Ranorex.Core.Element)">
            <summary>
            Performs a double tap action on the adapter.
            </summary>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.DoubleTap(Ranorex.Core.Element,System.Int32,System.Int32)">
            <summary>
            Performs a double tap action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to tap within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to tap within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Double Tap action on.</param>
        </member>
        <member name="M:Ranorex.Touch.DoubleTap(Ranorex.Core.Element,System.Double,System.Double)">
            <summary>
            Performs a double tap action on the adapter with the specified location.
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.DoubleTap(Ranorex.Core.Element,System.Int32,Ranorex.Location)">
            <summary>
            Performs a double tap action on the adapter with the specified location.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Double Tap action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32)">
            <summary>
            Begins a multi touch operation on the adapter. Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Double,System.Double)">
            <summary>
            Begins a multi touch operation on the adapter. Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32,System.Int32)">
            <summary>
            Begins a multi touch operation on the adapter. Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Double,System.Double)">
            <summary>
            Begins a multi touch operation on the adapter. Multi touch operations can be used to compose more complex touch gestures.
            E.g. a swipe from left to right could be composed in the following way:
            <code>
            adapter.TouchStart(Location.Left);
            adapter.TouchEnd(Location.Right);
            </code>
            Useful multitouch operations always have the form
            <list type="bullet">
                <item><description>1   TouchStart</description></item>
                <item><description>0-N TouchMove</description></item>
                <item><description>1   TouchEnd</description></item>
            </list>
            </summary>
            If the multi touch operation doesn't conform to this form the adapter will still try to perform the provided list
            of operations but it's likely the result will not be of any use for the UI-automation.
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,Ranorex.Location)">
            <summary>
            Performs a touch start action on the adapter.
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchEnd(Ranorex.Core.Element,System.Int32,System.Int32)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchEnd(Ranorex.Core.Element,System.Double,System.Double)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchEnd(Ranorex.Core.Element,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchEnd(Ranorex.Core.Element,System.Int32,System.Double,System.Double)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchEnd(Ranorex.Core.Element,System.Int32,Ranorex.Location)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchEnd(Ranorex.Core.Element,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="moveTime">The time it takes the pointer to move to the specified position.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchEnd(Ranorex.Core.Element,System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Finishes a multi touch operation on the adapter. <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="moveTime">The time it takes the pointer to move to the specified position.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,System.Int32)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="moveDuration">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Double,System.Double)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle in pixels. If the value is greater than the width of the
            element the touch will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle in pixels. If the value is greater than the height of the
            element the touch will be performed outside the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            /// <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,System.Double,System.Double)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,System.Double,System.Double,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Double,System.Double)"/>
            </summary>
            <param name="x">
            X-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed outside the element.
            </param>
            <param name="y">
            Y-Coordinate to click within the element rectangle as percentage (1.0 = 100%). If the value is greater than 1.0 the
            click will be performed the element.
            </param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,Ranorex.Location)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,System.Int32)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="moveTime">The time it takes the pointer to move to the specified position.</param>
        </member>
        <member name="M:Ranorex.Touch.TouchMove(Ranorex.Core.Element,System.Int32,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Performs a touch move action on the adapter. This adds a move to the specified location with cursor pressed.
            <seealso cref="M:Ranorex.Touch.TouchStart(Ranorex.Core.Element,System.Int32,Ranorex.Location)"/>
            </summary>
            <param name="location">The location to touch at.</param>
            <param name="element">The element to perform the Touch action on.</param>
            <param name="pointer">The pointer identifier to use, with zero being the default pointer.</param>
            <param name="moveTime">The timespan between the first and the second position update of the event.</param>
        </member>
        <member name="M:Ranorex.Touch.Reset">
            <summary>
            Resets the current touch state, removing all active pointers.
            </summary>
        </member>
        <member name="M:Ranorex.Touch.Swipe(Ranorex.Core.Element,Ranorex.Location,Ranorex.Core.Recorder.Touch.GestureDirection,Ranorex.Duration,Ranorex.Core.Distance,System.Int32)">
            <summary>
            Performs a 'Swipe' operations that starts at the point of the element specified by location.
            </summary>
            <param name="element">The element based on the swipe should start.</param>
            <param name="startLocation">The location where the swipe should start.</param>
            <param name="direction">The direction of the swipe.</param>
            <param name="swipeDuration">The duration in that the swipe shall get performed.</param>
            <param name="distance">
            The distance to swipe. For custom rotations the values is not pixel exact and will likely
            get rounded. The rounding is dependent of the technology the swipe is executed on.
            </param>
            <param name="steps">
            How many steps the swipe shall have. A step is one distinct move event on the target technology. The default is '0', this
            means the target technology determines how many steps are made by applying custom heuristics. A step count of one will
            produce the event sequence 1x pointer down, 1x pointer move and 1x pointer up. A step count of two will produce the
            event sequence 1x pointer down, 2x pointer move and 1x pointer up.
            </param>
        </member>
        <member name="T:Ranorex.MouseEventHandler">
            <summary>
            Represents the method that will handle the events of the <see cref="T:Ranorex.Mouse"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Ranorex.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Ranorex.MouseEventArgs">
            <summary>
            Provides data for the events of the <see cref="T:Ranorex.Mouse"/> class.
            </summary>
        </member>
        <member name="M:Ranorex.MouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.DateTime)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons"/> values indicating which mouse button was pressed.</param>
            <param name="clicks">The number of times a mouse button was pressed.</param>
            <param name="x">The x-coordinate of a mouse click, in screen coordinates (pixels).</param>
            <param name="y">The y-coordinate of a mouse click, in screen coordinates (pixels).</param>
            <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
            <param name="simulated">A value indicating whether the event has been simulated or issued because of a physical
            mouse action.</param>
            <param name="time">The time the event was raised at.</param>
        </member>
        <member name="P:Ranorex.MouseEventArgs.Simulated">
            <summary>
            Gets a value indicating whether the event has been simulated or issued because of a physical
            mouse action.
            </summary>
        </member>
        <member name="P:Ranorex.MouseEventArgs.SuppressMouseAction">
            <summary>
            Gets or sets a value indicating whether this mouse event should be suppressed, i.e. not passed on to the system.
            </summary>
        </member>
        <member name="P:Ranorex.MouseEventArgs.Time">
            <summary>
            Gets the time the event was raised at.
            </summary>
        </member>
        <member name="T:Ranorex.Mouse">
            <summary>
            Provides mouse actions and events.
            </summary>
        </member>
        <member name="E:Ranorex.Mouse.Move">
            <summary>
            Occurs when the mouse is moved.
            </summary>
        </member>
        <member name="E:Ranorex.Mouse.Up">
            <summary>
            Occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:Ranorex.Mouse.Down">
            <summary>
            Occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:Ranorex.Mouse.Wheel">
            <summary>
            Occurs when the mouse wheel is scrolled.
            </summary>
        </member>
        <member name="E:Ranorex.Mouse.HorizontalWheel">
            <summary>
            Occurs when the horizontal mouse wheel is scrolled.
            </summary>
        </member>
        <member name="P:Ranorex.Mouse.Enabled">
            <summary>
            Gets or sets a value indicating whether physical mouse actions are enabled.
            </summary>
            <remarks>
            If the mouse is disabled, physical mouse movements will be ignored, i.e. they are not passed
            on to the system. However, the <see cref="T:Ranorex.Mouse"/> events (like <see cref="E:Ranorex.Mouse.Move"/>) will
            still be raised with the <see cref="P:Ranorex.MouseEventArgs.SuppressMouseAction"/> property of the event
            args set to <c>true</c>. To reenable specific mouse events, set the
            <see cref="P:Ranorex.MouseEventArgs.SuppressMouseAction"/> of the event args to <c>false</c>.
            </remarks>
        </member>
        <member name="P:Ranorex.Mouse.DefaultMoveTime">
            <summary>
            Gets or sets the default time it takes to move the mouse to a specified position.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is negative.</exception>
        </member>
        <member name="P:Ranorex.Mouse.DefaultClickTime">
            <summary>
            Gets ors sets the default time of a mouse click, i.e. the time elapsed between
            the mouse button being pressed (<see cref="E:Ranorex.Mouse.Down"/> event) and released again
            (<see cref="E:Ranorex.Mouse.Up"/> event).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is negative.</exception>
        </member>
        <member name="P:Ranorex.Mouse.Position">
            <summary>
            Gets or sets the current position of the mouse in screen coordinates (pixels).
            </summary>
        </member>
        <member name="P:Ranorex.Mouse.Cursor">
            <summary>
            Returns the currently displayed mouse cursor.
            </summary>
            <value>The current mouse cursor.</value>
        </member>
        <member name="P:Ranorex.Mouse.CursorName">
            <summary>
            Gets the name of the current mouse <see cref="P:Ranorex.Mouse.Cursor"/>. If the cursor is not a system cursor,
            but a custom cursor, the name is 'Custom' plus its <see cref="P:System.Windows.Forms.Cursor.Handle"/> value.
            </summary>
            <value>The name of the cursor.</value>
        </member>
        <member name="P:Ranorex.Mouse.MouseInterpolation">
            <summary>
            Gets or sets the current mouse interpolation function.
            </summary>
        </member>
        <member name="P:Ranorex.Mouse.DisableManualInputDuringActions">
            <summary>
            Disables or enables manual mouse input by the user while input actions are performed.
            </summary>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(Ranorex.Core.Element)">
            <summary>
            Moves the mouse to the specified element.
            </summary>
            <param name="element">The element to move to.</param>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(Ranorex.Core.Element,Ranorex.Duration)">
            <summary>
            Moves the mouse to the specified element.
            </summary>
            <param name="element">The element to move to.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(Ranorex.Core.Element,Ranorex.Location)">
            <summary>
            Moves the mouse to the specified location in the element.
            </summary>
            <param name="element">The element to move to.</param>
            <param name="location">The location relative to the element to move to.</param>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(Ranorex.Core.Element,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Moves the mouse to the specified location in the element.
            </summary>
            <param name="element">The element to move to.</param>
            <param name="location">The location relative to the element to move to.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <exception cref="T:Ranorex.RanorexException">If the location to move to is outside of the visible desktop.</exception>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the mouse to the specified point.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to move to.</param>
            <param name="y">The y screen coordinate (pixels) of the point to move to.</param>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the mouse to the specified point.
            </summary>
            <param name="point">The point in screen coordinates (pixels).</param>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Moves the mouse to the specified point.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to move to.</param>
            <param name="y">The y screen coordinate (pixels) of the point to move to.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(System.Drawing.Point,Ranorex.Duration)">
            <summary>
            Moves the mouse to the specified point.
            </summary>
            <param name="point">The point in screen coordinates (pixels).</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
            <exception cref="T:Ranorex.RanorexException">If the specified <paramref name="point"/> is outside of
            the visible desktop.</exception>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(System.Int32,System.Int32,System.Double)">
            <summary>
            Moves the mouse to the specified point.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to move to.</param>
            <param name="y">The y screen coordinate (pixels) of the point to move to.</param>
            <param name="pixelsPerSecond">Specifies the mouse speed in pixels moved per second.</param>
        </member>
        <member name="M:Ranorex.Mouse.MoveTo(System.Drawing.Point,System.Double)">
            <summary>
            Moves the mouse to the specified point.
            </summary>
            <param name="point">The point in screen coordinates (pixels).</param>
            <param name="pixelsPerSecond">Specifies the mouse speed in pixels moved per second.</param>
        </member>
        <member name="M:Ranorex.Mouse.ButtonUp(System.Windows.Forms.MouseButtons)">
            <summary>
            Releases the specified mouse button.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.ButtonDown(System.Windows.Forms.MouseButtons)">
            <summary>
            Presses the specified mouse button.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click">
            <summary>
            Clicks the left mouse button.
            </summary>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Windows.Forms.MouseButtons)">
            <summary>
            Clicks the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            Clicks the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="clickTime">The time of a mouse click, i.e. the time elapsed between
            the mouse button being pressed (<see cref="E:Ranorex.Mouse.Down"/> event) and released again
            (<see cref="E:Ranorex.Mouse.Up"/> event).</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Windows.Forms.MouseButtons,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks the specified mouse buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="times">The number of times to click.</param>
            <param name="clickTime">The time of a mouse click, i.e. the time elapsed between
            the mouse button being pressed (<see cref="E:Ranorex.Mouse.Down"/> event) and released again
            (<see cref="E:Ranorex.Mouse.Up"/> event).</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element)">
            <summary>
            Clicks on the element with the left mouse button.
            </summary>
            <param name="element">The element to click.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons)">
            <summary>
            Clicks on the element with the specified mouse buttons.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,Ranorex.Location)">
            <summary>
            Clicks on the element with the left mouse button at a specific location <paramref name="location"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="location">The location to click at.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,Ranorex.Duration)">
            <summary>
            Clicks on the element with the left mouse button.
            </summary>
            <param name="element">The element to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Location)">
            <summary>
            Clicks on the element with the specified mouse buttons at a specific location <paramref name="location"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location to click at.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
            Clicks on the element with the specified mouse buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="times">The number of times to click.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            Clicks on the element with the specified mouse buttons.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Clicks on the element at a specific location.
            </summary>
            <param name="element">The element to click.</param>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks on the element with the left mouse button the specified number of <paramref name="times"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Location,System.Int32)">
            <summary>
            Clicks on the element with the specified mouse buttons at a given location the specified number of <paramref name="times"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="times">The number of times to click.</param>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Location,Ranorex.Duration)">
            <summary>
            Clicks on the element with the specified mouse buttons at a given location.
            </summary>
            <param name="element">The element to click.</param>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks on the element with the specified mouse buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,Ranorex.Location,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks on the element at a specific location, with the left mouse button, the specified number of <paramref name="times"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="times">The number of times to click.</param>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Location,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at the specified <paramref name="location"/> relative to the element with the specified mouse
            buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location relative to the upper-left corner of the element
            to click on.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Int32,System.Int32)">
            <summary>
            Clicks at point with the left mouse button.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to click on.</param>
            <param name="y">The y screen coordinate (pixels) of the point to click on.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Drawing.Point)">
            <summary>
            Clicks at point with the left mouse button.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Clicks at point with the specified mouse buttons.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to click on.</param>
            <param name="y">The y screen coordinate (pixels) of the point to click on.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Clicks at point with the specified mouse buttons.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at point with the left mouse button.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to click on.</param>
            <param name="y">The y screen coordinate (pixels) of the point to click on.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Drawing.Point,Ranorex.Duration)">
            <summary>
            Clicks at point with the left mouse button.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Int32,System.Int32,System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            Clicks at point with the specified mouse buttons.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to click on.</param>
            <param name="y">The y screen coordinate (pixels) of the point to click on.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Drawing.Point,System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            Clicks at point with the specified mouse buttons.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Int32,System.Int32,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at point with the left mouse button the specified number of <paramref name="times"/>.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to click on.</param>
            <param name="y">The y screen coordinate (pixels) of the point to click on.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Drawing.Point,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at point with the left mouse button the specified number of <paramref name="times"/>.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Int32,System.Int32,System.Windows.Forms.MouseButtons,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at point with the specified mouse buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="x">The x screen coordinate (pixels) of the point to click on.</param>
            <param name="y">The y screen coordinate (pixels) of the point to click on.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.Click(System.Drawing.Point,System.Windows.Forms.MouseButtons,System.Int32,Ranorex.Duration)">
            <summary>
            Clicks at point with the specified mouse buttons the specified number of <paramref name="times"/>.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="times">The number of times to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick">
            <summary>
            DoubleClicks the left mouse button.
            </summary>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(System.Windows.Forms.MouseButtons)">
            <summary>
            DoubleClicks the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            DoubleClicks the specified mouse buttons.
            </summary>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="clickTime">The time of a mouse click, i.e. the time elapsed between
            the mouse button being pressed (<see cref="E:Ranorex.Mouse.Down"/> event) and released again
            (<see cref="E:Ranorex.Mouse.Up"/> event).</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element)">
            <summary>
            DoubleClicks on the element with the left mouse button.
            </summary>
            <param name="element">The element to click.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element,System.Windows.Forms.MouseButtons)">
            <summary>
            DoubleClicks on the element with the specified mouse buttons.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element,Ranorex.Location)">
            <summary>
            DoubleClicks on the element with the left mouse button at a specific location <paramref name="location"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="location">The location to click at.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element,Ranorex.Duration)">
            <summary>
            DoubleClicks on the element with the left mouse button.
            </summary>
            <param name="element">The element to click.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Location)">
            <summary>
            DoubleClicks on the element with the specified mouse buttons at a specific location <paramref name="location"/>.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="location">The location to click at.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            DoubleClicks on the element with the specified mouse buttons.
            </summary>
            <param name="element">The element to click.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element,Ranorex.Location,Ranorex.Duration)">
            <summary>
            DoubleClicks on the element at a specific location.
            </summary>
            <param name="element">The element to click.</param>
            <param name="location">The location to click at.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(Ranorex.Core.Element,System.Windows.Forms.MouseButtons,Ranorex.Location,Ranorex.Duration)">
            <summary>
            DoubleClicks on the element with the specified mouse buttons at a given location.
            </summary>
            <param name="element">The element to click.</param>
            <param name="location">The location to click at.</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(System.Drawing.Point)">
            <summary>
            DoubleClicks at point with the left mouse button.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            DoubleClicks at point with the specified mouse buttons.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(System.Drawing.Point,Ranorex.Duration)">
            <summary>
            DoubleClicks at point with the left mouse button.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.DoubleClick(System.Drawing.Point,System.Windows.Forms.MouseButtons,Ranorex.Duration)">
            <summary>
            DoubleClicks at point with the specified mouse buttons.
            </summary>
            <param name="point">The point to click on in screen coordinates (pixels).</param>
            <param name="buttons">A bit-wise combination of <see cref="T:System.Windows.Forms.MouseButtons"/> values
            that specify the mouse buttons for this action.</param>
            <param name="moveTime">The time after which the mouse should be at the specified position.</param>
        </member>
        <member name="M:Ranorex.Mouse.ScrollWheel(System.Int32)">
            <summary>
            Scrolls the mouse wheel.
            </summary>
            <param name="delta">Specifies the amount of wheel movement; this value should be a
            multiple of <see cref="P:System.Windows.Forms.SystemInformation.MouseWheelScrollDelta"/>. A positive value
            indicates that the wheel is rotated forward, away from the user; a negative value indicates
            that the wheel is rotated backward, toward the user.</param>
        </member>
        <member name="M:Ranorex.Mouse.ScrollWheel(System.Double)">
            <summary>
            Scrolls the mouse wheel.
            </summary>
            <param name="lines">The number of lines to scroll. A positive value
            indicates that the wheel is rotated forward, away from the user; a negative value indicates
            that the wheel is rotated backward, toward the user.</param>
            <remarks>
            This method examines the values of <see cref="P:System.Windows.Forms.SystemInformation.MouseWheelScrollLines"/>
            and <see cref="P:System.Windows.Forms.SystemInformation.MouseWheelScrollDelta"/> to compute a value for
            the <see cref="M:Ranorex.Mouse.ScrollWheel(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:Ranorex.Mouse.ScrollHorizontalWheel(System.Int32)">
            <summary>
            Scrolls the horizontal mouse wheel.
            </summary>
            <param name="delta">Specifies the amount of wheel movement; this value should be a
            multiple of <see cref="P:System.Windows.Forms.SystemInformation.MouseWheelScrollDelta"/>. A positive value
            indicates that the wheel is rotated to the right; a negative value indicates
            that the wheel is rotated to the left.</param>
        </member>
        <member name="M:Ranorex.Mouse.ScrollHorizontalWheel(System.Double)">
            <summary>
            Scrolls the horizontal mouse wheel.
            </summary>
            <param name="characters">The number of characters to scroll. A positive value
            indicates that the wheel is rotated to the right; a negative value indicates
            that the wheel is rotated to the left.</param>
            <remarks>
            This method examines the Windows mouse settings to compute a value for
            the <see cref="M:Ranorex.Mouse.ScrollHorizontalWheel(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:Ranorex.Mouse.GetCursorImage">
            <summary>
            Returns an image of the current mouse <see cref="P:Ranorex.Mouse.Cursor"/>.
            </summary>
            <returns>An image of the current mouse cursor.</returns>
        </member>
        <member name="M:Ranorex.Mouse.GetCursorImage(System.Windows.Forms.Cursor)">
            <summary>
            Returns an image of the <paramref name="cursor"/>.
            </summary>
            <param name="cursor">A <see cref="P:Ranorex.Mouse.Cursor"/> instance.</param>
            <returns>An image of the <paramref name="cursor"/>.</returns>
        </member>
        <member name="T:Ranorex.Mouse.MouseInterpolationFunction">
            <summary>
            A function for interpolation mouse movements.
            </summary>
            <param name="lambda">The interpolation parameter in [0,1] (proportional to time)</param>
            <param name="start">The start point</param>
            <param name="end">The end point</param>
            <remarks>Note that f(0) must be 'start' and f(1) must be 'end'.</remarks>
            <returns>The interpolated point, derived form the inputs.</returns>
        </member>
        <member name="T:Ranorex.Mouse.MouseInterpolators">
            <summary>
            Pre-defined mouse interpolation functions
            </summary>
        </member>
        <member name="M:Ranorex.Mouse.MouseInterpolators.Linear(System.Double,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Linear position interpolation.
            </summary>
            <param name="lambda">see MouseInterpolationFunction</param>
            <param name="start">see MouseInterpolationFunction</param>
            <param name="end">see MouseInterpolationFunction</param>
            <returns>see MouseInterpolationFunction</returns>
        </member>
        <member name="M:Ranorex.Mouse.MouseInterpolators.ExponentialSaturation(System.Double,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Exponential position interpolation generates more move events towards the end point.
            </summary>
            <param name="lambda">see MouseInterpolationFunction</param>
            <param name="start">see MouseInterpolationFunction</param>
            <param name="end">see MouseInterpolationFunction</param>
            <returns>see MouseInterpolationFunction</returns>
        </member>
        <member name="T:Ranorex.Mouse.MouseInterpolationMode">
            <summary>
            Modes for interpolating simulated mouse movements between start and end points
            </summary>
        </member>
        <member name="F:Ranorex.Mouse.MouseInterpolationMode.Compatible">
            <summary>
            Linear movement
            </summary>
        </member>
        <member name="F:Ranorex.Mouse.MouseInterpolationMode.Optimized">
            <summary>
            Non-linear movement, more events towards target point
            </summary>
        </member>
        <member name="T:Ranorex.Report">
            <summary>
            The Ranorex reporting service.<br/>
            Used to log messages to a number of configured loggers.
            </summary>
        </member>
        <member name="M:Ranorex.Report.Finalize">
            <summary>
            Finalizer for automatic logger shutdown.
            </summary>
        </member>
        <member name="P:Ranorex.Report.MinimumReportLevel">
            <summary>
            Gets or sets the current report level that is the minimum <see cref="T:Ranorex.ReportLevel"/> message
            need to have to be included in the report.
            </summary>
            <remarks>The default level is <see cref="F:Ranorex.ReportLevel.Info"/>.</remarks>
            <value>The minimum report level that log entries need to have to be included in the report.</value>
        </member>
        <member name="P:Ranorex.Report.CurrentReportLevel">
            <summary>
            Gets or sets the current report level that is the minimum <see cref="T:Ranorex.ReportLevel"/> message
            need to have to be included in the report.
            </summary>
            <remarks>The default level is <see cref="F:Ranorex.ReportLevel.Info"/>.</remarks>
            <value>The minimum report level that log entries need to have to be included in the report.</value>
        </member>
        <member name="P:Ranorex.Report.DefaultCategory">
            <summary>
            Gets or sets the default report category to use if not explicitly specified when reporting messages.
            </summary>
            <value>The default category name.</value>
        </member>
        <member name="P:Ranorex.Report.CustomCategoryStyles">
            <summary>
            Allows setting of custom formatting CSS styles per category. These styles override ReportLevel styles if set.
            </summary>
        </member>
        <member name="M:Ranorex.Report.CopyToFileOrFileStream(System.String,System.String,System.IO.Stream)">
            <summary>
            Copies a XML or zipped XML report file and all the external files referenced by the report file to a file or stream.
            This method automatically handles copying from and to zipped and unzipped report files.
            </summary>
            <remarks>
            Make sure the report is saved first to copy all files. Only currently existing files are copied.
            </remarks>
            <param name="sourceLog">Full path to the source report file.</param>
            <param name="destinationReportFileName">Full path to copy the report file to.</param>
            <param name="fileStream">The file stream to write to or <c>null</c>.</param>
        </member>
        <member name="M:Ranorex.Report.CopyToFileOrFileStream(Ranorex.Core.Reporting.ReportEnvironment,System.String,System.IO.Stream)">
            <summary>
            Copies a XML or zipped XML report file and all the external files referenced by the report file to a file or stream.
            This method automatically handles copying from and to zipped and unzipped report files.
            </summary>
            <remarks>
            Make sure the report is saved first to copy all files. Only currently existing files are copied.
            </remarks>
            <param name="reportEnvironment">Current report environment.</param>
            <param name="destinationReportFileName">Full path to copy the report file to.</param>
            <param name="fileStream">The file stream to write to or <c>null</c>.</param>
        </member>
        <member name="M:Ranorex.Report.Copy(System.String,System.String)">
            <summary>
            Copies a XML or zipped XML report file and all the external files referenced by the report file to a file.
            This method automatically handles copying from and to zipped and unzipped report files.
            </summary>
            <remarks>
            Make sure the report is saved first to copy all files. Only currently existing files are copied.
            </remarks>
            <param name="sourceLog">Full path to the source report file.</param>
            <param name="destinationReportFileName">Full path to copy the report file to.</param>
        </member>
        <member name="M:Ranorex.Report.Copy(Ranorex.Core.Reporting.ReportEnvironment,System.String)">
            <summary>
            Copies a XML or zipped XML report file and all the external files referenced by the report file to a file.
            This method automatically handles copying from and to zipped and unzipped report files.
            </summary>
            <remarks>
            Make sure the report is saved first to copy all files. Only currently existing files are copied.
            </remarks>
            <param name="reportEnvironment">Current report environment.</param>
            <param name="destinationReportFileName">Full path to copy the report file to.</param>
        </member>
        <member name="M:Ranorex.Report.Zip(Ranorex.Core.Reporting.ReportEnvironment,System.String,System.String)">
            <summary>
            Zips the XML report file and all the external files referenced by the report file to a zip file with the extension ".rxzlog".
            </summary>
            <param name="reportEnvironment">Active report environment.</param>
            <param name="targetDirectory">Directory to save zipped XML report file in. If <c>null</c> or empty,
            <see cref="P:System.Environment.CurrentDirectory"/> is used.</param>
            <param name="zipReportFileName">Name of the zipped report file. The ".rxzlog" extension is added by default.</param>
        </member>
        <member name="M:Ranorex.Report.Zip(System.String,System.String,System.String)">
            <summary>
            Zips the XML report file and all the external files referenced by the report file to a zip file with the extension ".rxzlog".
            </summary>
             <param name="sourceLog">Full path to the source report file.</param>
            <param name="targetDirectory">Directory to save zipped XML report file in. If <c>null</c> or empty,
            <see cref="P:System.Environment.CurrentDirectory"/> is used.</param>
            <param name="zipReportFileName">Name of the zipped report file. The ".rxzlog" extension is added by default.</param>
        </member>
        <member name="M:Ranorex.Report.Unzip(System.String,System.String)">
            <summary>
            Unzips a zipped XML report file (with the extension ".rxzlog") and all the external files references.
            </summary>
            <param name="zipReportFileName">Full file path of the zipped ".rxzlog" file.</param>
            <param name="targetDirectory">The directory to save extracted XML report file in.</param>
            <returns>The full file path of the extracted XML report file.</returns>
        </member>
        <member name="M:Ranorex.Report.HasZipReportFileExtension(System.String)">
            <summary>
            Determines if a file name has the Ranorex Zip report file extension.
            </summary>
            <param name="reportFileName">The file name to check.</param>
            <returns><c>True</c> if the file has the ".rxzlog" extension.</returns>
        </member>
        <member name="M:Ranorex.Report.HasReportFileExtension(System.String)">
            <summary>
            Determines if a file name has the Ranorex Xml report file extension.
            </summary>
            <param name="reportFileName">The file name to check.</param>
            <returns><c>True</c> if the file has the ".rxlog" extension.</returns>
        </member>
        <member name="M:Ranorex.Report.HasReportDataFileExtension(System.String)">
            <summary>
            Determines if a file name has the Ranorex Stub View report file extension.
            </summary>
            <param name="reportFileName">The file name to check.</param>
            <returns><c>True</c> if the file has the ".rxlog.data" extension.</returns>
        </member>
        <member name="M:Ranorex.Report.IsReportFile(System.String)">
            <summary>
            Determines if a file is a valid Ranorex report file.
            </summary>
            <param name="reportFileName">The file name to check.</param>
            <returns><c>True</c> if the file is a valid Ranorex report file.</returns>
        </member>
        <member name="M:Ranorex.Report.IsReportFile(System.String,System.String)">
            <summary>
            Determines if a file is a valid Ranorex report file.
            </summary>
            <param name="reportFileName">The file name to check.</param>
            <param name="fileFilter">A list of known file extensions that are not report files.</param>
            <returns><c>True</c> if the file is a valid Ranorex report file.</returns>
        </member>
        <member name="M:Ranorex.Report.GetDependentFiles(System.String)">
            <summary>
            Gets all the external files referenced by the report file.
            </summary>
            <param name="xmlReportFileName">Name of the XML report file.</param>
            <returns>A list of external relative filenames referenced by the report file.</returns>
        </member>
        <member name="M:Ranorex.Report.Setup(Ranorex.ReportLevel,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets up the reporting environment compatible with Ranorex version 2.X.
            </summary>
            <param name="minLevel">The minimum <see cref="T:Ranorex.ReportLevel"/> for messages that are to be
            written to the report.</param>
            <param name="xmlReportFileName">Name of the XML report file, or null if XML logging should be disabled.</param>
            <param name="logToConsole">if set to <c>true</c>, logging to console is enabled.</param>
            <param name="appendExisting">if set to <c>true</c>, append to existing XML file instead of overwriting it.</param>
        </member>
        <member name="M:Ranorex.Report.Setup(Ranorex.ReportLevel,System.String,System.Boolean)">
            <summary>
            Sets up the reporting environment compatible with Ranorex version 2.X.
            </summary>
            <param name="minLevel">The minimum <see cref="T:Ranorex.ReportLevel"/> for messages that are to be
            written to the report.</param>
            <param name="xmlReportFileName">Name of the XML report file, or null if XML logging should be disabled.</param>
            <param name="logToConsole">if set to <c>true</c>, logging to console is enabled.</param>
        </member>
        <member name="M:Ranorex.Report.SetupDefault">
            <summary>
            Sets up the reporting environment with <see cref="F:Ranorex.ReportLevel.Info"/>, XML logging and console logging enabled.
            </summary>
        </member>
        <member name="M:Ranorex.Report.Start">
            <summary>
            Starts reporting with the previously configured settings.
            </summary>
            <remarks>To restart reporting, <see cref="M:Ranorex.Report.End"/> needs to be called first.</remarks>
        </member>
        <member name="M:Ranorex.Report.End">
            <summary>
            Ends reporting. It is not required to explicitly call this method before shutdown.
            </summary>
        </member>
        <member name="M:Ranorex.Report.AttachLogger(Ranorex.Core.IReportLogger)">
            <summary>
            Attaches a custom logger to the reporting environment.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Ranorex.Report.DetachLogger(Ranorex.Core.IReportLogger)">
            <summary>
            Detaches a custom logger from the reporting environment.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Ranorex.Report.Log(Ranorex.ReportLevel,System.String)">
            <summary>
            Logs a message using the <see cref="P:Ranorex.Report.DefaultCategory"/>.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="message">The message text itself.</param>
        </member>
        <member name="M:Ranorex.Report.Log(Ranorex.ReportLevel,System.String,System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="message">The message text itself.</param>
        </member>
        <member name="M:Ranorex.Report.Log(Ranorex.ReportLevel,System.String,System.String,Ranorex.Core.IReportMetadata[])">
            <summary>
            Logs a message.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="message">The message text itself.</param>
            <param name="metaData">Advanced reference information for use in the report. Used by Ranorex internally.</param>
        </member>
        <member name="M:Ranorex.Report.LogHtml(Ranorex.ReportLevel,System.String,System.String)">
            <summary>
            Logs a message. The message must contain valid XHTML markup.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="messageHtml">The message text itself.</param>
        </member>
        <member name="M:Ranorex.Report.LogHtml(Ranorex.ReportLevel,System.String,System.String,Ranorex.Core.IReportMetadata[])">
            <summary>
            Logs a message. The message must contain valid XHTML markup.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="messageHtml">The message text itself.</param>
            <param name="metaData">Advanced reference information for use in the report. Used by Ranorex internally.</param>
        </member>
        <member name="M:Ranorex.Report.LogHtml(Ranorex.ReportLevel,System.String)">
            <summary>
            Logs a message using the <see cref="P:Ranorex.Report.DefaultCategory"/>. The message can contain XHTML markup.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="messageHtml">The message text itself.</param>
        </member>
        <member name="M:Ranorex.Report.LogData(Ranorex.ReportLevel,System.String,System.Object)">
            <summary>
            Logs a data message.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="data">The data object to log.</param>
            <remarks>Note that this is not support by all loggers, nor are all data types supported.</remarks>
        </member>
        <member name="M:Ranorex.Report.LogData(Ranorex.ReportLevel,System.String,System.String,System.Object)">
            <summary>
            Logs a data message.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="data">The data object to log.</param>
            <param name="message">An optional message for the data.</param>
            <remarks>Note that this is not support by all loggers, nor are all data types supported.</remarks>
        </member>
        <member name="M:Ranorex.Report.LogData(Ranorex.ReportLevel,System.String,System.String,System.Object,Ranorex.Core.IReportMetadata[])">
            <summary>
            Logs a data message.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="data">The data object to log.</param>
            <param name="message">An optional message for the data.</param>
            <param name="metaData">Advanced reference information for use in the report. Used by Ranorex internally.</param>
            <remarks>Note that this is not support by all loggers, nor are all data types supported.</remarks>
        </member>
        <member name="M:Ranorex.Report.Debug(System.String,System.String)">
            <summary>
            Logs a debug-level message.
            </summary>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Info(System.String,System.String)">
            <summary>
            Logs an info-level message.
            </summary>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Warn(System.String,System.String)">
            <summary>
            Logs a warning-level message.
            </summary>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Error(System.String,System.String)">
            <summary>
            Logs an error-level message.
            </summary>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Success(System.String,System.String)">
            <summary>
            Logs a logical success (e.g. test step success) message.
            </summary>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Failure(System.String,System.String)">
            <summary>
            Logs a logical failure (e.g. test step failure) message.
            </summary>
            <param name="category">The category name.</param>
            <param name="message">The message text.</param>
            <remarks>Calling this method marks the current test container as failed, but does not stop
            execution of the current module or test container. If you want the execution of the current module
            to stop immediately, call <see cref="M:Ranorex.Validate.Fail(System.String)"/> instead.</remarks>
        </member>
        <member name="M:Ranorex.Report.Debug(System.String)">
            <summary>
            Logs a debug-level message, using the default category.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Info(System.String)">
            <summary>
            Logs an info-level message, using the default category.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Warn(System.String)">
            <summary>
            Logs a warning-level message, using the default category.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Error(System.String)">
            <summary>
            Logs an error-level message, using the default category.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Success(System.String)">
            <summary>
            Logs a logical success (e.g. test step success) message, using the default category.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Ranorex.Report.Failure(System.String)">
            <summary>
            Logs a logical failure (e.g. test step failure) message, using the default category.
            </summary>
            <param name="message">The message text.</param>
            <remarks>Calling this method marks the current test container as failed, but does not stop
            execution of the current module or test container. If you want the execution of the current module
            to stop immediately, call <see cref="M:Ranorex.Validate.Fail(System.String)"/> instead.</remarks>
        </member>
        <member name="M:Ranorex.Report.Screenshot">
            <summary>
            Logs a message containing a screenshot of the whole desktop.
            </summary>
            <remarks>This is not supported by the console logger.</remarks>
        </member>
        <member name="M:Ranorex.Report.Screenshot(Ranorex.Core.Element)">
            <summary>
            Logs a message containing a screenshot of a specified element.
            </summary>
            <param name="target">The element to make the screenshot from.</param>
            <remarks>Screenshots will not show up in the console logger.</remarks>
        </member>
        <member name="M:Ranorex.Report.Screenshot(Ranorex.Core.Element,System.Boolean)">
            <summary>
            Logs a message containing a screenshot of a specified element.
            </summary>
            <param name="target">The element to make the screenshot from.</param>
            <param name="highlightWithinSurroundingArea">If set to <c>true</c> the screenshot will not only
            contain the element, but also its surrounding area and will highlight the element
            within it.</param>
            <remarks>Screenshots will not show up in the console logger.</remarks>
        </member>
        <member name="M:Ranorex.Report.Screenshot(System.String,Ranorex.Core.Element)">
            <summary>
            Logs a message containing a screenshot of a specified element.
            </summary>
            <param name="message">An optional message for the screenshot.</param>
            <param name="target">The element to make the screenshot from.</param>
            <remarks>Screenshots will not show up in the console logger.</remarks>
        </member>
        <member name="M:Ranorex.Report.Screenshot(System.String,Ranorex.Core.Element,System.Boolean)">
            <summary>
            Logs a message containing a screenshot of a specified element.
            </summary>
            <param name="message">An optional message for the screenshot.</param>
            <param name="target">The element to make the screenshot from.</param>
            <param name="highlightWithinSurroundingArea">If set to <c>true</c> the screenshot will not only
            contain the element, but also its surrounding area and will highlight the element
            within it.</param>
            <remarks>Screenshots will not show up in the console logger.</remarks>
        </member>
        <member name="M:Ranorex.Report.Screenshot(Ranorex.ReportLevel,System.String,System.String,Ranorex.Core.Element,System.Boolean,Ranorex.Core.IReportMetadata[])">
            <summary>
            Logs a message containing a screenshot of a specified element.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="message">An optional message for the screenshot.</param>
            <param name="target">The element to make the screenshot from.</param>
            <param name="highlightWithinSurroundingArea">If set to <c>true</c> the screenshot will not only
            contain the element, but also its surrounding area and will highlight the element
            within it.</param>
            <param name="metaData">Advanced reference information for use in the report. Used by Ranorex internally.</param>
            <remarks>Screenshots will not show up in the console logger.</remarks>
        </member>
        <member name="M:Ranorex.Report.Snapshot(Ranorex.Core.Element)">
            <summary>
            Creates and stores a snapshot of the specified <paramref name="target"/> element
            and adds a link to the snapshot to the report.
            </summary>
            <param name="target">The target element to create the snapshot of.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Report.Snapshot(System.String,Ranorex.Core.Element)">
            <summary>
            Creates and stores a snapshot of the specified <paramref name="target"/> element
            and adds a link to the snapshot to the report.
            </summary>
            <param name="message">An optional message to log to the report.</param>
            <param name="target">The target element to create the snapshot of.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Report.Snapshot(Ranorex.ReportLevel,System.String,System.String,Ranorex.Core.Element,Ranorex.Core.IReportMetadata[])">
            <summary>
            Creates and stores a snapshot of the specified <paramref name="target"/> element
            and adds a link to the snapshot to the report.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="message">An optional message to log to the report.</param>
            <param name="target">The target element to create the snapshot of.</param>
            <param name="metaData">Advanced reference information for use in the report. Used by Ranorex internally.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Report.Link(System.String)">
            <summary>
            Adds the specified link to the report. If the link is a relative file path or points to a file
            within the report directory, the linked file will also be included in zipped or copied versions of the report.
            </summary>
            <param name="link">The link to add to the report.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="link"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Report.Link(System.String,System.String)">
            <summary>
            Adds the specified link to the report. If the link is a relative file path or points to a file
            within the report directory, the linked file will also be included in zipped or copied versions of the report.
            </summary>
            <param name="message">An optional message to log to the report.</param>
            <param name="link">The link to add to the report.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="link"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Report.Link(Ranorex.ReportLevel,System.String,System.String,System.String,Ranorex.Core.IReportMetadata[])">
            <summary>
            Adds the specified link to the report. If the link is a relative file path or points to a file
            within the report directory, the linked file will also be included in zipped or copied versions of the report.
            </summary>
            <param name="level">The reporting level of the message.</param>
            <param name="category">The category name.</param>
            <param name="message">An optional message to log to the report.</param>
            <param name="link">The link to add to the report.</param>
            <param name="metaData">Advanced reference information for use in the report. Used by Ranorex internally.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="category"/> or <paramref name="link"/> are <c>null</c>.</exception>
        </member>
        <member name="M:Ranorex.Report.SystemSummary">
            <summary>
            Logs a message containing a short system the summary.
            </summary>
            <remarks>The system summary contains information about the host, OS, locale, memory and screens.</remarks>
        </member>
        <member name="M:Ranorex.Report.ProcessSummary(System.String)">
            <summary>
            Logs a message containing a short process summary.
            </summary>
            <param name="imageName">The name of the process image/executable to gather information from.</param>
            <remarks>The process summary contains information about the process resource usage.</remarks>
        </member>
        <member name="M:Ranorex.Report.ProcessSummary(System.Int32)">
            <summary>
            Logs a message containing a short process summary.
            </summary>
            <param name="pid">The process id of the process to gather information from.</param>
            <remarks>The process summary contains information about the process resource usage.</remarks>
        </member>
        <member name="M:Ranorex.Report.ProcessSummary(Ranorex.Core.Repository.RepoItemInfo)">
            <summary>
            Logs a message containing a short process summary.
            </summary>
            <param name="repoItemInfo">An repository item representing an element which belongs to the process to gather information from.</param>
            <remarks>The process summary contains information about the process resource usage.</remarks>
        </member>
        <member name="M:Ranorex.Report.ProcessSummary(Ranorex.Core.Element)">
            <summary>
            Logs a message containing a short process summary.
            </summary>
            <param name="element">An element which belongs to the process to gather information from.</param>
            <remarks>The process summary contains information about the process resource usage.</remarks>
        </member>
        <member name="M:Ranorex.Report.ProcessSummary(System.Diagnostics.Process)">
            <summary>
            Logs a message containing a short process summary.
            </summary>
            <param name="p">The process to gather information from.</param>
            <remarks>The process summary contains information about the process resource usage.</remarks>
        </member>
        <member name="T:Ranorex.RecordItemIndex">
            <summary>
            Provides metadata information about the index of record items for report generation.
            </summary>
        </member>
        <member name="M:Ranorex.RecordItemIndex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.RecordItemIndex"/> class.
            </summary>
            <param name="index">The index of the associated record item.</param>
        </member>
        <member name="T:Ranorex.ActionTimeout">
            <summary>
            Provides metadata information about the timeout of the associated action for report generation.
            </summary>
        </member>
        <member name="M:Ranorex.ActionTimeout.#ctor(Ranorex.Duration)">
            <summary>
            Initializes a new instance of the <see cref="T:Ranorex.ActionTimeout"/> class.
            </summary>
            <param name="timeout">The timeout of the associated action.</param>
        </member>
        <member name="T:Ranorex.ReportLevel">
            <summary>
            Defines (importance-) levels used for logging individual messages.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Debug">
            <summary>
            Indicates a debug/trace message, typically used during development.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Info">
            <summary>
            Indicates a general informational message.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Warn">
            <summary>
            Indicates a warning, e.g. an usual event or a recoverable error.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Error">
            <summary>
            Indicates an error, usually of severe nature.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Success">
            <summary>
            Indicates the successful execution of a test step.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Failure">
            <summary>
            Indicates the failed execution of a test step.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Always">
            <summary>
            Indicates that report messages with this level will always be logged regardless
            of the level set to <see cref="P:Ranorex.Report.MinimumReportLevel"/>.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.None">
            <summary>
            If set to <see cref="P:Ranorex.Report.MinimumReportLevel"/>, indicates to log no report
            messages at all but such with report level <see cref="F:Ranorex.ReportLevel.Always"/>.
            </summary>
        </member>
        <member name="F:Ranorex.ReportLevel.Inherit">
            <summary>
            Indicates that the log level for a <see cref="T:Ranorex.Core.Testing.TestCaseNode"/> should be inherited from
            its parent. Use this level only for setting the <see cref="P:Ranorex.Core.Testing.TestCaseNode.ReportLevel"/>
            property.
            </summary>
            <remarks>Only for use with <see cref="P:Ranorex.Core.Testing.TestCaseNode.ReportLevel"/>.</remarks>
        </member>
        <member name="M:Ranorex.ReportLevel.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructs a new report level.
            </summary>
            <param name="name">The name of the level.</param>
            <param name="level">The actual level value used to compare this instance to other instances.</param>
            <param name="customStyle">A custom formatting style for this report level for use in the XML report. Null for default style.</param>
        </member>
        <member name="P:Ranorex.ReportLevel.StandardValues">
            <summary>
            Gets an array of the standard report levels.
            </summary>
        </member>
        <member name="P:Ranorex.ReportLevel.StandardErrorValues">
            <summary>
            Gets an array of the standard warning/error report levels.
            </summary>
        </member>
        <member name="P:Ranorex.ReportLevel.Name">
            <summary>
            Gets the name of this level.
            </summary>
        </member>
        <member name="P:Ranorex.ReportLevel.Level">
            <summary>
            Gets the actual level value used to compare this instance to other instances.
            </summary>
        </member>
        <member name="P:Ranorex.ReportLevel.CustomStyle">
            <summary>
            Gets the custom CSS style of the report level.
            Is set to null if the default specified by the Ranorex stylesheet is to be used.
            </summary>
        </member>
        <member name="M:Ranorex.ReportLevel.Parse(System.String)">
            <summary>
            Parses <paramref name="reportLevelString"/> and returns a new <see cref="T:Ranorex.ReportLevel"/> instance.
            </summary>
            <param name="reportLevelString">A string representing a report level.</param>
            <returns>A new <see cref="T:Ranorex.ReportLevel"/> corresponding to <paramref name="reportLevelString"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="reportLevelString"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">If <paramref name="reportLevelString"/> has an invalid format.</exception>
        </member>
        <member name="M:Ranorex.ReportLevel.TryParse(System.String,Ranorex.ReportLevel@)">
            <summary>
            Tries parsing <paramref name="reportLevelString"/> to a <see cref="T:Ranorex.ReportLevel"/> instance.
            </summary>
            <param name="reportLevelString">A string representing a report level.</param>
            <param name="reportLevel">When this method returns, contains a <see cref="T:Ranorex.ReportLevel"/> instance
            if parsing succeeded, <c>null</c> otherwise.</param>
            <returns><c>True</c> if parsing succeeded, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.IsStandardValue(Ranorex.ReportLevel)">
            <summary>
            Determines whether the specified report level is a standard report level.
            </summary>
            <param name="reportLevel">A report level.</param>
            <returns>
              <c>true</c> if the specified report level is one of the <see cref="P:Ranorex.ReportLevel.StandardValues"/>;
              otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ranorex.ReportLevel.op_Equality(Ranorex.ReportLevel,Ranorex.ReportLevel)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>Returns whether <paramref name="r1"/> and <paramref name="r2"/> are equal.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.op_Inequality(Ranorex.ReportLevel,Ranorex.ReportLevel)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>Returns whether <paramref name="r1"/> and <paramref name="r2"/> are not equal.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.op_GreaterThan(Ranorex.ReportLevel,Ranorex.ReportLevel)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>Returns whether <paramref name="r1"/> is greater than <paramref name="r2"/>.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.op_GreaterThanOrEqual(Ranorex.ReportLevel,Ranorex.ReportLevel)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>Returns whether <paramref name="r1"/> is greater than or equal to <paramref name="r2"/>.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.op_LessThan(Ranorex.ReportLevel,Ranorex.ReportLevel)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>Returns whether <paramref name="r1"/> is less than <paramref name="r2"/>.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.op_LessThanOrEqual(Ranorex.ReportLevel,Ranorex.ReportLevel)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>Returns whether <paramref name="r1"/> is less than or equal to <paramref name="r2"/>.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current instance.
            </summary>
            <param name="obj">Another object.</param>
            <returns><c>True</c> if the specified object is equal to the current instance;
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.GetHashCode">
            <summary>
            Computes a hash for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            <list type="table">
            <listheader>
                <term>Value</term>
                <description>Meaning</description>
            </listheader>
            <item>
                <term>Less than zero</term>
                <description>This instance is less than <paramref name="obj"/>.</description>
            </item>
            <item>
                <term>Zero</term>
                <description>This instance is equal to <paramref name="obj"/>.</description>
            </item>
            <item>
                <term>Greater than zero</term>
                <description>This instance is greater than <paramref name="obj"/>.</description>
            </item>
            </list></returns>
            <exception cref="T:System.ArgumentException">obj is not of type <see cref="T:Ranorex.ReportLevel"/>.</exception>
        </member>
        <member name="M:Ranorex.ReportLevel.CompareTo(Ranorex.ReportLevel)">
            <summary>
            Compares the current instance with another report level.
            </summary>
            <param name="other">A report level to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            <list type="table">
            <listheader>
                <term>Value</term>
                <description>Meaning</description>
            </listheader>
            <item>
                <term>Less than zero</term>
                <description>This instance is less than <paramref name="other"/>.</description>
            </item>
            <item>
                <term>Zero</term>
                <description>This instance is equal to <paramref name="other"/>.</description>
            </item>
            <item>
                <term>Greater than zero</term>
                <description>This instance is greater than <paramref name="other"/>.</description>
            </item>
            </list></returns>
        </member>
        <member name="M:Ranorex.ReportLevel.Equals(Ranorex.ReportLevel)">
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            <param name="other">Another object.</param>
            <returns><c>True</c> if the current object is equal to the <paramref name="other"/>
            parameter; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.ToString">
            <summary>
            Returns a string represenation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.ToString(System.String)">
            <summary>
            Returns a string represenation of this instance.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use or
            <c>null</c> to use the default format.</param>
            <returns>A string representation of this instance.</returns>
            <remarks>See the documentation of the <see cref="M:Ranorex.ReportLevel.ToString(System.String,System.IFormatProvider)"/> method
            for available format identifiers.</remarks>
        </member>
        <member name="M:Ranorex.ReportLevel.ToString(System.IFormatProvider)">
            <summary>
            Returns a string represenation of this instance.
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use or <c>null</c>
            to obtain the format information from the current locale setting of the operating system.</param>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:Ranorex.ReportLevel.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string represenation of this instance.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use or
            <c>null</c> to use the default format.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use or <c>null</c>
            to obtain the format information from the current locale setting of the operating system.</param>
            <returns>A string representation of this instance.</returns>
            <remarks>
            The following string values are valid for <paramref name="format"/>:
            <list type="table">
            <listheader>
                <term>Format String</term>
                <description>Description and Associated Properties</description>
            </listheader>
            <item>
                <term>g</term>
                <description>General format. Returns the <see cref="P:Ranorex.ReportLevel.Name"/> of the report level.</description>
            </item>
            <item>
                <term>h</term>
                <description>Human readable format. "g" format is used if this instance is one
                of the <see cref="P:Ranorex.ReportLevel.StandardValues"/>; otherwise "r" format is used.</description>
            </item>
            <item>
                <term>r</term>
                <description>Round-trip (serialization) format. Returns a string representation containing all
                the information to create the instance again using the <see cref="M:Ranorex.ReportLevel.Parse(System.String)"/> method.</description>
            </item>
            <item>
                <term>d</term>
                <description>Decimal format. Returns the <see cref="P:Ranorex.ReportLevel.Level"/> in decimal form.
                See <see cref="M:System.Int32.ToString(System.String,System.IFormatProvider)"/> for more info.</description>
            </item>
            <item>
                <term>x</term>
                <description>Hexadecimal format. Returns the <see cref="P:Ranorex.ReportLevel.Level"/> in hexadecimal form.
                See <see cref="M:System.Int32.ToString(System.String,System.IFormatProvider)"/> for more info.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Ranorex.ReportLevel.ReportLevelConverter">
            <summary>
            Converts from <see cref="T:Ranorex.ReportLevel"/> to <see cref="T:System.String"/> and vice versa.
            </summary>
        </member>
        <member name="M:Ranorex.ReportLevel.ReportLevelConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Ranorex.ReportLevel.ReportLevelConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Ranorex.ReportLevel.ReportLevelConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Ranorex.ReportLevel.ReportLevelConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:Ranorex.ReportLevel.ReportLevelConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
    </members>
</doc>
